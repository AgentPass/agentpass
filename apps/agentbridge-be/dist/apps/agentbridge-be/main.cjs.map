{
  "version": 3,
  "sources": ["../../../src/utils/config.ts", "../../../src/logger.ts", "../../../src/services/secrets.service.ts", "../../../src/services/cache.service.ts", "../../../src/services/jwt.service.ts", "../../../src/utils/generateRequestOverrides.ts", "../../../src/utils/icons.ts", "../../../src/utils/openapi.ts", "../../../src/utils/tools.ts", "../../../src/services/servers.service.ts", "../../../src/main.ts", "../../../src/utils/connection.ts", "../../../src/utils/logger-cls.ts", "../../../src/middlewares/db.middleware.ts", "../../../src/middlewares/error.middleware.ts", "../../../src/utils/req-guards.ts", "../../../src/middlewares/logger.middleware.ts", "../../../src/middlewares/session.middleware.ts", "../../../src/services/oauth.service.ts", "../../../src/types/error.types.ts", "../../../src/utils/hash.ts", "../../../src/routes/admins.routes.ts", "../../../src/controllers/admins.controller.ts", "../../../src/services/admins.service.ts", "../../../../../libs/agentbridge-utils/src/lib/openapi/parse.ts", "../../../../../libs/agentbridge-utils/src/analytics-events.ts", "../../../src/services/analytics.service.ts", "../../../src/services/email.service.ts", "../../../src/services/email.service.templates.ts", "../../../src/routes/ai.routes.ts", "../../../src/controllers/ai.controller.ts", "../../../src/services/ai.service.ts", "../../../src/services/prompts.service.ts", "../../../src/middlewares/rate-limit.middleware.ts", "../../../src/routes/analytics.routes.ts", "../../../src/services/datadog.service.ts", "../../../src/controllers/analytics.controller.ts", "../../../src/routes/folders.routes.ts", "../../../src/controllers/folders.controller.ts", "../../../src/services/folders.service.ts", "../../../src/routes/health.routes.ts", "../../../src/controllers/health.controller.ts", "../../../src/routes/mcp.routes.ts", "../../../src/controllers/mcp.controller.ts", "../../../src/services/mcp.service.ts", "../../../src/constants/tool-parameters.ts", "../../../src/services/api-exec/api-tool-executor.ts", "../../../src/utils/json.ts", "../../../src/services/api-exec/parameter-schema.ts", "../../../src/middleware/server-auth.middleware.ts", "../../../src/middlewares/serverId.middleware.ts", "../../../src/services/jwt-auth.service.ts", "../../../src/services/mcp-access.service.ts", "../../../src/services/strategies/base-auth.strategy.ts", "../../../src/services/strategies/jwt-auth.strategy.ts", "../../../src/services/factories/auth-strategy.factory.ts", "../../../src/services/server-auth.service.ts", "../../../src/routes/mirror.routes.ts", "../../../src/controllers/mirror.controller.ts", "../../../src/routes/oauth.routes.ts", "../../../src/controllers/oauth.controller.ts", "../../../src/services/enduser.service.ts", "../../../src/services/ownid.secret.service.ts", "../../../src/routes/ownid.routes.ts", "../../../src/controllers/ownid.controller.ts", "../../../src/middlewares/ownid.middleware.ts", "../../../src/routes/providers.routes.ts", "../../../src/controllers/oauth-providers.controller.ts", "../../../src/routes/server-auth.routes.ts", "../../../src/controllers/server-auth.controller.ts", "../../../src/routes/servers.routes.ts", "../../../src/controllers/servers.controller.ts", "../../../src/routes/tenant.routes.ts", "../../../src/controllers/tenant.controller.ts", "../../../src/services/tenant.service.ts", "../../../src/middlewares/role.middleware.ts", "../../../src/routes/users.routes.ts", "../../../src/controllers/tokens.controller.ts", "../../../src/services/tokens.service.ts", "../../../src/controllers/users.controller.ts", "../../../src/services/users.service.ts", "../../../src/utils/qsParsers.ts"],
  "sourcesContent": ["export const isLocalRun = process.env.IS_LOCAL === \"true\";\n\nexport const DEFAULT_PAGE_SIZE = 20;\n", "import tracer from \"dd-trace\";\nimport winston from \"winston\";\nimport { isLocalRun } from \"./utils/config.js\";\n\ntracer.init({\n  logInjection: true,\n});\n\nconst logger = winston.createLogger({\n  level: process.env.LOG_LEVEL || \"info\",\n  format: winston.format.combine(\n    winston.format.timestamp(),\n    winston.format.json(),\n    winston.format.errors({ stack: true }),\n  ),\n  transports: [\n    new winston.transports.Console({\n      format: isLocalRun ? winston.format.combine(winston.format.colorize(), winston.format.simple()) : undefined,\n    }),\n  ],\n});\n\nexport default logger;\n", "import {\n  GetSecretValueCommand,\n  GetSecretValueCommandInput,\n  SecretsManagerClient,\n} from \"@aws-sdk/client-secrets-manager\";\n// eslint-disable-next-line no-restricted-imports\nimport logger from \"../logger.js\";\n\nconst environment = process.env.ENV || \"dev\";\nconst secretName = `agentbridge-${environment}-secrets`;\n\nconst client = new SecretsManagerClient({\n  region: process.env.AWS_SECRETS_REGION || \"us-east-2\",\n});\n\nexport interface AppSecrets {\n  jwtSecret: string;\n  dbEncryptionKey: string;\n  datadogApiKey: string;\n  datadogAppKey: string;\n  smtpHost: string;\n  smtpPort: string;\n  smtpUsername: string;\n  smtpPassword: string;\n  ownidAdminSharedSecret: string;\n  ownidEnduserSharedSecret: string;\n  anthropicApiKey: string;\n  openaiApiKey: string;\n}\n\nconst appSecrets: Promise<AppSecrets> = (async () => {\n  try {\n    const input: GetSecretValueCommandInput = {\n      SecretId: secretName,\n    };\n\n    const command = new GetSecretValueCommand(input);\n    const response = await client.send(command);\n\n    if (!response.SecretString) {\n      throw new Error(`Secret ${secretName} value is empty`);\n    }\n\n    const value = JSON.parse(response.SecretString) as AppSecrets;\n    logger.debug(`Successfully loaded secrets from AWS Secrets Manager for environment: ${environment}`);\n    return value;\n  } catch (error) {\n    logger.error(`Failed to retrieve secrets from AWS Secrets Manager`, error);\n    process.exit(1);\n  }\n})();\n\nexport async function getAppSecrets(): Promise<AppSecrets> {\n  return await appSecrets;\n}\n", "import NodeCache from \"node-cache\";\n\nexport enum CacheItemType {\n  SERVER_ACCESS = \"server_access\",\n  SERVER = \"server\",\n  ENDUSER_TOKEN = \"enduser_token\",\n}\n\ninterface CacheItem<T> {\n  value: T;\n  type: CacheItemType;\n}\n\ninterface CacheTTLConfig {\n  [key: string]: number;\n}\n\nconst TTL_CONFIG: CacheTTLConfig = {\n  [CacheItemType.SERVER_ACCESS]: 300, // 5 minutes\n  [CacheItemType.SERVER]: 120, // 2 minutes\n  [CacheItemType.ENDUSER_TOKEN]: 300, // 5 minutes\n};\n\nexport const cache = new NodeCache({\n  checkperiod: 30,\n});\n\ntype CacheKey = {\n  type: CacheItemType;\n  ids: string[];\n};\n\nconst keyToString = (key: CacheKey): string => `${key.type}::${key.ids.join(\":\")}`;\n\nexport async function cacheGetOrAdd<T>(key: CacheKey, fetchFn: () => Promise<T>): Promise<T> {\n  const keyString = keyToString(key);\n  const cached = cache.get<CacheItem<T>>(keyString);\n\n  if (cached) {\n    return cached.value;\n  }\n\n  const value = await fetchFn();\n  const ttl = TTL_CONFIG[key.type];\n\n  cache.set(keyString, { value }, ttl);\n\n  return value;\n}\n\nexport function clearCache(key: CacheKey): boolean {\n  const keyString = keyToString(key);\n  return cache.del(keyString) > 0;\n}\n\nconst clearCacheByKeyPrefix = (keyString: string) => {\n  const keys = cache.keys();\n  const matchingKeys = keys.filter((key) => key.startsWith(keyString));\n\n  if (matchingKeys.length > 0) {\n    cache.del(matchingKeys);\n  }\n};\n\nexport function clearCacheByType(type: CacheItemType): void {\n  clearCacheByKeyPrefix(`${type}::`);\n}\n\nexport function clearCacheByPartialKey(type: CacheItemType, id: string): void {\n  clearCacheByKeyPrefix(keyToString({ type, ids: [id] }));\n}\n", "import { Admin, AdminRole, EndUser } from \"@prisma/client\";\nimport jwt, { JwtPayload, Secret, SignOptions } from \"jsonwebtoken\";\nimport { AdminVerificationPayload } from \"../types/admin.types.js\";\nimport { getAppSecrets } from \"./secrets.service.js\";\n\nconst JWT_SECRET: Promise<Secret> = (async () => (await getAppSecrets()).jwtSecret)();\nconst JWT_EXPIRES_IN = process.env.JWT_EXPIRES_IN || \"2d\";\nconst VERIFICATION_TOKEN_EXPIRES_IN = process.env.JWT_EXPIRES_IN || \"14d\";\n\nexport interface AdminClaims extends JwtPayload {\n  id: string;\n  email: string;\n  tenantId: string;\n  name: string | null;\n  admin: true;\n  picture: string | null;\n  role: AdminRole;\n}\n\nexport interface EndUserClaims extends JwtPayload {\n  id: string;\n  email: string;\n  tenantId: string;\n  endUser: true;\n}\n\nexport const generateAdminToken = async (admin: Admin): Promise<string> => {\n  const payload: AdminClaims = {\n    id: admin.id,\n    email: admin.email,\n    tenantId: admin.tenantId,\n    picture: admin.picture,\n    name: admin.name,\n    admin: true,\n    role: admin.role,\n  };\n\n  const options: SignOptions = {\n    expiresIn: JWT_EXPIRES_IN as SignOptions[\"expiresIn\"],\n    subject: admin.email,\n  };\n\n  return jwt.sign(payload, await JWT_SECRET, options);\n};\n\nexport const generateEndUserToken = async (user: EndUser, jti: string): Promise<string> => {\n  const payload: EndUserClaims = {\n    id: user.id,\n    email: user.email,\n    tenantId: user.tenantId,\n    endUser: true,\n    jti,\n  };\n\n  const options: SignOptions = {\n    subject: user.email,\n  };\n\n  return jwt.sign(payload, await JWT_SECRET, options);\n};\n\nexport const verifyAdminToken = async (token: string): Promise<AdminClaims | null> => {\n  try {\n    const decoded = jwt.verify(token, await JWT_SECRET) as AdminClaims;\n    if (!decoded.admin) {\n      return null;\n    }\n    return decoded;\n  } catch {\n    return null;\n  }\n};\n\nexport const verifyEndUserToken = async (token: string): Promise<EndUserClaims | null> => {\n  try {\n    const decoded = jwt.verify(token, await JWT_SECRET, { ignoreExpiration: true }) as EndUserClaims;\n    if (!decoded.endUser) {\n      return null;\n    }\n    return decoded;\n  } catch {\n    return null;\n  }\n};\n\nexport async function generateAdminVerificationToken(id: string): Promise<string> {\n  const payload: AdminVerificationPayload = {\n    id,\n    action: \"verify\",\n  };\n\n  const options: SignOptions = {\n    expiresIn: VERIFICATION_TOKEN_EXPIRES_IN as SignOptions[\"expiresIn\"],\n    audience: id,\n  };\n\n  return jwt.sign(payload, await JWT_SECRET, options);\n}\n\nexport async function verifyAdminVerificationToken(token: string): Promise<{ id: string } | null> {\n  try {\n    const decoded = jwt.verify(token, await JWT_SECRET) as AdminVerificationPayload;\n    if (decoded.action !== \"verify\") {\n      return null;\n    }\n    return { id: decoded.id };\n  } catch {\n    return null;\n  }\n}\n", "import { Parameter } from \"@agentbridge/api\";\nimport { OpenAPIV3 } from \"openapi-types\";\n\nexport interface HttpRequestOverrides {\n  query?: Record<string, string>;\n  headers?: Record<string, string>;\n  path?: Record<string, string>;\n  body?: Record<string, unknown> | string;\n  bodyFormat?: string;\n}\n\n/**\n * Generates HTTP request overrides from OpenAPI operation and path item\n */\nexport function generateRequestOverridesFromOperation(\n  operation: OpenAPIV3.OperationObject,\n  pathItem: OpenAPIV3.PathItemObject,\n): HttpRequestOverrides {\n  const overrides: HttpRequestOverrides = {};\n  const queryParams: Record<string, string> = {};\n  const headerParams: Record<string, string> = {};\n  const pathParams: Record<string, string> = {};\n\n  // Combine path-level and operation-level parameters\n  const allParameters = [...(pathItem.parameters || []), ...(operation.parameters || [])];\n\n  // Process parameters\n  allParameters.forEach((param) => {\n    if (typeof param === \"object\" && \"name\" in param) {\n      const parameter = param as OpenAPIV3.ParameterObject;\n      const template = `{{toolParams.${parameter.name}}}`;\n\n      switch (parameter.in) {\n        case \"query\":\n          queryParams[parameter.name] = template;\n          break;\n        case \"header\":\n          headerParams[parameter.name] = template;\n          break;\n        case \"path\":\n          pathParams[parameter.name] = template;\n          break;\n      }\n    }\n  });\n\n  // Process request body\n  if (operation.requestBody && typeof operation.requestBody === \"object\" && \"content\" in operation.requestBody) {\n    const requestBody = operation.requestBody as OpenAPIV3.RequestBodyObject;\n    const jsonContent = requestBody.content?.[\"application/json\"];\n\n    if (jsonContent?.schema) {\n      const schema = jsonContent.schema as OpenAPIV3.SchemaObject;\n\n      if (schema.properties) {\n        const bodyStructure: Record<string, string> = {};\n        Object.keys(schema.properties).forEach((propName) => {\n          bodyStructure[propName] = `{{toolParams.body.${propName}}}`;\n        });\n        overrides.body = bodyStructure;\n        overrides.bodyFormat = \"json\";\n      } else {\n        // Simple body without properties\n        overrides.body = \"{{toolParams.body}}\";\n        overrides.bodyFormat = \"json\";\n      }\n    }\n  }\n\n  // Only add sections that have parameters\n  if (Object.keys(queryParams).length > 0) {\n    overrides.query = queryParams;\n  }\n\n  if (Object.keys(headerParams).length > 0) {\n    overrides.headers = headerParams;\n  }\n\n  if (Object.keys(pathParams).length > 0) {\n    overrides.path = pathParams;\n  }\n\n  return overrides;\n}\n\n/**\n * Generates HTTP request overrides from tool parameters (for consistency with frontend)\n */\nexport function generateRequestOverrides(parameters: Record<string, Parameter>): HttpRequestOverrides {\n  const overrides: HttpRequestOverrides = {};\n  const queryParams: Record<string, string> = {};\n  const headerParams: Record<string, string> = {};\n  const pathParams: Record<string, string> = {};\n  let hasBodyParam = false;\n  const bodyStructure: Record<string, string> = {};\n\n  for (const [name, param] of Object.entries(parameters)) {\n    const template = `{{toolParams.${name}}}`;\n\n    switch (param.in) {\n      case \"query\":\n      case undefined: // Default to query for backward compatibility\n        queryParams[name] = template;\n        break;\n\n      case \"header\":\n        headerParams[name] = template;\n        break;\n\n      case \"path\":\n        pathParams[name] = template;\n        break;\n\n      case \"body\":\n        hasBodyParam = true;\n        if (param.schema?.properties) {\n          // Generate body structure from schema\n          Object.keys(param.schema.properties).forEach((propName) => {\n            bodyStructure[propName] = `{{toolParams.${name}.${propName}}}`;\n          });\n        } else {\n          // Simple body parameter - create proper JSON object structure\n          bodyStructure[name] = `{{toolParams.${name}}}`;\n        }\n        break;\n    }\n  }\n\n  // Only add sections that have parameters\n  if (Object.keys(queryParams).length > 0) {\n    overrides.query = queryParams;\n  }\n\n  if (Object.keys(headerParams).length > 0) {\n    overrides.headers = headerParams;\n  }\n\n  if (Object.keys(pathParams).length > 0) {\n    overrides.path = pathParams;\n  }\n\n  if (hasBodyParam) {\n    overrides.body = bodyStructure;\n    overrides.bodyFormat = \"json\";\n  }\n\n  return overrides;\n}\n", "type IconName = \"google\" | \"oauthGeneric\";\n\nexport const getIcon = (name: IconName) => {\n  switch (name) {\n    case \"google\":\n      return `<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" style=\"display: block;\"><path fill=\"#EA4335\" d=\"M24 9.5c3.54 0 6.71 1.22 9.21 3.6l6.85-6.85C35.9 2.38 30.47 0 24 0 14.62 0 6.51 5.38 2.56 13.22l7.98 6.19C12.43 13.72 17.74 9.5 24 9.5z\"></path><path fill=\"#4285F4\" d=\"M46.98 24.55c0-1.57-.15-3.09-.38-4.55H24v9.02h12.94c-.58 2.96-2.26 5.48-4.78 7.18l7.73 6c4.51-4.18 7.09-10.36 7.09-17.65z\"></path><path fill=\"#FBBC05\" d=\"M10.53 28.59c-.48-1.45-.76-2.99-.76-4.59s.27-3.14.76-4.59l-7.98-6.19C.92 16.46 0 20.12 0 24c0 3.88.92 7.54 2.56 10.78l7.97-6.19z\"></path><path fill=\"#34A853\" d=\"M24 48c6.48 0 11.93-2.13 15.89-5.81l-7.73-6c-2.15 1.45-4.92 2.3-8.16 2.3-6.26 0-11.57-4.22-13.47-9.91l-7.98 6.19C6.51 42.62 14.62 48 24 48z\"></path><path fill=\"none\" d=\"M0 0h48v48H0z\"></path></svg>`;\n    case \"oauthGeneric\":\n      return `<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"800px\" height=\"800px\" viewBox=\"0 0 256 256\" version=\"1.1\" preserveAspectRatio=\"xMidYMid\">\n\t<g>\n\t\t<path d=\"M118.922624,0.37140771 C175.483691,-3.5505123 212.986837,24.1282078 234.430251,57.8515157 C245.182251,74.7603157 255.731584,100.441382 255.780224,126.827729 C255.832277,155.497169 246.544597,180.324476 234.430251,198.541009 C221.979264,217.264422 205.875157,232.728956 185.709184,242.883196 C151.999957,259.857276 104.889984,260.321489 74.033024,243.978022 C39.6684361,225.777276 13.2466761,199.798822 3.41456926,154.746662 C-0.520150741,136.717436 -0.972417408,113.421862 4.50939593,93.4346624 C5.79579605,88.7460224 8.13350272,83.8116224 9.98395605,79.2014891 C18.8765427,57.0472491 34.0125427,37.7823945 52.6834773,24.4580211 C60.185984,19.1042078 69.2876373,13.7794078 77.3179307,10.2248478 C87.3096107,5.80244779 104.132224,1.3966877 118.922624,0.37140771 L118.922624,0.37140771 Z\" fill=\"#FFFFFF\">\n</path>\n\t\t<path d=\"M226.211797,130.015782 C226.211797,183.471996 182.876971,226.803836 129.421611,226.803836 C75.9662507,226.803836 32.6322761,183.471996 32.6322761,130.015782 C32.6322761,76.5608491 75.9662507,33.2255945 129.421611,33.2255945 C182.876544,33.2255945 226.211797,76.5608491 226.211797,130.015782 L226.211797,130.015782 Z\" fill=\"#000000\">\n</path>\n\t\t<path d=\"M118.922624,0.37140771 C175.483691,-3.5505123 212.986837,24.1282078 234.430251,57.8515157 C245.182251,74.7603157 255.731584,100.441382 255.780224,126.827729 C255.832277,155.497169 246.544597,180.324476 234.430251,198.541009 C221.979264,217.264422 205.875157,232.728956 185.709184,242.883196 C151.999957,259.857276 104.889984,260.321489 74.033024,243.978022 C39.6684361,225.777276 13.2466761,199.798822 3.41456926,154.746662 C-0.520150741,136.717436 -0.972417408,113.421862 4.50939593,93.4346624 C5.79579605,88.7460224 8.13350272,83.8116224 9.98395605,79.2014891 C18.8765427,57.0472491 34.0125427,37.7823945 52.6834773,24.4580211 C60.185984,19.1042078 69.2876373,13.7794078 77.3179307,10.2248478 C87.3096107,5.80244779 104.132224,1.3966877 118.922624,0.37140771 L118.922624,0.37140771 Z M99.762304,9.67786112 C78.753664,15.1246878 63.3497173,24.8829811 49.9464107,35.4071411 C30.6188361,50.5828224 18.2975561,71.7604224 11.0787827,97.2665557 C3.04763593,125.643302 8.20646272,159.982289 19.2904094,181.570769 C30.7843827,203.958822 46.217344,221.337382 68.0114773,233.576742 C89.2146773,245.484156 119.036971,253.130022 150.126464,247.262502 C177.748864,242.049489 198.727637,230.016209 215.818197,212.226769 C238.684117,188.425169 257.061931,144.585596 244.832384,98.3613824 C241.563264,86.0072491 237.289344,73.1313024 230.598784,62.2308224 C226.984064,56.3419691 221.679744,50.5486891 216.365611,44.7131691 C196.309717,22.6882078 163.894571,3.70879437 122.207104,6.39295445 C114.273664,6.90367445 107.301504,7.72287445 99.762304,9.67786112 L99.762304,9.67786112 Z\" fill=\"#000000\">\n</path>\n\t\t<g transform=\"translate(7.680000, 9.386667)\" fill=\"#FFFFFF\">\n\t\t\t<g transform=\"translate(0.000000, 2.986667)\">\n\t\t\t\t<path d=\"M127.896362,234.025436 L239.741909,122.182449 L239.138518,121.579044 L127.292971,233.422031 L127.896362,234.025436 L127.896362,234.025436 Z\">\n</path>\n\t\t\t\t<path d=\"M118.118869,225.167835 L230.452096,112.836742 L229.848704,112.233338 L117.515477,224.564432 L118.118869,225.167835 L118.118869,225.167835 Z\">\n</path>\n\t\t\t\t<path d=\"M108.34095,216.311515 L221.16271,103.491461 L220.559317,102.888059 L107.737557,215.708112 L108.34095,216.311515 L108.34095,216.311515 Z\">\n</path>\n\t\t\t\t<path d=\"M98.5630294,207.453915 L211.872896,94.1461817 L211.269504,93.5427783 L97.9596373,206.850512 L98.5630294,207.453915 L98.5630294,207.453915 Z\">\n</path>\n\t\t\t\t<path d=\"M88.7855366,198.596741 L202.58351,84.8004745 L201.980117,84.1970722 L88.1821434,197.993339 L88.7855366,198.596741 L88.7855366,198.596741 Z\">\n</path>\n\t\t\t\t<path d=\"M79.00762,189.741698 L193.293273,75.4551911 L192.689873,74.8517956 L78.40422,189.138302 L79.00762,189.741698 L79.00762,189.741698 Z\">\n</path>\n\t\t\t\t<path d=\"M69.2296967,180.882394 L184.003883,66.1099145 L183.40049,65.5065122 L68.6263033,180.278992 L69.2296967,180.882394 L69.2296967,180.882394 Z\">\n</path>\n\t\t\t\t<path d=\"M59.4517778,172.02522 L174.713644,56.7642067 L174.110249,56.1608067 L58.8483822,171.42182 L59.4517778,172.02522 L59.4517778,172.02522 Z\">\n</path>\n\t\t\t\t<path d=\"M49.6738606,163.168044 L165.421701,47.4189239 L164.818299,46.8155294 L49.0704594,162.564649 L49.6738606,163.168044 L49.6738606,163.168044 Z\">\n</path>\n\t\t\t\t<path d=\"M39.8963639,154.310447 L156.134444,38.0736472 L155.531049,37.4702461 L39.2929694,153.707046 L39.8963639,154.310447 L39.8963639,154.310447 Z\">\n</path>\n\t\t\t\t<path d=\"M30.1184445,145.4537 L146.844631,28.7283667 L146.241236,28.1249667 L29.5150489,144.8503 L30.1184445,145.4537 L30.1184445,145.4537 Z\">\n</path>\n\t\t\t\t<path d=\"M20.3405245,136.596527 L137.555244,19.38266 L136.951849,18.77926 L19.7371289,135.993127 L20.3405245,136.596527 L20.3405245,136.596527 Z\">\n</path>\n\t\t\t\t<path d=\"M10.5626039,127.738927 L128.265431,10.0373805 L127.662036,9.43397947 L9.95920941,127.135526 L10.5626039,127.738927 L10.5626039,127.738927 Z\">\n</path>\n\t\t\t\t<path d=\"M0.784683926,118.881754 L118.975617,0.692100527 L118.372223,0.088699473 L0.181289407,118.278353 L0.784683926,118.881754 L0.784683926,118.881754 Z\">\n</path>\n\t\t\t</g>\n\t\t\t<g>\n\t\t\t\t<path d=\"M0.14330767,122.999079 L114.223734,237.084625 L114.827146,236.481241 L0.746718997,122.395695 L0.14330767,122.999079 L0.14330767,122.999079 Z\">\n</path>\n\t\t\t\t<path d=\"M9.39472045,113.615398 L123.697014,227.923238 L124.300426,227.319855 L9.99813288,113.012015 L9.39472045,113.615398 L9.39472045,113.615398 Z\">\n</path>\n\t\t\t\t<path d=\"M18.6461344,104.231719 L133.170294,218.760999 L133.773706,218.157615 L19.2495456,103.628335 L18.6461344,104.231719 L18.6461344,104.231719 Z\">\n</path>\n\t\t\t\t<path d=\"M27.8975477,94.8480388 L142.644001,209.599612 L143.247412,208.996228 L28.500959,94.2446545 L27.8975477,94.8480388 L27.8975477,94.8480388 Z\">\n</path>\n\t\t\t\t<path d=\"M37.1485349,85.4643594 L152.116855,200.437373 L152.720265,199.833987 L37.7519451,84.8609739 L37.1485349,85.4643594 L37.1485349,85.4643594 Z\">\n</path>\n\t\t\t\t<path d=\"M46.3999494,76.0806805 L161.590989,191.275561 L162.194397,190.672173 L47.0033573,75.4772928 L46.3999494,76.0806805 L46.3999494,76.0806805 Z\">\n</path>\n\t\t\t\t<path d=\"M55.6513628,66.6970005 L171.064269,182.113747 L171.667677,181.510359 L56.2547706,66.0936128 L55.6513628,66.6970005 L55.6513628,66.6970005 Z\">\n</path>\n\t\t\t\t<path d=\"M64.9023505,57.3133217 L180.537551,172.951508 L181.140956,172.348118 L65.5057561,56.7099317 L64.9023505,57.3133217 L64.9023505,57.3133217 Z\">\n</path>\n\t\t\t\t<path d=\"M74.1537644,47.9296422 L190.011258,163.789696 L190.614662,163.186304 L74.7571689,47.3262511 L74.1537644,47.9296422 L74.1537644,47.9296422 Z\">\n</path>\n\t\t\t\t<path d=\"M83.4051783,38.5459628 L199.484112,154.627029 L200.087515,154.023637 L84.0085817,37.9425705 L83.4051783,38.5459628 L83.4051783,38.5459628 Z\">\n</path>\n\t\t\t\t<path d=\"M92.6565911,29.1622822 L208.957818,145.466069 L209.561222,144.862678 L93.2599955,28.5588911 L92.6565911,29.1622822 L92.6565911,29.1622822 Z\">\n</path>\n\t\t\t\t<path d=\"M101.907579,19.7786034 L218.431099,136.30383 L219.034501,135.700437 L102.510981,19.17521 L101.907579,19.7786034 L101.907579,19.7786034 Z\">\n</path>\n\t\t\t\t<path d=\"M111.158992,10.39535 L227.904379,127.142443 L228.507781,126.53905 L111.762394,9.79195665 L111.158992,10.39535 L111.158992,10.39535 Z\">\n</path>\n\t\t\t\t<path d=\"M120.410833,1.01167058 L237.378086,117.980204 L237.981487,117.376809 L121.014234,0.408276091 L120.410833,1.01167058 L120.410833,1.01167058 Z\">\n</path>\n\t\t\t</g>\n\t\t</g>\n\t\t<path d=\"M209.796224,45.2605824 C199.729877,35.1942345 187.353984,26.1233011 172.570837,20.6261278 C157.247531,14.9279945 139.913771,10.1250078 119.470037,11.8670878 C86.9042773,14.6429811 64.0392107,29.2541811 46.661504,46.3554091 C34.4895561,58.3332224 25.3337161,73.0109824 19.2899827,90.1497557 C10.4161694,115.314982 10.9546227,145.018236 20.9322227,170.622076 C29.4429427,192.461862 43.3727573,210.077222 63.0843307,223.722876 C81.6148907,236.551462 108.210731,246.500902 138.082091,243.978022 C174.464811,240.905169 201.085397,222.239356 218.554411,200.731089 C223.024171,195.228796 227.468331,189.009276 230.050091,181.571196 C232.579797,176.211836 233.817984,172.568529 234.977237,170.622502 C239.829291,159.750182 242.399957,148.278822 243.188437,135.587196 C245.614037,96.5506091 230.594517,66.0593024 209.796224,45.2605824 L209.796224,45.2605824 Z M199.073664,164.193062 C199.004117,164.341542 198.941824,164.479782 198.869291,164.632956 C197.064491,169.797756 193.955371,174.116476 190.830464,177.937702 C178.613291,192.872742 159.998251,205.834022 134.555264,207.968209 C113.665237,209.719249 95.0664107,202.811089 82.1081173,193.903142 C70.8475307,186.162129 62.287744,176.580049 56.2853973,165.064316 C55.9193173,164.371409 52.4334507,156.340262 52.4232107,155.986982 C47.6680107,141.237542 47.255424,117.520849 52.136064,103.288529 C55.3932373,93.7896491 60.8217173,83.5121024 68.0114773,75.3695957 C77.938304,64.1265024 87.872384,56.9222357 103.594624,51.8299691 C110.773291,49.5046357 117.199744,47.1379157 126.038997,46.9032491 C147.594197,46.3293824 169.544064,56.0074624 181.329451,66.6105557 C192.159957,76.3543424 204.503424,95.3346091 207.606571,113.141969 C210.800171,131.470289 207.391957,149.365116 199.073664,164.193062 L199.073664,164.193062 Z\" fill=\"#000000\">\n</path>\n\t\t<g transform=\"translate(83.626667, 76.373333)\">\n\t\t\t<path d=\"M77.9810133,105.400747 C72.67328,105.400747 68.01536,102.039467 66.38976,97.0363733 L60.4778667,79.02336 L30.9034667,79.02336 L25.41056,96.8721067 C23.7525333,101.97248 19.0592,105.386667 13.72416,105.386667 C12.4433067,105.386667 11.1709867,105.184 9.94261333,104.785493 C3.56565333,102.87104 -0.0546133333,96.0072533 1.89909333,89.49376 L26.8616533,10.4226133 C28.48256,5.39264 33.2544,1.88416 38.4669867,1.88416 L51.7405867,1.88416 C56.9826133,1.88416 61.7540267,5.33290667 63.34336,10.2711467 L89.5957333,89.3128533 C91.6949333,95.7751467 88.21888,102.71232 81.8513067,104.785067 C80.5922133,105.193813 79.2904533,105.400747 77.9810133,105.400747 L77.9810133,105.400747 L77.9810133,105.400747 Z\" fill=\"#FFFFFF\">\n</path>\n\t\t\t<path d=\"M77.9810133,103.69408 C73.2261841,103.69408 69.0608465,100.688308 67.6071126,96.2141657 L61.6940408,78.1975435 L61.4049446,77.3166933 L60.4778667,77.3166933 L30.9034667,77.3166933 L29.958141,77.3166933 L29.6800885,78.2202018 L24.1871818,96.0689485 C22.7072691,100.620899 18.5067226,103.68 13.72416,103.68 C12.5787502,103.68 11.4396612,103.498823 10.3376028,103.141295 C4.61174908,101.421988 1.37421306,95.2722447 3.12512866,89.4348397 L28.0822714,10.3812927 C29.5308212,5.88624847 33.8113885,2.73749333 38.4669867,2.73749333 L51.7405867,2.73749333 C56.4288544,2.73749333 60.7065138,5.82950865 62.1249103,10.2366284 L88.3809821,89.2896459 C90.2599306,95.0739946 87.1485772,101.287946 81.4551086,103.141261 C80.3246516,103.508247 79.1562581,103.69408 77.9810133,103.69408 L77.9810133,103.69408 Z M77.9810133,106.25408 C79.4253475,106.25408 80.8604464,106.025828 82.2465357,105.575854 C89.2922648,103.282357 93.1289211,95.6198406 90.8131148,88.4907346 L64.5581113,9.4410208 C62.8016101,3.98319054 57.536605,0.177493333 51.7405867,0.177493333 L38.4669867,0.177493333 C32.6951659,0.177493333 27.4336011,4.04786331 25.6433485,9.60334848 L0.678475274,88.6817473 C-1.48096359,95.8806734 2.51145487,103.464326 9.57456724,105.584772 C10.9041173,106.016429 12.3097398,106.24 13.72416,106.24 C19.6168848,106.24 24.7994128,102.465759 26.6278552,96.8411577 L32.1268448,78.9731849 L30.9034667,79.8766933 L60.4778667,79.8766933 L59.2616926,78.9958432 L65.1735859,97.0088565 C66.9698962,102.537361 72.1204498,106.25408 77.9810133,106.25408 L77.9810133,106.25408 Z\" fill=\"#000000\">\n</path>\n\t\t</g>\n\t\t<g transform=\"translate(61.440000, 19.200000)\" fill=\"#FFFFFF\">\n\t\t\t<path d=\"M2.13376,33.8577067 L2.10261333,33.8154667 C-1.01034667,29.5492267 -0.0968533333,23.5810133 4.48768,20.2350933 C9.07221333,16.8896 14.9614933,17.8286933 18.0744533,22.0945067 L18.1056,22.1367467 C21.21856,26.4029867 20.3050667,32.3716267 15.7205333,35.71712 C11.136,39.0626133 5.24672,38.1239467 2.13376,33.8577067 L2.13376,33.8577067 Z M13.93408,25.2462933 L13.9029333,25.2040533 C12.3387733,23.06048 9.42634667,22.3232 7.15562667,23.9803733 C4.90581333,25.6221867 4.73088,28.5469867 6.29504,30.6909867 L6.32618667,30.7332267 C7.89077333,32.8768 10.8027733,33.61408 13.0525867,31.9722667 C15.3237333,30.3150933 15.4986667,27.3902933 13.93408,25.2462933 L13.93408,25.2462933 Z\">\n</path>\n\t\t\t<path d=\"M32.1467733,5.89525333 L36.8251733,4.39424 L49.94048,19.6407467 L44.7364267,21.3102933 L42.4571733,18.5924267 L35.70176,20.7598933 L35.4542933,24.2888533 L30.3505067,25.9264 L32.1467733,5.89525333 L32.1467733,5.89525333 Z M39.84384,15.264 L36.2948267,10.9111467 L35.91552,16.5243733 L39.84384,15.264 L39.84384,15.264 Z\">\n</path>\n\t\t\t<path d=\"M58.3658667,10.48192 L58.4068267,0.155306667 L63.5831467,0.175786667 L63.5426133,10.39744 C63.5319467,13.0513067 64.8669867,14.3176533 66.9166933,14.3261867 C68.9664,14.3342933 70.3112533,13.1310933 70.3210667,10.55616 L70.3624533,0.20352 L75.5387733,0.224 L75.49824,10.4192 C75.4747733,16.3575467 72.0750933,18.9457067 66.8458667,18.9248 C61.6170667,18.9034667 58.3432533,16.2363733 58.3658667,10.48192 L58.3658667,10.48192 Z\">\n</path>\n\t\t\t<path d=\"M94.2331733,8.67754667 L88.95616,7.06688 L90.2600533,2.79466667 L105.6896,7.50378667 L104.385707,11.776 L99.1086933,10.16576 L95.04384,23.4845867 L90.1687467,21.9968 L94.2331733,8.67754667 L94.2331733,8.67754667 Z\">\n</path>\n\t\t\t<path d=\"M119.471787,13.4651733 L123.715413,16.28928 L119.901867,22.0202667 L125.348693,25.6452267 L129.162667,19.9138133 L133.406293,22.73792 L123.216213,38.05056 L118.97216,35.2264533 L122.844587,29.4075733 L117.397333,25.7826133 L113.525333,31.6014933 L109.281707,28.7773867 L119.471787,13.4651733 L119.471787,13.4651733 Z\">\n</path>\n\t\t</g>\n\t\t<g transform=\"translate(65.280000, 196.266667)\" fill=\"#FFFFFF\">\n\t\t\t<path d=\"M130.622293,3.79008 L130.65472,3.83146667 C133.92896,7.97568 133.243733,13.9754667 128.790187,17.49376 C124.33664,21.0120533 118.41536,20.2986667 115.14112,16.1544533 L115.108693,16.1130667 C111.834453,11.9684267 112.520107,5.96906667 116.973227,2.45077333 C121.426773,-1.06709333 127.348053,-0.354133333 130.622293,3.79008 L130.622293,3.79008 Z M119.158187,12.8469333 L119.190613,12.88832 C120.83584,14.97088 123.774293,15.5963733 125.980587,13.85344 C128.165973,12.12672 128.229547,9.19722667 126.583893,7.11466667 L126.551467,7.07328 C124.906667,4.99072 121.967787,4.36522667 119.7824,6.09194667 C117.576107,7.83488 117.51296,10.7643733 119.158187,12.8469333 L119.158187,12.8469333 Z\">\n</path>\n\t\t\t<path d=\"M101.84832,32.9309867 L97.24032,34.6363733 L83.4666667,19.98208 L88.5922133,18.0846933 L90.9892267,20.70016 L97.6426667,18.23744 L97.7344,14.7012267 L102.761387,12.8405333 L101.84832,32.9309867 L101.84832,32.9309867 Z M93.7463467,23.9104 L97.48352,28.1024 L97.61536,22.47808 L93.7463467,23.9104 L93.7463467,23.9104 Z\">\n</path>\n\t\t\t<path d=\"M75.4722133,29.4336 L75.9274667,39.7499733 L70.7562667,39.97824 L70.30528,29.7668267 C70.1883733,27.11552 68.7940267,25.91488 66.7464533,26.0053333 C64.69888,26.0957867 63.4133333,27.36256 63.5268267,29.9349333 L63.98336,40.2773333 L58.81216,40.5056 L58.3624533,30.32064 C58.10048,24.3882667 61.37216,21.63968 66.59584,21.40928 C71.8199467,21.1784533 75.2183467,23.6846933 75.4722133,29.4336 L75.4722133,29.4336 Z\">\n</path>\n\t\t\t<path d=\"M39.5396267,32.8068267 L44.8674133,34.24512 L43.70304,38.5578667 L28.1250133,34.3530667 L29.2893867,30.0398933 L34.6171733,31.4781867 L38.2468267,18.03136 L43.1688533,19.36 L39.5396267,32.8068267 L39.5396267,32.8068267 Z\">\n</path>\n\t\t\t<path d=\"M14.3573333,29.0594133 L9.98442667,26.4388267 L13.5236267,20.5333333 L7.91168,17.1694933 L4.37248,23.0749867 L0,20.4544 L9.45664,4.67669333 L13.82912,7.29770667 L10.2357333,13.2932267 L15.8481067,16.6570667 L19.4414933,10.6615467 L23.8139733,13.28256 L14.3573333,29.0594133 L14.3573333,29.0594133 Z\">\n</path>\n\t\t</g>\n\t</g>\n</svg>`;\n    default:\n      return \"\";\n  }\n};\n", "import { compileErrors, validate } from \"@readme/openapi-parser\";\nimport { OpenAPIV2, OpenAPIV3, OpenAPIV3_1 } from \"openapi-types\";\n\nexport type OpenApi3Document = OpenAPIV3.Document | OpenAPIV3_1.Document;\nexport type OpenApiDocument = OpenAPIV2.Document | OpenApi3Document;\n\nexport interface OpenApiValidationError {\n  error: \"invalid_openapi\";\n  errorDescription: string;\n}\n\nexport const validateOpenApiContent = async (content: unknown): Promise<OpenApiValidationError | null> => {\n  if (!content || typeof content !== \"object\") {\n    return {\n      error: \"invalid_openapi\",\n      errorDescription: \"OpenAPI content is empty\",\n    };\n  }\n  if (!(\"info\" in content) || !content.info || typeof content.info !== \"object\" || !(\"title\" in content.info)) {\n    return {\n      error: \"invalid_openapi\",\n      errorDescription: \"OpenAPI info section is required and must include a title\",\n    };\n  }\n\n  // Servers are optional, but if they exist, they must have a url property\n  if (\"servers\" in content) {\n    if (!Array.isArray(content.servers)) {\n      return {\n        error: \"invalid_openapi\",\n        errorDescription: \"Servers must be an array in the OpenAPI specification\",\n      };\n    }\n    const hasValidServer = content.servers.some(\n      (server) => server && typeof server === \"object\" && \"url\" in server && typeof server.url === \"string\",\n    );\n\n    if (!hasValidServer) {\n      return {\n        error: \"invalid_openapi\",\n        errorDescription: \"At least one server must have a valid URL in the OpenAPI specification\",\n      };\n    }\n  }\n\n  try {\n    const result = await validate(content as OpenApiDocument);\n    if (result.valid === true) {\n      return null;\n    }\n    return {\n      error: \"invalid_openapi\",\n      errorDescription: compileErrors(result),\n    };\n  } catch (error) {\n    return {\n      error: \"invalid_openapi\",\n      errorDescription: error instanceof Error ? error.message : \"Invalid OpenAPI specification\",\n    };\n  }\n};\n\nexport const getServerUrlFromOpenApi = (openApiContent: OpenApi3Document): string => {\n  if (!openApiContent.servers?.length) {\n    return \"\";\n  }\n\n  const firstServer = openApiContent.servers[0];\n  if (!firstServer?.url || typeof firstServer.url !== \"string\") {\n    return \"\";\n  }\n\n  return firstServer.url;\n};\n", "import snakeCase from \"lodash/snakeCase.js\";\nimport { OpenAPIV3 } from \"openapi-types\";\n\nexport const TOOL_NAME_MAX_LENGTH = process.env.TOOL_NAME_MAX_LENGTH ? parseInt(process.env.TOOL_NAME_MAX_LENGTH) : 60;\n\nexport const getToolName = (operation: OpenAPIV3.OperationObject, method: string, path: string): string => {\n  if (operation.operationId) {\n    return snakeCase(operation.operationId);\n  }\n  if (operation.summary) {\n    return snakeCase(operation.summary);\n  }\n  return snakeCase(`${method}_${path}`).slice(0, TOOL_NAME_MAX_LENGTH);\n};\n", "import {\n  CreateServerRequest,\n  CreateToolRequest,\n  Folder,\n  FormattingConfig,\n  type HttpMethod,\n  McpServer,\n  Parameter,\n  ParameterLocation,\n  RequestParamConfig,\n  Response,\n  ServerAuthType,\n  Tool,\n  UpdateServerRequest,\n  UpdateToolRequest,\n} from \"@agentbridge/api\";\nimport {\n  ApiKeyProvider as PrismaApiKeyProvider,\n  OAuthProvider as PrismaOAuthProvider,\n  McpServer as PrismaServer,\n  Tool as PrismaTool,\n} from \"@prisma/client\";\nimport { PrismaClient } from \"@prisma/client/extension\";\nimport groupBy from \"lodash/groupBy.js\";\nimport omit from \"lodash/omit.js\";\nimport snakeCase from \"lodash/snakeCase.js\";\nimport { OpenAPIV3 } from \"openapi-types\";\nimport { PaginatedList } from \"../types/data.types.js\";\nimport { DEFAULT_PAGE_SIZE } from \"../utils/config.js\";\nimport { Database } from \"../utils/connection.js\";\nimport { generateRequestOverridesFromOperation } from \"../utils/generateRequestOverrides.js\";\nimport { getIcon } from \"../utils/icons.js\";\nimport { getServerUrlFromOpenApi, OpenApi3Document } from \"../utils/openapi.js\";\nimport { getToolName, TOOL_NAME_MAX_LENGTH } from \"../utils/tools.js\";\n\nconst mapServer = (server: PrismaServer & { _count?: { tools: number } }): McpServer => ({\n  ...server,\n  description: server.description || undefined,\n  toolCount: server._count?.tools,\n  authType: server.authType as ServerAuthType,\n  authConfigId: server.authConfigId || undefined,\n  createdAt: server.createdAt.toISOString(),\n  updatedAt: server.updatedAt.toISOString(),\n});\n\ntype ServerWithAuthConfig = PrismaServer & {\n  _count?: { tools: number };\n  authConfig?: {\n    id: string;\n    serverId: string;\n    authType: string;\n    createdAt: Date;\n    updatedAt: Date;\n    jwtProvider?: {\n      id: string;\n      name: string;\n      jwksUrl: string;\n      enabled: boolean;\n    } | null;\n  } | null;\n};\n\nconst mapServerWithAuth = (server: ServerWithAuthConfig) => ({\n  ...mapServer(server),\n  authConfig: server.authConfig\n    ? {\n        id: server.authConfig.id,\n        serverId: server.authConfig.serverId,\n        authType: server.authConfig.authType as ServerAuthType,\n        createdAt: server.authConfig.createdAt.toISOString(),\n        updatedAt: server.authConfig.updatedAt.toISOString(),\n        jwtProvider: server.authConfig.jwtProvider\n          ? {\n              id: server.authConfig.jwtProvider.id,\n              name: server.authConfig.jwtProvider.name,\n              jwksUrl: server.authConfig.jwtProvider.jwksUrl,\n              enabled: server.authConfig.jwtProvider.enabled,\n            }\n          : undefined,\n      }\n    : undefined,\n});\n\nconst mapTool = (tool: PrismaTool, adminAuthorized = false): Tool => ({\n  ...tool,\n  folderId: tool.folderId || undefined,\n  parameters: (tool.parameters as Record<string, Parameter>) || {},\n  method: tool.method as HttpMethod,\n  oAuthProviderId: tool.oAuthProviderId || undefined,\n  apiKeyProviderId: tool.apiKeyProviderId || undefined,\n  responseFormatting: tool.responseFormatting as FormattingConfig | undefined,\n  requestParameterOverrides: tool.requestParameterOverrides as Record<string, RequestParamConfig> | null,\n  responses: tool.responses as Record<string, Response> | undefined,\n  adminAuthorized,\n  enabled: tool.enabled,\n  createdAt: tool.createdAt.toISOString(),\n  updatedAt: tool.updatedAt.toISOString(),\n});\n\nasync function createAuthProviderFromOpenApi(\n  tx: PrismaClient,\n  serverName: string,\n  openApiContent: OpenApi3Document,\n  tenantId: string,\n): Promise<{ provider: PrismaOAuthProvider | PrismaApiKeyProvider; specName: string }[]> {\n  const providers: { provider: PrismaOAuthProvider | PrismaApiKeyProvider; specName: string }[] = [];\n\n  for (const [name, oauthScheme] of Object.entries(openApiContent?.components?.securitySchemes || {})) {\n    if (\"type\" in oauthScheme && oauthScheme.type === \"oauth2\") {\n      if (!oauthScheme.flows?.authorizationCode?.authorizationUrl || !oauthScheme.flows?.authorizationCode?.tokenUrl) {\n        throw new Error(\"Missing required OAuth URLs in security scheme\");\n      }\n      providers.push({\n        specName: name,\n        provider: await tx.oAuthProvider.create({\n          data: {\n            name: serverName + \" OAuth\",\n            clientId: \"\",\n            clientSecret: \"\",\n            authorizationUrl: oauthScheme.flows.authorizationCode.authorizationUrl,\n            tokenUrl: oauthScheme.flows.authorizationCode.tokenUrl,\n            scopes: oauthScheme.flows.authorizationCode.scopes\n              ? Object.keys(oauthScheme.flows.authorizationCode.scopes)\n              : [],\n            tenantId,\n            svg: getIcon(\"oauthGeneric\"),\n            refreshUrl: oauthScheme.flows.authorizationCode.refreshUrl,\n          },\n        }),\n      });\n    }\n  }\n\n  for (const [name, apiKeyScheme] of Object.entries(openApiContent?.components?.securitySchemes || {})) {\n    if (\"type\" in apiKeyScheme && apiKeyScheme.type === \"apiKey\") {\n      providers.push({\n        specName: name,\n        provider: await tx.apiKeyProvider.create({\n          data: {\n            value: serverName + \" API Key\",\n            keyName: apiKeyScheme.name,\n            keyIn: apiKeyScheme.in,\n            tenantId,\n          },\n        }),\n      });\n    }\n  }\n\n  return providers;\n}\n\nexport async function createServer(db: Database, tenantId: string, server: CreateServerRequest) {\n  return await db.mcpServer.create({\n    data: { ...server, tenantId },\n  });\n}\n\nexport async function getServersForTenant(db: Database, tenantId: string): Promise<PaginatedList<McpServer>> {\n  const servers = await db.mcpServer.findMany({\n    where: {\n      tenantId: tenantId,\n    },\n    include: {\n      _count: {\n        select: {\n          tools: true,\n        },\n      },\n    },\n    orderBy: [\n      {\n        name: \"asc\",\n      },\n      {\n        id: \"asc\",\n      },\n    ],\n  });\n\n  return {\n    data: servers.map(mapServer),\n    pagination: {\n      currentPage: 1,\n      itemsPerPage: DEFAULT_PAGE_SIZE,\n      totalItems: servers.length,\n      totalPages: Math.ceil(servers.length / DEFAULT_PAGE_SIZE),\n    },\n  };\n}\n\nexport async function getServerById(db: Database, tenantId: string, serverId: string) {\n  const server = await db.mcpServer.findUnique({\n    where: {\n      id: serverId,\n      tenantId,\n    },\n    include: {\n      authConfig: {\n        include: {\n          jwtProvider: true,\n        },\n      },\n    },\n  });\n  return server ? mapServerWithAuth(server) : null;\n}\n\nexport async function updateServerById(\n  db: Database,\n  tenantId: string,\n  serverId: string,\n  updateData: UpdateServerRequest,\n) {\n  return mapServer(\n    await db.mcpServer.update({\n      where: {\n        id: serverId,\n        tenantId,\n      },\n      data: updateData,\n    }),\n  );\n}\n\nexport async function deleteServerById(db: Database, tenantId: string, serverId: string) {\n  return mapServer(\n    await db.mcpServer.delete({\n      where: {\n        id: serverId,\n        tenantId,\n      },\n    }),\n  );\n}\n\nexport async function getServerSlim(db: Database, tenantId: string, serverId: string) {\n  return await db.mcpServer.findUnique({\n    where: {\n      id: serverId,\n      tenantId,\n    },\n    select: {\n      id: true,\n      tenantId: true,\n    },\n  });\n}\n\nexport async function createToolsFromOpenApiSpec(\n  db: Database,\n  tenantId: string,\n  serverId: string,\n  openApiContent: OpenApi3Document,\n  selectedTools?: string[],\n) {\n  return await db.$transaction(async (tx: PrismaClient) => {\n    const foldersByName: Record<string, Folder> = {};\n    const createdTools: Tool[] = [];\n\n    // Get existing folders for this server\n    const existingFolders = await tx.folder.findMany({\n      where: { serverId, tenantId },\n    });\n    existingFolders.forEach((folder: Folder) => {\n      foldersByName[folder.name] = folder;\n    });\n\n    // Create auth providers\n    const providers = await createAuthProviderFromOpenApi(tx, `Server ${serverId}`, openApiContent, tenantId);\n    const oauthProvidersByName = groupBy(\n      providers.filter((p) => \"authorizationUrl\" in p.provider),\n      \"specName\",\n    );\n    const apiKeyProvidersByName = groupBy(\n      providers.filter((p) => \"keyIn\" in p.provider),\n      \"specName\",\n    );\n\n    if (openApiContent.paths) {\n      for (const [path, pathItem] of Object.entries(openApiContent.paths)) {\n        if (typeof pathItem === \"object\" && pathItem !== null) {\n          for (const [method, operation] of Object.entries(pathItem)) {\n            if (\n              typeof operation === \"object\" &&\n              operation !== null &&\n              (\"operationId\" in operation || \"responses\" in operation)\n            ) {\n              const parameters =\n                operation.parameters?.reduce(\n                  (acc, param) => {\n                    if (typeof param === \"object\" && param !== null && \"name\" in param) {\n                      acc[param.name] = param;\n                    }\n                    return acc;\n                  },\n                  {} as Record<string, OpenAPIV3.ParameterObject>,\n                ) || {};\n\n              if (operation.requestBody) {\n                const requestBody = operation.requestBody;\n                if (typeof requestBody === \"object\" && \"content\" in requestBody) {\n                  const jsonContent = requestBody.content?.[\"application/json\"];\n                  if (jsonContent?.schema) {\n                    parameters[\"body\"] = {\n                      in: \"body\",\n                      name: \"body\",\n                      schema: jsonContent.schema,\n                      required: requestBody.required ?? true,\n                    };\n                  }\n                }\n              }\n\n              let folderId: string | null = null;\n              const tags = operation.tags || [];\n              if (tags.length > 0) {\n                const tag = tags[0];\n                if (!foldersByName[tag]) {\n                  foldersByName[tag] = await tx.folder.create({\n                    data: {\n                      name: tag,\n                      tenantId,\n                      serverId,\n                    },\n                  });\n                }\n                folderId = foldersByName[tag].id;\n              }\n\n              let apiKeyProviderId: string | null = null;\n              let oAuthProviderId: string | null = null;\n              const securitySpecNames = operation.security?.flatMap((sec) => Object.keys(sec)) || [];\n              for (const security of securitySpecNames) {\n                if (apiKeyProvidersByName[security]) {\n                  apiKeyProviderId = apiKeyProvidersByName[security][0].provider.id;\n                }\n                if (oauthProvidersByName[security]) {\n                  oAuthProviderId = oauthProvidersByName[security][0].provider.id;\n                }\n              }\n\n              const toolName = getToolName(operation, method, path);\n              const isSelected = selectedTools\n                ? selectedTools.some((selectedTool) => selectedTool.toLowerCase() === toolName.toLowerCase())\n                : true;\n\n              if (isSelected) {\n                const createdTool = await tx.tool.create({\n                  data: {\n                    name: toolName,\n                    description: operation.summary || operation.description || \"\",\n                    enabled: true,\n                    parameters,\n                    responses: operation.responses || {},\n                    method: method.toUpperCase() as HttpMethod,\n                    url: path,\n                    responseFormatting: {},\n                    requestParameterOverrides: generateRequestOverridesFromOperation(operation, pathItem),\n                    tenantId,\n                    serverId,\n                    folderId,\n                    apiKeyProviderId,\n                    oAuthProviderId,\n                  },\n                });\n                createdTools.push(mapTool(createdTool));\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return {\n      tools: createdTools,\n      authProviders: providers.map((p) => p.provider),\n    };\n  });\n}\n\nexport async function createServerFromOpenApiSpec(\n  db: Database,\n  tenantId: string,\n  name: string | null,\n  description: string | null,\n  openApiContent: OpenApi3Document,\n  selectedTools?: string[],\n) {\n  return await db.$transaction(async (tx: PrismaClient) => {\n    const foldersByName: Record<string, Folder> = {};\n\n    const server = await tx.mcpServer.create({\n      data: {\n        name: name || openApiContent.info.title,\n        description: description || openApiContent.info.description || \"\",\n        enabled: true,\n        tenantId: tenantId,\n        baseUrl: getServerUrlFromOpenApi(openApiContent),\n      },\n    });\n\n    const providers = await createAuthProviderFromOpenApi(tx, server.name, openApiContent, tenantId);\n    const oauthProvidersByName = groupBy(\n      providers.filter((p) => \"authorizationUrl\" in p.provider),\n      \"specName\",\n    );\n    const apiKeyProvidersByName = groupBy(\n      providers.filter((p) => \"keyIn\" in p.provider),\n      \"specName\",\n    );\n\n    if (openApiContent.paths) {\n      for (const [path, pathItem] of Object.entries(openApiContent.paths)) {\n        if (typeof pathItem === \"object\" && pathItem !== null) {\n          for (const [method, operation] of Object.entries(pathItem)) {\n            if (\n              typeof operation === \"object\" &&\n              operation !== null &&\n              (\"operationId\" in operation || \"responses\" in operation)\n            ) {\n              const parameters =\n                operation.parameters?.reduce(\n                  (acc, param) => {\n                    if (typeof param === \"object\" && param !== null && \"name\" in param) {\n                      acc[param.name] = param;\n                    }\n                    return acc;\n                  },\n                  {} as Record<string, OpenAPIV3.ParameterObject>,\n                ) || {};\n\n              if (operation.requestBody) {\n                const requestBody = operation.requestBody;\n                if (typeof requestBody === \"object\" && \"content\" in requestBody) {\n                  const jsonContent = requestBody.content?.[\"application/json\"];\n                  if (jsonContent?.schema) {\n                    parameters[\"body\"] = {\n                      in: \"body\",\n                      name: \"body\",\n                      schema: jsonContent.schema,\n                      required: requestBody.required ?? true,\n                    };\n                  }\n                }\n              }\n\n              let folderId: string | null = null;\n              const tags = operation.tags || [];\n              if (tags.length > 0) {\n                const tag = tags[0];\n                if (!foldersByName[tag]) {\n                  foldersByName[tag] = await tx.folder.create({\n                    data: {\n                      name: tag,\n                      tenantId,\n                      serverId: server.id,\n                    },\n                  });\n                }\n                folderId = foldersByName[tag].id;\n              }\n              let apiKeyProviderId: string | null = null;\n              let oAuthProviderId: string | null = null;\n              const securitySpecNames = operation.security?.flatMap((sec) => Object.keys(sec)) || [];\n              for (const security of securitySpecNames) {\n                if (apiKeyProvidersByName[security]) {\n                  apiKeyProviderId = apiKeyProvidersByName[security][0].provider.id;\n                }\n                if (oauthProvidersByName[security]) {\n                  oAuthProviderId = oauthProvidersByName[security][0].provider.id;\n                }\n              }\n              const toolName = getToolName(operation, method, path);\n              const isSelected = selectedTools\n                ? selectedTools.some((selectedTool) => selectedTool.toLowerCase() === toolName.toLowerCase())\n                : true;\n\n              await tx.tool.create({\n                data: {\n                  name: toolName,\n                  description: operation.summary || operation.description || \"\",\n                  enabled: isSelected,\n                  parameters,\n                  responses: operation.responses || {},\n                  method: method.toUpperCase() as HttpMethod,\n                  url: path,\n                  responseFormatting: {},\n                  requestParameterOverrides: generateRequestOverridesFromOperation(operation, pathItem),\n                  tenantId,\n                  serverId: server.id,\n                  folderId,\n                  apiKeyProviderId,\n                  oAuthProviderId,\n                },\n              });\n            }\n          }\n        }\n      }\n    }\n\n    return {\n      ...server,\n      oauthProviders: Object.values(oauthProvidersByName).map((providers) => providers[0].provider),\n    };\n  });\n}\n\nconst TODOS_OPENAPI_SPEC = {\n  openapi: \"3.0.0\",\n  info: {\n    title: \"Todos API\",\n    description: \"A REST API for testing and prototyping applications that need to interact with a TODO list.\",\n    version: \"1.0.0\",\n    contact: {\n      name: \"Todos API\",\n      url: \"https://jsonplaceholder.typicode.com\",\n    },\n  },\n  servers: [\n    {\n      url: \"https://jsonplaceholder.typicode.com\",\n      description: \"JSONPlaceholder API Server\",\n    },\n  ],\n  tags: [\n    {\n      name: \"todos\",\n      description: \"Operations related to todo items\",\n    },\n  ],\n  paths: {\n    \"/todos\": {\n      get: {\n        operationId: \"get-all-todos\",\n        tags: [\"todos\"],\n        summary: \"Get all todos\",\n        description: \"Returns a list of all todo items\",\n        parameters: [\n          {\n            name: \"userId\",\n            in: \"query\",\n            description: \"Filter todos by user ID\",\n            required: false,\n            schema: {\n              type: \"integer\",\n              format: \"int64\",\n            },\n          },\n        ],\n        responses: {\n          \"200\": {\n            description: \"A list of todo items\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"array\",\n                  items: {\n                    $ref: \"#/components/schemas/Todo\",\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n      post: {\n        operationId: \"create-a-new-todo\",\n        tags: [\"todos\"],\n        summary: \"Create a new todo\",\n        description: \"Creates a new todo item\",\n        requestBody: {\n          description: \"Todo item to create\",\n          required: true,\n          content: {\n            \"application/json\": {\n              schema: {\n                $ref: \"#/components/schemas/TodoInput\",\n              },\n            },\n          },\n        },\n        responses: {\n          \"201\": {\n            description: \"Todo created successfully\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  $ref: \"#/components/schemas/Todo\",\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n    \"/todos/{id}\": {\n      get: {\n        operationId: \"get-a-todo\",\n        tags: [\"todos\"],\n        summary: \"Get a todo by ID\",\n        description: \"Returns a single todo by ID\",\n        parameters: [\n          {\n            name: \"id\",\n            in: \"path\",\n            description: \"ID of the todo to retrieve\",\n            required: true,\n            schema: {\n              type: \"integer\",\n              format: \"int64\",\n            },\n          },\n        ],\n        responses: {\n          \"200\": {\n            description: \"Todo found\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  $ref: \"#/components/schemas/Todo\",\n                },\n              },\n            },\n          },\n        },\n      },\n      put: {\n        operationId: \"update-a-todo\",\n        tags: [\"todos\"],\n        summary: \"Update a todo completely\",\n        description: \"Replaces all properties of a todo item\",\n        parameters: [\n          {\n            name: \"id\",\n            in: \"path\",\n            description: \"ID of the todo to update\",\n            required: true,\n            schema: {\n              type: \"integer\",\n              format: \"int64\",\n            },\n          },\n        ],\n        requestBody: {\n          description: \"Updated todo object\",\n          required: true,\n          content: {\n            \"application/json\": {\n              schema: {\n                $ref: \"#/components/schemas/TodoUpdate\",\n              },\n            },\n          },\n        },\n        responses: {\n          \"200\": {\n            description: \"Todo updated successfully\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  $ref: \"#/components/schemas/Todo\",\n                },\n              },\n            },\n          },\n        },\n      },\n      delete: {\n        operationId: \"delete-a-todo\",\n        tags: [\"todos\"],\n        summary: \"Delete a todo\",\n        description: \"Deletes a todo item\",\n        parameters: [\n          {\n            name: \"id\",\n            in: \"path\",\n            description: \"ID of the todo to delete\",\n            required: true,\n            schema: {\n              type: \"integer\",\n              format: \"int64\",\n            },\n          },\n        ],\n        responses: {\n          \"200\": {\n            description: \"Todo deleted successfully\",\n          },\n        },\n      },\n    },\n  },\n  components: {\n    schemas: {\n      Todo: {\n        type: \"object\",\n        required: [\"id\", \"userId\", \"title\", \"completed\"],\n        properties: {\n          id: {\n            type: \"integer\",\n            format: \"int64\",\n            description: \"Unique identifier for the todo\",\n            example: 1,\n          },\n          userId: {\n            type: \"integer\",\n            format: \"int64\",\n            description: \"ID of the user who owns this todo\",\n            example: 1,\n          },\n          title: {\n            type: \"string\",\n            description: \"Task description\",\n            example: \"Complete project documentation\",\n          },\n          completed: {\n            type: \"boolean\",\n            description: \"Whether the task is completed\",\n            example: false,\n          },\n        },\n      },\n      TodoInput: {\n        type: \"object\",\n        required: [\"userId\", \"title\"],\n        properties: {\n          userId: {\n            type: \"integer\",\n            format: \"int64\",\n            description: \"ID of the user who owns this todo\",\n            example: 1,\n          },\n          title: {\n            type: \"string\",\n            description: \"Task description\",\n            example: \"Write unit tests\",\n          },\n          completed: {\n            type: \"boolean\",\n            description: \"Whether the task is completed\",\n            example: false,\n            default: false,\n          },\n        },\n      },\n      TodoUpdate: {\n        type: \"object\",\n        required: [\"id\", \"userId\", \"title\", \"completed\"],\n        properties: {\n          id: {\n            type: \"integer\",\n            format: \"int64\",\n            description: \"ID of the todo (must match path parameter)\",\n            example: 1,\n          },\n          userId: {\n            type: \"integer\",\n            format: \"int64\",\n            description: \"ID of the user who owns this todo\",\n            example: 1,\n          },\n          title: {\n            type: \"string\",\n            description: \"Task description\",\n            example: \"Updated task description\",\n          },\n          completed: {\n            type: \"boolean\",\n            description: \"Whether the task is completed\",\n            example: true,\n          },\n        },\n      },\n    },\n  },\n};\n\nexport async function createExampleTodosServer(db: Database, tenantId: string) {\n  try {\n    return await createServerFromOpenApiSpec(\n      db,\n      tenantId,\n      \"Todos API Example\",\n      \"A sample To-Dos API for testing and learning MCP capabilities\",\n      TODOS_OPENAPI_SPEC as OpenApi3Document,\n    );\n  } catch (error) {\n    console.error(\"Error in createExampleTodosServer:\", error);\n    throw error;\n  }\n}\n\nexport async function getToolsForServer(db: Database, tenantId: string, serverId: string, adminEmail: string) {\n  return (\n    await db.tool.findMany({\n      where: {\n        serverId: serverId,\n        tenantId,\n      },\n      include: {\n        oAuthProvider: {\n          include: {\n            providerTokens: {\n              where: {\n                user: {\n                  email: adminEmail,\n                  tenantId,\n                },\n              },\n            },\n          },\n        },\n      },\n      orderBy: [\n        {\n          name: \"asc\",\n        },\n        {\n          id: \"asc\",\n        },\n      ],\n    })\n  ).map((tool) => mapTool(tool, (tool.oAuthProvider?.providerTokens || []).length > 0));\n}\n\nexport async function getToolById(db: Database, tenantId: string, toolId: string, adminEmail: string) {\n  const tool = await db.tool.findUnique({\n    where: {\n      id: toolId,\n      tenantId,\n    },\n    include: {\n      oAuthProvider: {\n        include: {\n          providerTokens: {\n            where: {\n              user: {\n                email: adminEmail,\n                tenantId,\n              },\n            },\n          },\n        },\n      },\n    },\n  });\n  return tool ? mapTool(tool, (tool.oAuthProvider?.providerTokens || []).length > 0) : null;\n}\n\nexport async function createTool(db: Database, serverId: string, tenantId: string, toolData: CreateToolRequest) {\n  return await db.$transaction(async (tx: PrismaClient) => {\n    if (toolData.oAuthProviderId) {\n      const provider = await tx.oAuthProvider.findUnique({\n        where: { id: toolData.oAuthProviderId, tenantId },\n      });\n      if (!provider) {\n        throw new Error(`OAuth provider with ID ${toolData.oAuthProviderId} not found`);\n      }\n    }\n\n    if (toolData.apiKeyProviderId) {\n      const provider = await tx.apiKeyProvider.findUnique({\n        where: { id: toolData.apiKeyProviderId, tenantId },\n      });\n      if (!provider) {\n        throw new Error(`API Key provider with ID ${toolData.apiKeyProviderId} not found`);\n      }\n    }\n\n    // Check if server has JWT authentication enabled\n    const server = await tx.mcpServer.findUnique({\n      where: { id: serverId },\n      select: { authType: true },\n    });\n\n    // Prepare request parameter overrides, automatically adding JWT header if server uses JWT auth\n    let requestParameterOverrides = toolData.requestParameterOverrides || {};\n\n    if (server?.authType === ServerAuthType.JWT) {\n      // Automatically add JWT authorization header for tools on servers with JWT auth\n      requestParameterOverrides = {\n        ...requestParameterOverrides,\n        Authorization: {\n          value: \"Bearer {{toolParams.jwt}}\",\n          location: ParameterLocation.HEADER,\n        },\n      };\n    }\n\n    return await tx.tool.create({\n      data: {\n        name: snakeCase(toolData.name).slice(0, TOOL_NAME_MAX_LENGTH),\n        description: toolData.description,\n        folderId: toolData.folderId,\n        parameters: toolData.parameters || {},\n        method: toolData.method || \"GET\",\n        url: toolData.url || \"\",\n        oAuthProviderId: toolData.oAuthProviderId,\n        apiKeyProviderId: toolData.apiKeyProviderId,\n        responseFormatting: toolData.responseFormatting || {},\n        requestParameterOverrides: requestParameterOverrides || null,\n        tenantId: tenantId,\n        serverId: serverId,\n      },\n    });\n  });\n}\n\nexport async function updateToolById(db: Database, tenantId: string, toolId: string, updateData: UpdateToolRequest) {\n  // Filter out null values for JSON fields to avoid Prisma type issues\n  const { requestParameterOverrides, responseFormatting, parameters, responses, ...rest } = updateData;\n\n  const jsonFields: Record<string, unknown> = {};\n  if (requestParameterOverrides !== null && requestParameterOverrides !== undefined) {\n    jsonFields.requestParameterOverrides = requestParameterOverrides;\n  }\n  if (responseFormatting !== null && responseFormatting !== undefined) {\n    jsonFields.responseFormatting = responseFormatting;\n  }\n  if (parameters !== null && parameters !== undefined) {\n    jsonFields.parameters = parameters;\n  }\n  if (responses !== null && responses !== undefined) {\n    jsonFields.responses = responses;\n  }\n\n  return mapTool(\n    await db.tool.update({\n      where: {\n        id: toolId,\n        tenantId,\n      },\n      data: {\n        ...omit(rest, [\"folderId\", \"providerId\"]),\n        ...jsonFields,\n        ...(updateData.name ? { name: snakeCase(updateData.name).slice(0, TOOL_NAME_MAX_LENGTH) } : {}),\n        ...(\"folderId\" in updateData\n          ? updateData.folderId\n            ? {\n                folder: {\n                  connect: {\n                    id: updateData.folderId,\n                  },\n                },\n              }\n            : {\n                folder: {\n                  disconnect: true,\n                },\n              }\n          : {}),\n        ...(updateData.providerId\n          ? {\n              oAuthProvider: {\n                connect: {\n                  id: updateData.providerId,\n                },\n              },\n            }\n          : {\n              oAuthProvider: {\n                disconnect: true,\n              },\n            }),\n      },\n    }),\n  );\n}\n\nexport async function deleteToolById(db: Database, tenantId: string, toolId: string) {\n  return await db.tool.delete({\n    where: {\n      id: toolId,\n      tenantId,\n    },\n  });\n}\n", "import cors from \"cors\";\nimport express from \"express\";\nimport { StatusCodes } from \"http-status-codes\";\nimport { dbMiddleware } from \"./middlewares/db.middleware.js\";\nimport { errorHandler } from \"./middlewares/error.middleware.js\";\nimport { loggerMiddleware } from \"./middlewares/logger.middleware.js\";\nimport { adminSessionMiddleware } from \"./middlewares/session.middleware.js\";\nimport adminsRouter from \"./routes/admins.routes.js\";\nimport aiRouter from \"./routes/ai.routes.js\";\nimport analyticsRouter from \"./routes/analytics.routes.js\";\nimport foldersRouter from \"./routes/folders.routes.js\";\nimport healthRouter from \"./routes/health.routes.js\";\nimport mcpRouter from \"./routes/mcp.routes.js\";\nimport mirrorRouter from \"./routes/mirror.routes.js\";\nimport oauthRouter from \"./routes/oauth.routes.js\";\nimport ownidRouter from \"./routes/ownid.routes.js\";\nimport providersRouter from \"./routes/providers.routes.js\";\nimport serverAuthRouter from \"./routes/server-auth.routes.js\";\nimport serversRouter from \"./routes/servers.routes.js\";\nimport tenantRouter from \"./routes/tenant.routes.js\";\nimport usersRouter from \"./routes/users.routes.js\";\nimport { disconnectDatabase } from \"./utils/connection.js\";\n// eslint-disable-next-line no-restricted-imports\nimport logger from \"./logger.js\";\nimport { isAppRequest } from \"./utils/req-guards.js\";\n\nconst app = express();\nconst port = process.env.PORT || 3333;\n\nprocess.on(\"SIGINT\", async () => {\n  await disconnectDatabase();\n  process.exit(0);\n});\n\nprocess.on(\"SIGTERM\", async () => {\n  await disconnectDatabase();\n  process.exit(0);\n});\n\nprocess.on(\"uncaughtException\", async (error) => {\n  console.error(\"server uncaught exception\", error);\n  await disconnectDatabase();\n  process.exit(1);\n});\n\nprocess.on(\"unhandledRejection\", async (reason) => {\n  console.error(\"server unhandled rejection:\", reason);\n  await disconnectDatabase();\n  process.exit(1);\n});\n\napp.set(\"trust proxy\", true);\napp.use(cors());\napp.use(loggerMiddleware);\napp.use(dbMiddleware);\napp.use(express.json());\napp.use(express.text());\napp.use(express.urlencoded({ extended: false }));\napp.use(express.raw({ type: \"application/octet-stream\", limit: \"50mb\" }));\n\n// Admin routes\napp.use(\"/api/providers\", adminSessionMiddleware, providersRouter);\napp.use(\"/api/servers\", adminSessionMiddleware, serversRouter);\napp.use(\"/api/servers\", adminSessionMiddleware, serverAuthRouter);\napp.use(\"/api/servers\", adminSessionMiddleware, analyticsRouter);\napp.use(\"/api/servers\", adminSessionMiddleware, foldersRouter);\napp.use(\"/api/users\", adminSessionMiddleware, usersRouter);\napp.use(\"/api/tenant\", adminSessionMiddleware, tenantRouter);\napp.use(\"/api/admins\", adminsRouter);\napp.use(\"/api/ai\", aiRouter);\n\n// MCP routes (server auth middleware is lazy-initialized on first request)\napp.use(mcpRouter);\n\n// OAuth routes\napp.use(oauthRouter);\n\n// Health routes\napp.use(\"/api/health\", healthRouter);\n\n// Mirror routes\napp.use(\"/api/mirror\", mirrorRouter);\n\napp.use(\"/api/ownid\", ownidRouter);\n\napp.use((req, res) => {\n  if (isAppRequest(req)) {\n    req.logger.debug(`404 Not Found: ${req.method} ${req.path}`);\n  }\n  res.status(StatusCodes.NOT_FOUND).json({\n    error: \"Not Found\",\n  });\n});\n\napp.use(errorHandler);\n\ntry {\n  const server = app.listen(port, () => {\n    logger.info(`Server is running on port ${port}`);\n  });\n\n  server.on(\"error\", (err: NodeJS.ErrnoException) => {\n    if (err.code === \"EADDRINUSE\") {\n      logger.error(`Port ${port} is already in use`);\n    } else {\n      logger.error(\"Failed to start server:\", err);\n    }\n    process.exit(1);\n  });\n} catch (e) {\n  logger.error(\"Unexpected error during server startup:\", e);\n  // eslint-disable-next-line promise/catch-or-return\n  disconnectDatabase().finally(() => process.exit(1));\n}\n", "import { Prisma, PrismaClient } from \"@prisma/client\";\nimport { fieldEncryptionExtension } from \"prisma-field-encryption\";\n// eslint-disable-next-line no-restricted-imports\nimport logger from \"../logger.js\";\nimport { getAppSecrets } from \"../services/secrets.service.js\";\nimport { getRequestLogger } from \"./logger-cls.js\";\nimport QueryEvent = Prisma.QueryEvent;\nimport LogEvent = Prisma.LogEvent;\n\nconst prisma = new PrismaClient({\n  log: [\n    {\n      emit: \"event\",\n      level: \"query\",\n    },\n    {\n      emit: \"event\",\n      level: \"error\",\n    },\n    {\n      emit: \"event\",\n      level: \"info\",\n    },\n    {\n      emit: \"event\",\n      level: \"warn\",\n    },\n  ],\n});\n\nconst auditLog = (model: string | undefined, operation: string, args: { data: Record<string, unknown> }) => {\n  if (\n    !model ||\n    (!operation.startsWith(\"create\") && !operation.startsWith(\"update\") && !operation.startsWith(\"delete\"))\n  ) {\n    return;\n  }\n  const id = args[\"data\"]?.[\"id\"];\n  const name = args[\"data\"]?.[\"name\"];\n  const keys = Object.keys(args[\"data\"] || {});\n  getRequestLogger()?.info(\"DB Audit Log\", {\n    model,\n    operation,\n    id,\n    name,\n    keys,\n  });\n};\n\nprisma.$on(\"query\", (e: QueryEvent) => {\n  logger.debug(\"Query:\", {\n    query: e.query,\n    duration: e.duration,\n    timestamp: e.timestamp,\n  });\n});\n\nprisma.$on(\"error\", (e: LogEvent) => {\n  logger.error(\"Database error:\", {\n    error: e.message,\n    timestamp: e.timestamp,\n  });\n});\n\nprisma.$on(\"warn\", (e: LogEvent) => {\n  logger.warn(\"Database warning:\", {\n    warning: e.message,\n    timestamp: e.timestamp,\n  });\n});\n\nprisma.$on(\"info\", (e: LogEvent) => {\n  logger.debug(\"Database info:\", {\n    info: e.message,\n    timestamp: e.timestamp,\n  });\n});\n\nprocess.on(\"SIGINT\", async () => {\n  await prisma.$disconnect();\n  process.exit(0);\n});\n\nexport type Database = typeof prisma;\n\nexport const disconnectDatabase = async (): Promise<void> => {\n  try {\n    await prisma.$disconnect();\n    logger.debug(\"Database connection closed\");\n  } catch (error) {\n    logger.error(\"Error disconnecting from database\", error);\n  }\n};\n\nexport default (async () => {\n  const secrets = await getAppSecrets();\n  return prisma\n    .$extends(\n      fieldEncryptionExtension({\n        encryptionKey: secrets.dbEncryptionKey,\n      }),\n    )\n    .$extends({\n      name: \"auditLog\",\n      query: {\n        $allOperations({ model, operation, args, query }) {\n          const res = query(args);\n          auditLog(model, operation, args);\n          return res;\n        },\n      },\n    }) as Database;\n})();\n", "import { createNamespace } from \"cls-hooked\";\nimport { Logger } from \"winston\";\n\nconst requestLoggerNamespace = createNamespace(\"req-logger\");\nconst requestLoggerKey = \"logger\";\n\nexport const withRequestLogger = (logger: Logger, action: () => unknown) => {\n  requestLoggerNamespace.run(() => {\n    requestLoggerNamespace.set(requestLoggerKey, logger);\n    action();\n  });\n};\n\nexport const getRequestLogger = () => {\n  return requestLoggerNamespace.get(requestLoggerKey) as Logger | null;\n};\n", "import { NextFunction, Request, Response } from \"express\";\nimport prisma, { Database } from \"../utils/connection.js\";\n\nexport const dbMiddleware = async (\n  req: Request & { db?: Database },\n  _res: Response,\n  next: NextFunction,\n): Promise<void> => {\n  req.db = await prisma;\n  next();\n};\n", "import { NextFunction, Request, Response } from \"express\";\nimport { StatusCodes } from \"http-status-codes\";\nimport { isAppRequest } from \"../utils/req-guards.js\";\n\nexport const errorHandler = (err: Error, req: Request, res: Response, next: NextFunction) => {\n  if (isAppRequest(req)) {\n    req.logger.error(\"Error\", err);\n  }\n  res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({\n    error: err.message,\n  });\n};\n", "import { Request } from \"express\";\nimport { Logger } from \"winston\";\nimport { ServerAuthResult } from \"../services/interfaces/auth-strategy.interface.js\";\nimport { AdminClaims, EndUserClaims } from \"../services/jwt.service.js\";\nimport { Database } from \"./connection.js\";\n\ninterface AppContext {\n  logger: Logger;\n  db: Database;\n}\n\nexport type AppRequest = Request &\n  AppContext & {\n    user?: EndUserClaims;\n    admin?: AdminClaims;\n    serverId?: string;\n    serverAuth?: ServerAuthResult;\n  };\nexport type EndUserRequest = AppRequest & { user: EndUserClaims };\nexport type AdminRequest = AppRequest & { admin: AdminClaims };\nexport type WithServerIdRequest = AppRequest & { serverId: string };\n\nexport const isAppRequest = (req: Request): req is AppRequest => \"logger\" in req && \"db\" in req;\n\nexport const isEndUserRequest = (req: Request): req is EndUserRequest => \"user\" in req;\n\nexport const isWithServerIdRequest = (req: Request): req is WithServerIdRequest => \"serverId\" in req;\n\nexport const isEndUserWithServerIdRequest = (req: Request): req is EndUserRequest & WithServerIdRequest =>\n  \"serverId\" in req && \"user\" in req;\n\nexport const isAdminRequest = (req: Request): req is AdminRequest => \"admin\" in req;\n\nexport class TypeGuardError extends Error {\n  constructor() {\n    super(\"Type guard failed\");\n  }\n}\n", "import * as crypto from \"crypto\";\nimport { NextFunction, Request, Response } from \"express\";\nimport { Logger } from \"winston\";\n\n// eslint-disable-next-line no-restricted-imports\nimport { default as logger } from \"../logger.js\";\nimport { withRequestLogger } from \"../utils/logger-cls.js\";\n\nexport const loggerMiddleware = (req: Request & { logger?: Logger }, res: Response, next: NextFunction) => {\n  req.logger = logger.child({\n    request: {\n      id: crypto.randomUUID(),\n      method: req.method,\n      path: req.path,\n      params: Object.keys(req.params || {}),\n      bodyLen: req.headers[\"content-length\"] || null,\n    },\n  });\n  withRequestLogger(req.logger, () => {\n    next();\n  });\n};\n", "import { AdminRole } from \"@prisma/client\";\nimport { NextFunction, Request, Response } from \"express\";\nimport { StatusCodes } from \"http-status-codes\";\nimport { cacheGetOrAdd, CacheItemType } from \"../services/cache.service.js\";\nimport { verifyAdminToken, verifyEndUserToken } from \"../services/jwt.service.js\";\nimport { markTokenAsUsed } from \"../services/oauth.service.js\";\nimport { hashForLogging } from \"../utils/hash.js\";\nimport { AppRequest, isAdminRequest, isAppRequest, TypeGuardError } from \"../utils/req-guards.js\";\n\nconst sessionMiddleware = async <T extends { id: string; email: string; tenantId: string; jti?: string }>(\n  req: Request,\n  res: Response,\n  next: NextFunction,\n  scope: \"user\" | \"admin\",\n  verifier: (token: string) => Promise<T | null>,\n  setter: (req: AppRequest, decoded: T) => void,\n) => {\n  if (!isAppRequest(req)) {\n    throw new TypeGuardError();\n  }\n\n  const authHeader = req.headers.authorization;\n  if (!authHeader || !authHeader.startsWith(\"Bearer \")) {\n    req.logger.warn(`No authorization header for ${scope} provided on request to ${req.path}`);\n    return res.status(StatusCodes.UNAUTHORIZED).json({\n      error: \"unauthorized\",\n      errorDescription: \"No token provided\",\n    });\n  }\n\n  const token = authHeader.split(\" \")[1];\n  try {\n    const decoded = await verifier(token);\n    if (!decoded) {\n      req.logger.debug(\"Token verification failed\");\n      return res.status(StatusCodes.UNAUTHORIZED).json({\n        error: \"unauthorized\",\n        errorDescription: \"Invalid token\",\n      });\n    }\n\n    if (scope === \"user\") {\n      const token = await cacheGetOrAdd(\n        { type: CacheItemType.ENDUSER_TOKEN, ids: [decoded.email, decoded.jti || \"\"] },\n        async () =>\n          await req.db.providerToken.findUnique({\n            where: {\n              id: decoded.jti,\n            },\n          }),\n      );\n      if (!token) {\n        req.logger.warn(\"Token not found in database\", decoded.jti);\n        return res.status(StatusCodes.UNAUTHORIZED).json({\n          error: \"unauthorized\",\n          errorDescription: \"Invalid token\",\n        });\n      }\n      setImmediate(() => markTokenAsUsed(req.db, token.id));\n    }\n\n    setter(req, decoded);\n    req.logger = req.logger.child({\n      tenantId: decoded.tenantId,\n      [scope === \"user\" ? \"endUserId\" : \"adminId\"]: decoded.id,\n      email: await hashForLogging(decoded.email),\n    });\n    return next();\n  } catch {\n    return res.status(StatusCodes.UNAUTHORIZED).json({\n      error: \"unauthorized\",\n      errorDescription: \"Invalid token\",\n    });\n  }\n};\n\nexport const adminSessionMiddleware = async (req: Request, res: Response, next: NextFunction) => {\n  return sessionMiddleware(req, res, next, \"admin\", verifyAdminToken, (req, decoded) => (req.admin = decoded));\n};\n\nexport const endUserSessionMiddleware = async (req: Request, res: Response, next: NextFunction) => {\n  return sessionMiddleware(req, res, next, \"user\", verifyEndUserToken, (req, decoded) => (req.user = decoded));\n};\n\nexport const superAdminOnlyMiddleware = (\n  req: Request<Record<string, string>, object, object>,\n  res: Response,\n  next: NextFunction,\n) => {\n  if (!isAdminRequest(req)) {\n    throw new TypeGuardError();\n  }\n\n  if (req.admin.role === AdminRole.superadmin) {\n    return next();\n  }\n  return res.status(StatusCodes.FORBIDDEN).json({\n    error: \"forbidden\",\n    errorDescription: \"Superadmin privileges required\",\n  });\n};\n", "import { OAuthProvider, ProviderToken } from \"@prisma/client\";\nimport axios from \"axios\";\nimport { Request } from \"express\";\nimport { StatusCodes } from \"http-status-codes\";\nimport omit from \"lodash/omit.js\";\nimport qs from \"qs\";\nimport { Logger } from \"winston\";\nimport { OAuthError } from \"../types/error.types.js\";\nimport { isLocalRun } from \"../utils/config.js\";\nimport { Database } from \"../utils/connection.js\";\n\nexport const ENDUSER_SCOPE = \"enduser\";\nexport const TOOL_SCOPE = \"tool\";\n\nexport interface StateData {\n  redirectUri: string | null;\n  clientState: string;\n  clientId: string | null;\n  serverId: string | null;\n  scope: string | null;\n  providerId: string | null;\n  originAddress: string | null;\n  userId: string | null;\n}\n\nexport const encodeData = <T>(data: T) => Buffer.from(JSON.stringify(data)).toString(\"base64\");\nexport const decodeData = <T>(encoded: string): T => JSON.parse(Buffer.from(encoded, \"base64\").toString());\n\nconst oauthAuthHeader = (provider: OAuthProvider) =>\n  \"Basic \" + Buffer.from(`${provider.clientId}:${provider.clientSecret}`).toString(\"base64\");\n\nexport const getHostUrl = (req: Request, useServerHost: boolean): string => {\n  if (useServerHost) {\n    const protocol = isLocalRun ? req.get(\"X-Forwarded-Proto\") || req.protocol : \"https\";\n    const host = `${protocol}://${req.get(\"host\")}`;\n    return host.endsWith(\"/\") ? host.slice(0, -1) : host;\n  }\n  // we assume when deployed, the host is always the same as the console URL\n  return process.env.CONSOLE_URL as string;\n};\n\nexport const callbackUrl = (req: Request) => `${getHostUrl(req, isLocalRun)}/api/oauth/callback`;\n\ninterface TokenExchangeResult {\n  accessToken: string;\n  refreshToken?: string;\n  expiresIn: number | null;\n  scope?: string;\n}\n\nexport const exchangeCodeForToken = async (\n  logger: Logger,\n  provider: OAuthProvider,\n  code: string,\n  callbackUrl: string,\n): Promise<TokenExchangeResult> => {\n  logger.debug(`Exchanging auth code for token with provider: ${provider.name} (${provider.id})`);\n  logger.debug(`Using callback URL: ${callbackUrl}`);\n\n  const tokenRequestData: Record<string, string> = {\n    redirect_uri: callbackUrl,\n    code,\n    grant_type: \"authorization_code\",\n  };\n\n  const refreshUrl = provider.refreshUrl || provider.tokenUrl;\n  logger.debug(`Making token request to: ${refreshUrl}`);\n  const contentType = provider.contentType || \"application/json\";\n  try {\n    const tokenResponse = await axios.post(\n      provider.refreshUrl || provider.tokenUrl,\n      contentType.includes(\"form\") ? qs.stringify(tokenRequestData) : tokenRequestData,\n      {\n        headers: {\n          \"Content-Type\": contentType,\n          Authorization: oauthAuthHeader(provider),\n        },\n      },\n    );\n\n    logger.debug(\n      `Token exchange successful, received access_token: ${tokenResponse.data.access_token ? \"\u2713\" : \"\u2717\"}, refresh_token: ${tokenResponse.data.refresh_token ? \"\u2713\" : \"\u2717\"}`,\n    );\n\n    return {\n      accessToken: tokenResponse.data.access_token,\n      refreshToken: tokenResponse.data.refresh_token,\n      expiresIn: tokenResponse.data.expires_in || 3600,\n      scope: tokenResponse.data.scope,\n    };\n  } catch (error) {\n    const errorMessage =\n      axios.isAxiosError(error) && error.response\n        ? `${error.response.statusText}: ${error.response.data}`\n        : \"Failed to grant token\";\n    logger.warn(\n      `Token exchange failed`,\n      axios.isAxiosError(error) && error.response ? omit(error, [\"request\", \"response\"]) : error,\n      {\n        refreshUrl,\n        contentType,\n        ...(axios.isAxiosError(error) && error.response\n          ? {\n              status: error.response.status,\n              data: error.response.data,\n            }\n          : {}),\n      },\n    );\n    throw new OAuthError(errorMessage, StatusCodes.BAD_REQUEST, \"token_grant_failed\");\n  }\n};\n\nexport const refreshAndPersistAccessToken = async (\n  db: Database,\n  logger: Logger,\n  userId: string,\n  provider: OAuthProvider,\n  refreshToken: string,\n  originAddress: string | null,\n): Promise<ProviderToken> => {\n  try {\n    const tokenRequestData: Record<string, string> = {\n      refresh_token: refreshToken,\n      grant_type: \"refresh_token\",\n    };\n\n    const contentType = provider.contentType || \"application/json\";\n    const tokenResponse = await axios.post(\n      provider.refreshUrl || provider.tokenUrl,\n      contentType.includes(\"form\") ? qs.stringify(tokenRequestData) : tokenRequestData,\n      {\n        headers: {\n          \"Content-Type\": contentType,\n          Authorization: oauthAuthHeader(provider),\n        },\n      },\n    );\n\n    const tokenData = {\n      accessToken: tokenResponse.data.access_token,\n      expiresIn: tokenResponse.data.expires_in || 3600,\n      scope: tokenResponse.data.scope,\n      refreshToken: tokenResponse.data.refresh_token || refreshToken,\n    } as TokenExchangeResult;\n\n    return await persistToken(db, logger, userId, provider.id, tokenData, originAddress);\n  } catch (error) {\n    logger.warn(`Token refresh failed`, error, {\n      ...(axios.isAxiosError(error) && error.response\n        ? {\n            status: error.response.status,\n            data: error.response.data,\n          }\n        : {}),\n    });\n    throw new OAuthError(`Failed to refresh token`, StatusCodes.BAD_REQUEST, \"token_refresh_failed\");\n  }\n};\n\nexport const persistToken = async (\n  db: Database,\n  logger: Logger,\n  userId: string,\n  providerId: string | null,\n  token: TokenExchangeResult,\n  originAddress: string | null,\n  jti: string | null = null,\n) => {\n  logger.debug(`Persisting token for user ${userId} and provider ${providerId}`);\n\n  if (providerId) {\n    await db.providerToken.deleteMany({\n      where: {\n        providerId,\n        userId,\n      },\n    });\n  }\n\n  return await db.providerToken.create({\n    data: {\n      id: jti || undefined,\n      providerId,\n      userId,\n      accessToken: token.accessToken,\n      refreshToken: token.refreshToken,\n      scopes: token.scope?.split(\" \"),\n      issuedAt: new Date(),\n      expiresAt: token.expiresIn === null ? null : new Date(Date.now() + token.expiresIn * 1000),\n      originAddress,\n    },\n  });\n};\n\nexport const getAuthorizeUrl = (\n  req: Request,\n  provider: OAuthProvider,\n  clientState: string,\n  serverId: string,\n  userId: string | null,\n  origScope: string,\n  originAddress: string | null,\n  origRedirectUri: string | null = null,\n  origClientId: string | null = null,\n  responseType = \"code\",\n): string => {\n  const stateData: StateData = {\n    redirectUri: origRedirectUri,\n    clientState,\n    clientId: origClientId,\n    serverId,\n    scope: origScope,\n    providerId: provider.id,\n    originAddress,\n    userId,\n  };\n  const stateParam = encodeData(stateData);\n\n  const authUrl = new URL(provider.authorizationUrl);\n  authUrl.searchParams.append(\"client_id\", provider.clientId);\n  authUrl.searchParams.append(\"redirect_uri\", callbackUrl(req));\n  authUrl.searchParams.append(\"response_type\", responseType);\n  authUrl.searchParams.append(\"scope\", provider.scopes.join(\" \"));\n  authUrl.searchParams.append(\"state\", stateParam);\n  authUrl.searchParams.append(\"prompt\", \"consent\");\n\n  return authUrl.toString();\n};\n\nexport const getUserUseableTokens = async (db: Database, userId: string, providerId: string) => {\n  return await db.providerToken.findMany({\n    where: {\n      userId,\n      providerId,\n      OR: [\n        {\n          expiresAt: null,\n        },\n        {\n          expiresAt: { gte: new Date() },\n        },\n        {\n          NOT: {\n            refreshToken: null,\n          },\n        },\n      ],\n    },\n    orderBy: {\n      expiresAt: \"desc\",\n    },\n  });\n};\n\nexport const markTokenAsUsed = async (db: Database, tokenId: string) =>\n  await db.providerToken.update({\n    where: {\n      id: tokenId,\n    },\n    data: {\n      lastUsedAt: new Date(),\n    },\n  });\n", "// JSON-RPC 2.0 Error Codes per specification\n// https://www.jsonrpc.org/specification#error_object\n\n// Standard JSON-RPC 2.0 error codes (-32768 to -32000)\nexport const JSONRPC_INTERNAL_ERROR = -32603; // Internal JSON-RPC error\nexport const JSONRPC_METHOD_NOT_ALLOWED = -32000; // Method not allowed\n\n// Custom application error codes\nexport const APP_INSUFFICIENT_PERMISSIONS = -33001; // Authorization error\nexport const APP_INVALID_SERVER = -33003; // Invalid server ID\nexport const APP_USER_NOT_FOUND = -33100; // User not found, should re-auth\nexport const APP_BAD_REQUEST = -33400; // Bad request\n\n// Interface for JSON-RPC 2.0 error response\nexport interface JsonRpcErrorResponse {\n  jsonrpc: string;\n  error: {\n    code: number;\n    message: string;\n    data?: unknown;\n  };\n  id: unknown;\n}\n\n// Interface for regular error response\nexport interface ErrorResponse {\n  error: {\n    code: number;\n    message: string;\n    data?: unknown;\n  };\n}\n\nexport class OAuthError extends Error {\n  statusCode: number;\n  errorCode: string;\n\n  constructor(message: string, statusCode: number, errorCode: string) {\n    super(message);\n    this.name = \"OAuthError\";\n    this.statusCode = statusCode;\n    this.errorCode = errorCode;\n  }\n}\n", "import * as crypto from \"crypto\";\nconst encoder = new TextEncoder();\n\nexport function hashForLogging(str: string): Promise<string> {\n  const data = encoder.encode(str);\n  return crypto.subtle.digest(\"SHA-256\", data).then((hashBuffer) => {\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\n    const base64 = Buffer.from(hashArray).toString(\"base64\");\n    return base64.replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=+$/, \"\");\n  });\n}\n", "import { Router } from \"express\";\nimport {\n  addToWaitlist,\n  enableAdmin,\n  listAdmins,\n  sendAdminApprovedNotification,\n  updateAdmin,\n} from \"../controllers/admins.controller.js\";\nimport { adminSessionMiddleware, superAdminOnlyMiddleware } from \"../middlewares/session.middleware.js\";\n\nconst router = Router();\n\nrouter.post(\"/waitlist\", addToWaitlist);\nrouter.put(\"/:adminId/enable\", adminSessionMiddleware, superAdminOnlyMiddleware, enableAdmin);\nrouter.put(\"/:adminId\", adminSessionMiddleware, superAdminOnlyMiddleware, updateAdmin);\nrouter.get(\"/\", adminSessionMiddleware, superAdminOnlyMiddleware, listAdmins);\nrouter.post(\n  \"/:adminId/send-approved-notification\",\n  adminSessionMiddleware,\n  superAdminOnlyMiddleware,\n  sendAdminApprovedNotification,\n);\n\nexport default router;\n", "import { UpdateAdminRequest } from \"@agentbridge/api\";\nimport { Request, Response } from \"express\";\nimport { StatusCodes } from \"http-status-codes\";\nimport {\n  createAdminUser,\n  createTenant,\n  getAdmin,\n  getAdmins,\n  putEnabled,\n  putUpdateAdmin,\n} from \"../services/admins.service.js\";\nimport { analytics, AnalyticsEvents } from \"../services/analytics.service.js\";\nimport {\n  sendAddToWaitlistEmail,\n  sendAdminApprovedNotification as sendAdminApprovedNotificationService,\n} from \"../services/email.service.js\";\nimport { verifyAdminVerificationToken } from \"../services/jwt.service.js\";\nimport { isAdminRequest, isAppRequest, TypeGuardError } from \"../utils/req-guards.js\";\n\nexport const addToWaitlist = async (\n  req: Request<Record<string, string>, object, { email: string; easterEggBypass?: boolean }>,\n  res: Response,\n) => {\n  if (!isAppRequest(req)) {\n    throw new TypeGuardError();\n  }\n  const email = req.body.email.toLowerCase();\n  const easterEggBypass = req.body.easterEggBypass || false;\n\n  req.logger.debug(\"Processing waitlist request\", { email, easterEggBypass });\n\n  try {\n    // First check if admin already exists\n    const existingAdmin = await req.db.admin.findFirst({\n      where: {\n        email: {\n          equals: email,\n          mode: \"insensitive\",\n        },\n      },\n    });\n\n    if (existingAdmin) {\n      // If user exists and has easter egg, enable them\n      if (easterEggBypass && !existingAdmin.enabled) {\n        await req.db.admin.update({\n          where: { id: existingAdmin.id },\n          data: { enabled: true },\n        });\n\n        await sendAdminApprovedNotificationService(req.logger, existingAdmin, true);\n        req.logger.info(\"\uD83D\uDE80 Easter egg bypass used - enabled existing user\", { email });\n\n        return res.status(StatusCodes.OK).json({ message: \"Account enabled via easter egg bypass!\" });\n      }\n\n      // User already exists and is either enabled or doesn't have easter egg\n      const message = existingAdmin.enabled ? \"User already has access\" : \"User already on waitlist\";\n      return res.status(StatusCodes.OK).json({ message });\n    }\n\n    // Create new tenant and admin\n    let admin;\n    try {\n      const tenant = await createTenant(req.db, email);\n      admin = await createAdminUser(req.db, email, tenant.id, {\n        emailVerified: true,\n        enabled: easterEggBypass,\n      });\n\n      // Track account activation for easter egg users\n      if (easterEggBypass) {\n        analytics.track(admin.id, AnalyticsEvents.ADMIN_ACCOUNT_ACTIVATED, {\n          email: admin.email,\n          tenant_id: admin.tenantId,\n          activation_method: \"easter_egg\",\n          approved_by: \"easter_egg\",\n          wait_time_hours: 0,\n        });\n      }\n    } catch (createError: unknown) {\n      // Handle the case where admin was created by another concurrent request\n      const error = createError as { code?: string; meta?: { target?: string[] } };\n      if (error.code === \"P2002\" && error.meta?.target?.includes(\"email\")) {\n        req.logger.info(\"Admin was created concurrently, fetching existing\", { email });\n\n        // Try to find the admin that was just created\n        const existingAdmin = await req.db.admin.findFirst({\n          where: { email: { equals: email, mode: \"insensitive\" } },\n        });\n\n        if (existingAdmin) {\n          // If easter egg, enable the user\n          if (easterEggBypass && !existingAdmin.enabled) {\n            admin = await req.db.admin.update({\n              where: { id: existingAdmin.id },\n              data: { enabled: true },\n            });\n\n            // Track account activation for easter egg users\n            analytics.track(admin.id, AnalyticsEvents.ADMIN_ACCOUNT_ACTIVATED, {\n              email: admin.email,\n              tenant_id: admin.tenantId,\n              activation_method: \"easter_egg\",\n              approved_by: \"easter_egg\",\n              wait_time_hours: Math.round((Date.now() - existingAdmin.createdAt.getTime()) / (1000 * 60 * 60)),\n            });\n\n            await sendAdminApprovedNotificationService(req.logger, admin, true);\n            req.logger.info(\"\uD83D\uDE80 Easter egg bypass used - enabled concurrent user\", { email });\n          } else {\n            admin = existingAdmin;\n          }\n        } else {\n          throw createError; // Re-throw if we still can't find the admin\n        }\n      } else {\n        throw createError; // Re-throw if it's not a duplicate email error\n      }\n    }\n\n    // Send appropriate email\n    const success = easterEggBypass\n      ? await sendAdminApprovedNotificationService(req.logger, admin, true)\n      : await sendAddToWaitlistEmail(req.logger, admin);\n\n    if (easterEggBypass) {\n      req.logger.info(\"\uD83D\uDE80 Easter egg bypass used\", { email });\n    }\n\n    if (success) {\n      const message = easterEggBypass ? \"Account created and enabled via easter egg bypass!\" : \"Added to waitlist\";\n      res.status(StatusCodes.OK).json({ message });\n    } else {\n      res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({ message: \"Failed to send email\" });\n    }\n  } catch (error) {\n    req.logger.error(\"Error in addToWaitlist\", { error, email });\n    res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({ message: \"Failed to process request\" });\n  }\n};\n\nexport const listAdmins = async (req: Request<Record<string, string>, object, object>, res: Response) => {\n  if (!isAdminRequest(req)) {\n    throw new TypeGuardError();\n  }\n  const admins = await getAdmins(req.db);\n\n  if (!admins) {\n    return res.status(StatusCodes.NOT_FOUND).json({ message: \"No admins found\" });\n  }\n  res.json(admins);\n};\n\nexport const updateAdmin = async (req: Request<Record<string, string>, object, UpdateAdminRequest>, res: Response) => {\n  if (!isAdminRequest(req)) {\n    throw new TypeGuardError();\n  }\n  const admin = await putUpdateAdmin(req.db, req.params.adminId, req.body);\n\n  res.json(admin);\n};\n\nexport const enableAdmin = async (\n  req: Request<Record<string, string>, object, { token?: string; enabled: boolean; sendNotification?: boolean }>,\n  res: Response,\n) => {\n  if (!isAdminRequest(req)) {\n    throw new TypeGuardError();\n  }\n  let adminId = req.params.adminId;\n  if (req.body.token) {\n    const admin = await verifyAdminVerificationToken(req.body.token);\n    if (!admin) {\n      return res.status(StatusCodes.UNAUTHORIZED).json({ message: \"Invalid verification token\" });\n    }\n    adminId = admin.id;\n  }\n  const admin = await putEnabled(\n    req.db,\n    req.logger,\n    adminId,\n    req.body.enabled,\n    req.body.sendNotification,\n    req.admin.id,\n  );\n\n  res.json(admin);\n};\n\nexport const sendAdminApprovedNotification = async (\n  req: Request<Record<string, string>, object, { adminId: string }>,\n  res: Response,\n) => {\n  if (!isAdminRequest(req)) {\n    throw new TypeGuardError();\n  }\n  const admin = await getAdmin(req.db, req.params.adminId);\n  if (!admin) {\n    return res.status(StatusCodes.NOT_FOUND).json({ message: \"Admin not found\" });\n  }\n  await sendAdminApprovedNotificationService(req.logger, admin);\n\n  res.json(admin);\n};\n", "import { Admin, AdminRole } from \"@prisma/client\";\n\nimport { UpdateAdminRequest } from \"@agentbridge/api\";\nimport { Logger } from \"winston\";\nimport { Database } from \"../utils/connection.js\";\nimport { analytics, AnalyticsEvents } from \"./analytics.service.js\";\nimport { sendAdminApprovedNotification } from \"./email.service.js\";\nimport { generateAdminToken } from \"./jwt.service.js\";\n\nexport async function createAdminUser(\n  db: Database,\n  email: string,\n  tenantId: string,\n  extras?: Partial<Omit<Admin, \"email\" | \"tenantId\">>,\n) {\n  let role: AdminRole;\n  if (email.endsWith(\"@ownid.com\")) {\n    role = AdminRole.superadmin;\n  } else {\n    role = AdminRole.admin;\n  }\n  return await db.admin.create({\n    data: {\n      ...extras,\n      email: email.toLowerCase(),\n      tenantId: tenantId,\n      role,\n    },\n  });\n}\n\nexport async function createTenant(db: Database, name: string) {\n  return await db.tenant.create({\n    data: {\n      name: name,\n    },\n  });\n}\n\nexport async function setAdminOwnIdData(db: Database, email: string, ownIdData: string) {\n  const admin = await db.admin.findFirst({\n    where: {\n      email: {\n        equals: email,\n        mode: \"insensitive\",\n      },\n    },\n  });\n\n  if (!admin) {\n    return { status: \"NOT_FOUND\", error: \"Admin not found\" };\n  }\n\n  await db.admin.update({\n    where: {\n      id: admin.id,\n    },\n    data: {\n      ownidData: ownIdData,\n    },\n  });\n  return { status: \"OK\", error: null };\n}\n\nexport async function getAdminOwnIdData(db: Database, logger: Logger, email: string) {\n  const admin = await db.admin.findFirst({\n    where: {\n      email: {\n        equals: email,\n        mode: \"insensitive\",\n      },\n    },\n  });\n\n  if (!admin) {\n    logger.debug(\"Admin not found\", { email });\n    return { status: \"NOT_FOUND\", error: \"Admin not found\" };\n  }\n\n  logger.debug(\"Admin found\", { email, ownidData: admin.ownidData, enabled: admin.enabled });\n\n  if (!admin.enabled) {\n    return { status: \"LOCKED\", error: \"Admin not enabled\" };\n  }\n\n  if (admin.ownidData) {\n    return { status: \"OK\", data: { ownIdData: admin.ownidData } };\n  }\n\n  return { status: \"NO_CONTENT\" };\n}\n\nexport async function createAdminSession(db: Database, logger: Logger, email: string) {\n  const admin = await db.admin.findFirst({\n    where: {\n      email: {\n        equals: email,\n        mode: \"insensitive\",\n      },\n    },\n  });\n\n  if (!admin) {\n    logger.debug(\"Admin not found\", { email });\n    return { status: \"NOT_FOUND\", error: \"Admin not found\" };\n  }\n\n  const token = await generateAdminToken(admin);\n  return { status: \"OK\", data: { token } };\n}\n\nexport async function getAdmins(db: Database) {\n  return db.admin.findMany({\n    where: {\n      role: {\n        in: [\"admin\", \"superadmin\"],\n      },\n    },\n    orderBy: [{ name: \"asc\" }, { id: \"asc\" }],\n    include: { tenant: true },\n  });\n}\n\nexport async function putEnabled(\n  db: Database,\n  logger: Logger,\n  adminId: string,\n  enabled: boolean,\n  sendNotification?: boolean,\n  approvedByAdminId?: string,\n) {\n  const admin = await db.admin.update({\n    where: { id: adminId },\n    data: { enabled },\n    include: { tenant: true },\n  });\n\n  if (enabled) {\n    analytics.track(admin.id, AnalyticsEvents.ADMIN_ACCOUNT_ACTIVATED, {\n      email: admin.email,\n      tenant_id: admin.tenantId,\n      activation_method: \"manual_approval\",\n      approved_by: approvedByAdminId || \"system\",\n      wait_time_hours: admin.createdAt\n        ? Math.floor((Date.now() - new Date(admin.createdAt).getTime()) / (1000 * 60 * 60))\n        : 0,\n    });\n  }\n  if (sendNotification) {\n    await sendAdminApprovedNotification(logger, admin);\n  }\n  return admin;\n}\n\nexport async function putUpdateAdmin(db: Database, adminId: string, updates: UpdateAdminRequest) {\n  const data: { name?: string; role?: AdminRole } = {};\n\n  if (updates.name !== undefined) {\n    data.name = updates.name;\n  }\n\n  if (updates.role !== undefined) {\n    data.role = updates.role.toLowerCase() as AdminRole;\n  }\n\n  return db.admin.update({\n    where: { id: adminId },\n    data,\n  });\n}\n\nexport async function getAdmin(db: Database, adminId: string) {\n  return db.admin.findUnique({\n    where: { id: adminId },\n  });\n}\n", "import { DeepPartial, OpenAPI } from \"@agentbridge/utils\";\nimport { HttpMethod, type Prisma } from \"@prisma/client\";\nimport { RefResolver } from \"json-schema-ref-resolver\";\nimport { OpenAPIV2, OpenAPIV3 } from \"openapi-types\";\nimport { Entries } from \"type-fest\";\nimport { filterObject } from \"../filterObject.js\";\n\nexport interface OpenApiValidationErrorContent {\n  error: string;\n  errorDescription: string;\n}\n\nenum Errors {\n  NotResolvableRef = \"cannot resolve $ref\",\n  EmptyRef = \"$ref is not a string\",\n  Empty = \"empty object\",\n  NotValidPath = \"not a valid path\",\n}\nclass OpenApiValidationError extends Error {\n  constructor(\n    message: string,\n    public error: string,\n    public errorDescription?: string,\n  ) {\n    super(message);\n    this.error = error;\n    this.errorDescription = errorDescription;\n  }\n}\nconst isOpenApiV2 = (openApiContent: DeepPartial<OpenAPI.Document>): openApiContent is OpenAPI.V2Document => {\n  return \"swagger\" in openApiContent;\n};\n\ntype BaseValidatedOpenApi = DeepPartial<OpenAPI.Document> & { info: { title: string } };\n\nexport const validateOpenApiContent: (\n  refResolver: RefResolver,\n  openApiContent: DeepPartial<OpenAPI.Document>,\n) => asserts openApiContent is BaseValidatedOpenApi = (\n  refResolver: RefResolver,\n  openApiContent: DeepPartial<OpenAPI.Document>,\n): asserts openApiContent is BaseValidatedOpenApi => {\n  if (!openApiContent) {\n    throw new OpenApiValidationError(\"Empty OpenAPI content\", \"invalid_openapi\", \"OpenAPI content is empty\");\n  }\n\n  if (!openApiContent?.info) {\n    throw new OpenApiValidationError(\n      \"OpenAPI info section is required\",\n      \"invalid_openapi\",\n      \"OpenAPI info section is required\",\n    );\n  }\n\n  if (!openApiContent?.info?.title) {\n    throw new OpenApiValidationError(\"OpenAPI title is required\", \"invalid_openapi\", \"OpenAPI title is required\");\n  }\n\n  try {\n    getServerUrlFromOpenApi(openApiContent);\n  } catch {\n    throw new OpenApiValidationError(\n      \"Server URL is required in the OpenAPI specification\",\n      \"invalid_openapi\",\n      \"Server URL is required in the OpenAPI specification\",\n    );\n  }\n\n  try {\n    getSecuritySchemesFromOpenApi(refResolver, openApiContent);\n  } catch (error) {\n    console.log(error);\n    throw new OpenApiValidationError(\n      \"Security schemes are required in the OpenAPI specification\",\n      \"invalid_openapi\",\n      \"Security schemes are required in the OpenAPI specification\",\n    );\n  }\n};\n\nexport const getServerUrlFromOpenApi = (openApiContent: DeepPartial<OpenAPI.Document>): string => {\n  if (isOpenApiV2(openApiContent) && openApiContent.host) {\n    return openApiContent.host;\n  }\n\n  if (\"servers\" in openApiContent && Array.isArray(openApiContent.servers) && openApiContent.servers.length > 0) {\n    return openApiContent.servers[0].url;\n  }\n\n  throw new Error(\"Server URL is required in the OpenAPI specification\");\n};\n\nconst getSecuritySchemesFromOpenApi3 = (\n  refResolver: RefResolver,\n  openApiContent: DeepPartial<OpenAPI.Document>,\n): OpenAPI.SecuritySchemeOAuth2 => {\n  if (!(\"components\" in openApiContent) || !openApiContent.components) {\n    throw new Error(\"OAuth 2.0 security requirement must have exactly one scope\");\n  }\n  if (!(\"securitySchemes\" in openApiContent.components) || !openApiContent.components.securitySchemes) {\n    throw new Error(\"OAuth 2.0 security requirement must have exactly one scope\");\n  }\n\n  const secSchemas: Record<string, OpenAPI.SecuritySchemeOAuth2> = {};\n  Object.keys(openApiContent.components.securitySchemes).forEach((key) => {\n    if (openApiContent.components.securitySchemes[key]) {\n      secSchemas[key] = resolveRef(refResolver, openApiContent.components.securitySchemes[key]);\n    }\n  });\n\n  if (!secSchemas) {\n    throw new Error(\"OAuth 2.0 security requirement must have exactly one scope\");\n  }\n  const oauthSecurity = filterObject(secSchemas, ([_, item]) => item[\"type\"] === \"oauth2\");\n  if (Object.keys(oauthSecurity).length !== 1) {\n    throw new Error(\"OAuth 2.0 security requirement must have exactly one scope\");\n  }\n\n  const value = Object.values(oauthSecurity)[0];\n  if (!value) {\n    throw new Error(\"OAuth 2.0 security requirement must have exactly one scope\");\n  }\n  return value;\n};\n\nconst getToolName = (path: string, method: OpenAPI.HttpMethods, operation: OpenAPI.Operation): string => {\n  return operation?.operationId || `${method.toUpperCase()} ${path}`;\n};\n\nconst getSecuritySchemesFromOpenApi2 = (\n  refResolver: RefResolver,\n  openApiContent: DeepPartial<OpenAPI.Document>,\n): OpenAPI.SecuritySchemeOAuth2 => {\n  if (!(\"securityDefinitions\" in openApiContent) || !openApiContent.securityDefinitions) {\n    throw new Error(\"OAuth 2.0 security requirement must have exactly one scope\");\n  }\n  const secSchemas: OpenAPI.SecuritySchemeOAuth2[] =\n    \"$ref\" in openApiContent.securityDefinitions && typeof openApiContent.securityDefinitions[\"$ref\"] === \"string\"\n      ? refResolver.getDerefSchema(openApiContent.securityDefinitions[\"$ref\"])\n      : openApiContent.securityDefinitions;\n  if (secSchemas === undefined) {\n    throw new Error(\"OAuth 2.0 security requirement must have exactly one scope\");\n  }\n  const oauthSecurity = secSchemas.filter((scheme) => scheme.type === \"oauth2\");\n  if (oauthSecurity.length !== 1) {\n    throw new Error(\"OAuth 2.0 security requirement must have exactly one scope\");\n  }\n\n  if (\"$ref\" in oauthSecurity[0] && typeof oauthSecurity[0][\"$ref\"] === \"string\") {\n    const resolvedValue = refResolver.getDerefSchema(oauthSecurity[0][\"$ref\"]);\n    if (resolvedValue === undefined) {\n      throw new Error(\"OAuth 2.0 security requirement must have exactly one scope\");\n    }\n    return resolvedValue;\n  }\n  throw new Error(\"OAuth 2.0 security requirement must have exactly one scope\");\n};\n\nexport const getSecuritySchemesFromOpenApi = (\n  refResolver: RefResolver,\n  openApiContent: DeepPartial<OpenAPI.Document>,\n): OpenAPI.SecuritySchemeOAuth2 => {\n  if (isOpenApiV2(openApiContent)) {\n    return getSecuritySchemesFromOpenApi2(refResolver, openApiContent);\n  }\n  return getSecuritySchemesFromOpenApi3(refResolver, openApiContent);\n};\n\nconst isHttpMethod = (method: unknown): method is OpenAPI.HttpMethods =>\n  // @ts-expect-error ts(2345) error should be ignored\n  [...Object.values(OpenAPIV2.HttpMethods), ...Object.values(OpenAPIV3.HttpMethods)].includes(method);\n\nconst isOperationObject = (object: unknown): object is OpenAPI.OperationObject => {\n  return (\n    !!object &&\n    typeof object === \"object\" &&\n    \"operationId\" in object &&\n    \"parameters\" in object &&\n    \"responses\" in object &&\n    \"security\" in object\n  );\n};\nconst resolveRef = <T>(\n  refResolver: RefResolver,\n  item: T | OpenAPI.ReferenceObject,\n): Exclude<T, OpenAPI.ReferenceObject> | T => {\n  if (!item || typeof item !== \"object\") {\n    return item;\n  }\n  if (!(\"$ref\" in item)) {\n    return item as Exclude<T, OpenAPI.ReferenceObject>;\n  }\n  if (typeof item[\"$ref\"] !== \"string\") {\n    throw new Error(Errors.NotResolvableRef);\n  }\n  const resolvedPathItem = refResolver.getDerefSchema(item[\"$ref\"]);\n  if (!resolvedPathItem) {\n    throw new Error(Errors.NotResolvableRef);\n  }\n  return resolvedPathItem as Exclude<T, OpenAPI.ReferenceObject>;\n};\n\nconst isRequestBody = (object: unknown): object is OpenAPI.RequestBodyObject => {\n  return (\n    !!object &&\n    typeof object === \"object\" &&\n    \"content\" in object &&\n    typeof object.content === \"object\" &&\n    object.content !== null\n  );\n};\n\nconst getToolsFromOpenApi = (\n  refResolver: RefResolver,\n  openApiContent: DeepPartial<OpenAPI.Document>,\n): [McpServerCreate[\"server\"][\"folders\"], McpServerCreate[\"failedTools\"]] => {\n  const folders: McpServerCreate[\"server\"][\"folders\"] = {};\n  const failedTools: { toolName: string; error: string }[] = [];\n\n  if (!openApiContent.paths) {\n    return [folders, failedTools];\n  }\n\n  // path: /pet/{id}\n  // eslint-disable-next-line prefer-const\n  for (let [path, _pathObject] of Object.entries(openApiContent[\"paths\"]) as Entries<\n    DeepPartial<OpenAPI.Document[\"paths\"]>\n  >) {\n    const pathObject = resolveRef(refResolver, _pathObject);\n    if (!pathObject) {\n      continue;\n    }\n    for (const [method, _operation] of Object.entries(pathObject) as Entries<typeof pathObject>) {\n      if (!isHttpMethod(method) || !isOperationObject(_operation)) {\n        continue;\n      }\n      const operation = resolveRef(refResolver, _operation);\n      const methodStr = String(method);\n      const folderName: string = operation.tags?.[0] || \"unknown\";\n      try {\n        const toolName = getToolName(String(path), method, operation);\n\n        const description = operation.summary || operation.description || `${methodStr.toUpperCase()} ${path}`;\n\n        // Extract parameters\n\n        const parameters: Record<string, OpenAPI.OpenAPIV3 | OpenAPI.RequestBodyObject> =\n          resolveRef(refResolver, operation.parameters) ?? Object();\n\n        // Extract request body for OpenAPI 3.x\n        if (\"requestBody\" in operation && isRequestBody(operation[\"requestBody\"])) {\n          const requestBody = resolveRef(refResolver, operation[\"requestBody\"]);\n          if (requestBody) {\n            parameters[\"requestBody\"] = requestBody;\n          }\n        }\n\n        // Extract responses\n        const responses = resolveRef(refResolver, operation.responses);\n        if (!(folderName in folders)) {\n          folders[folderName] = [];\n        }\n        folders[folderName].push({\n          name: toolName,\n          description,\n          method: methodStr.toUpperCase() as HttpMethod,\n          url: path,\n          parameters: parameters as unknown as Prisma.InputJsonObject,\n          responses: responses as Prisma.InputJsonObject,\n        });\n      } catch (error) {\n        const methodStr = String(method);\n\n        const toolName = operation?.operationId || `${methodStr.toUpperCase()} ${path}`;\n        failedTools.push({\n          toolName,\n          error: error instanceof Error ? error.message : \"Unknown error processing tool\",\n        });\n      }\n    }\n  }\n\n  return [folders, failedTools];\n};\n\nconst getAuthProviderFromOpenApi = (\n  refResolver: RefResolver,\n  openApiContent: DeepPartial<OpenAPI.Document>,\n): McpServerCreate[\"server\"][\"authProvider\"] => {\n  const securitySchemes = getSecuritySchemesFromOpenApi(refResolver, openApiContent);\n\n  // Extract OAuth URLs from security schemes\n  let authorizationUrl = \"\";\n  let tokenUrl = \"\";\n  let scopes: string[] = [];\n\n  if (\"flows\" in securitySchemes && securitySchemes.flows) {\n    const flow =\n      securitySchemes.flows.authorizationCode ||\n      securitySchemes.flows.implicit ||\n      securitySchemes.flows.password ||\n      securitySchemes.flows.clientCredentials;\n\n    if (flow) {\n      authorizationUrl = \"authorizationUrl\" in flow ? flow.authorizationUrl : \"\";\n      tokenUrl = \"tokenUrl\" in flow ? flow.tokenUrl : \"\";\n      scopes = flow.scopes ? Object.keys(flow.scopes) : [];\n    }\n  } else if (\"authorizationUrl\" in securitySchemes && \"tokenUrl\" in securitySchemes) {\n    // OpenAPI 2.0 format\n    authorizationUrl = securitySchemes.authorizationUrl || \"\";\n    tokenUrl = securitySchemes.tokenUrl || \"\";\n    scopes = securitySchemes.scopes ? Object.keys(securitySchemes.scopes) : [];\n  }\n\n  const authProvider: McpServerCreate[\"server\"][\"authProvider\"] = {\n    name: \"OAuth 2.0\",\n    clientId: \"\",\n    clientSecret: \"\",\n    authorizationUrl,\n    tokenUrl,\n    scopes,\n  };\n  return authProvider;\n};\n\ninterface McpServerCreate {\n  server: {\n    server: Omit<Prisma.McpServerCreateInput, \"tenant\">;\n    folders: Record<string, Omit<Prisma.ToolCreateInput, \"tenant\" | \"server\">[]>;\n    authProvider: Omit<Prisma.OAuthProviderCreateInput, \"tenant\" | \"server\">;\n  };\n  failedTools: {\n    toolName: string;\n    error: string;\n  }[];\n}\n\nexport const getMcpServerFromOpenApi = (openApiContent: DeepPartial<OpenAPI.Document>): McpServerCreate => {\n  // #region: setup\n  const refResolver = new RefResolver();\n  refResolver.addSchema(openApiContent);\n  validateOpenApiContent(refResolver, openApiContent);\n  const server: McpServerCreate[\"server\"][\"server\"] = {\n    name: openApiContent.info.title,\n    baseUrl: getServerUrlFromOpenApi(openApiContent),\n    description: openApiContent.info?.description,\n  };\n  // #endregion\n\n  const authProvider = getAuthProviderFromOpenApi(refResolver, openApiContent);\n\n  const [folders, failedTools] = getToolsFromOpenApi(refResolver, openApiContent);\n\n  return {\n    server: {\n      server,\n      folders: folders,\n      authProvider,\n    },\n    failedTools,\n  };\n};\n", "/**\n * Centralized analytics event names following the pattern: <entity>.<action>.<status>\n */\n\nexport const AnalyticsEvents = {\n  // Authentication & Authorization Events\n  ADMIN_LOGIN_ATTEMPTED: \"admin.login.attempted\",\n  ADMIN_LOGIN_SUCCESS: \"admin.login.success\",\n  ADMIN_LOGIN_FAILED: \"admin.login.failed\",\n  ADMIN_LOGOUT_COMPLETED: \"admin.logout.completed\",\n  ADMIN_SESSION_STARTED: \"admin.session.started\",\n  ADMIN_ACCOUNT_ACTIVATED: \"admin.account.activated\",\n  ADMIN_PERMISSION_DENIED: \"admin.permission.denied\",\n\n  // Waitlist Management Events\n  WAITLIST_SIGNUP_SUBMITTED: \"waitlist.signup.submitted\",\n\n  // MCP Server Management Events\n  MCP_SERVER_CREATE_COMPLETED: \"mcp.server.create.completed\",\n  MCP_SERVER_CREATE_FAILED: \"mcp.server.create.failed\",\n\n  // Tool Management Events\n  MCP_TOOL_CREATE_COMPLETED: \"mcp.tool.create.completed\",\n  MCP_TOOL_UPDATE_COMPLETED: \"mcp.tool.update.completed\",\n\n  // Tool Execution Events\n  MCP_TOOL_EXECUTION_API_CALL: \"mcp.tool.execution.api_call\",\n  MCP_TOOL_PLAYGROUND_OPENED: \"mcp.tool.playground.opened\",\n\n  // Analytics View Events\n  MCP_ANALYTICS_VIEWED: \"mcp.analytics.viewed\",\n\n  // Tenant Management Events\n  TENANT_INVITATION_SENT: \"tenant.invitation.sent\",\n  TENANT_INVITATION_ACCEPTED: \"tenant.invitation.accepted\",\n  TENANT_INVITATION_CANCELLED: \"tenant.invitation.cancelled\",\n  TENANT_USER_REMOVED: \"tenant.user.removed\",\n\n  // OAuth Provider Events\n  OAUTH_PROVIDER_CREATED: \"oauth.provider.created\",\n  OAUTH_FLOW_STARTED: \"oauth.flow.started\",\n  OAUTH_FLOW_COMPLETED: \"oauth.flow.completed\",\n} as const;\n\nexport type AnalyticsEventName = (typeof AnalyticsEvents)[keyof typeof AnalyticsEvents];\n", "import { AnalyticsEvents } from \"@agentbridge/utils\";\nimport { PostHog } from \"posthog-node\";\n\ninterface BaseEventProperties {\n  user_id?: string;\n  tenant_id?: string;\n  session_id?: string;\n  timestamp?: string;\n  source?: \"frontend\" | \"backend\";\n}\n\nclass AnalyticsService {\n  private posthog: PostHog;\n\n  constructor() {\n    this.posthog = new PostHog(\"phc_RWNzgaQfuBegaxtWVT6QGMXJF5oirldPLdOP1uDVHtJ\", {\n      host: \"https://app.posthog.com\",\n    });\n  }\n\n  track(distinctId: string, event: string, properties: Record<string, unknown> & BaseEventProperties = {}) {\n    this.posthog.capture({\n      distinctId,\n      event,\n      properties: {\n        ...properties,\n        timestamp: new Date().toISOString(),\n        source: \"backend\",\n      },\n    });\n  }\n\n  identify(distinctId: string, properties: Record<string, unknown>) {\n    this.posthog.identify({\n      distinctId,\n      properties,\n    });\n  }\n\n  async shutdown() {\n    await this.posthog.shutdown();\n  }\n}\n\nexport const analytics = new AnalyticsService();\nexport { AnalyticsEvents };\n", "import { Admin } from \"@prisma/client\";\nimport nodemailer from \"nodemailer\";\nimport { Logger } from \"winston\";\nimport {\n  getAdminApprovalEmailTemplate,\n  getAdminApprovedEmailTemplate,\n  getEasterEggWelcomeEmailTemplate,\n  getTenantInvitationEmailTemplate,\n} from \"./email.service.templates.js\";\nimport { generateAdminVerificationToken } from \"./jwt.service.js\";\nimport { getAppSecrets } from \"./secrets.service.js\";\n\nconst notificationEmail = process.env.WAITLIST_NOTIFICATION_EMAIL;\nconst env = process.env.ENV || \"dev\";\nconst baseUrl = process.env.CONSOLE_URL || \"http://localhost:4200\";\nconst smtpPort = process.env.SMTP_PORT || \"456\";\n\nexport const sendAddToWaitlistEmail = async (logger: Logger, pendingAdmin: Admin) => {\n  if (!notificationEmail) {\n    return true;\n  }\n\n  const transporter = await createTransporter();\n\n  logger.debug(\"Sending admin approval request email\", {\n    targetEmail: notificationEmail,\n    adminEmail: pendingAdmin.email,\n  });\n  try {\n    const verificationToken = await generateAdminVerificationToken(pendingAdmin.id);\n    const verificationLink = `${baseUrl}/verify-admin?token=${verificationToken}`;\n\n    await transporter.sendMail({\n      from: `agentpass-${env}@ownid.com`,\n      to: notificationEmail,\n      subject: `AgentPass ${env}: New Admin Approval Required`,\n      html: getAdminApprovalEmailTemplate(pendingAdmin.email, verificationLink),\n    });\n    return true;\n  } catch (error) {\n    logger.error(\"Failed to send admin approval request email\", error);\n    return false;\n  }\n};\n\nexport const sendAdminApprovedNotification = async (logger: Logger, admin: Admin, isEasterEgg = false) => {\n  const transporter = await createTransporter();\n\n  logger.debug(\"Sending admin approved notification email\", {\n    adminEmail: admin.email,\n    isEasterEgg,\n  });\n\n  try {\n    await transporter.sendMail({\n      from: `agentpass-${env}@ownid.com`,\n      to: admin.email,\n      subject: isEasterEgg ? `\uD83D\uDE80 Welcome to AgentPass - Rocket Launch Detected!` : `You're in! Welcome to AgentPass`,\n      html: isEasterEgg ? getEasterEggWelcomeEmailTemplate(baseUrl) : getAdminApprovedEmailTemplate(baseUrl),\n    });\n    return true;\n  } catch (error) {\n    logger.error(\"Failed to send admin approved notification email\", error);\n    return false;\n  }\n};\n\n// Easter egg welcome email is now handled by sendAdminApprovedNotification with isEasterEgg=true\n\nexport const sendTenantInvitationEmail = async (\n  logger: Logger,\n  to: string,\n  inviter: string,\n  tenantName: string,\n  invitationLink: string,\n  role: string,\n  expiresAt: Date,\n) => {\n  const transporter = await createTransporter();\n\n  logger.debug(\"Sending tenant invitation email\", {\n    to,\n    inviter,\n    tenantName,\n    invitationLink,\n    role,\n    expiresAt,\n  });\n\n  try {\n    await transporter.sendMail({\n      from: `agentpass-${env}@ownid.com`,\n      to,\n      subject: `You're invited to join ${tenantName} on AgentPass`,\n      html: getTenantInvitationEmailTemplate(inviter, tenantName, role, invitationLink, expiresAt),\n    });\n    return true;\n  } catch (error) {\n    logger.error(\"Failed to send tenant invitation email\", error);\n    return false;\n  }\n};\n\nconst createTransporter = async () => {\n  const appSecrets = await getAppSecrets();\n  return nodemailer.createTransport({\n    host: appSecrets.smtpHost,\n    port: Number(appSecrets.smtpPort),\n    secure: appSecrets.smtpPort === smtpPort,\n    auth: {\n      user: appSecrets.smtpUsername,\n      pass: appSecrets.smtpPassword,\n    },\n  });\n};\n", "export const getAdminApprovalEmailTemplate = (adminEmail: string, verificationLink: string): string => {\n  return `<!doctype html>\n  <html lang=\"en\">\n    <body style=\"margin: 0; padding: 0; background-color: #171e29; font-family: Arial, 'Helvetica Neue', Helvetica, sans-serif; color: #f8f9fb;\">\n      <table cellpadding=\"0\" cellspacing=\"0\" border=\"0\" width=\"100%\" style=\"background-color: #171e29; padding: 40px 0\">\n        <tr>\n          <td align=\"center\">\n            <table cellpadding=\"0\" cellspacing=\"0\" border=\"0\" width=\"100%\" style=\"max-width: 600px; background-color: #1f2937; padding: 40px; border-radius: 8px; box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);\">\n              <tr>\n                <td style=\"padding: 32px 0; text-align: center; font-size: 18px\">\n                  A new admin has requested access:<br/>\n                  <strong style=\"color: #2276fc\">${adminEmail}</strong><br/><br/>\n                  Click the button below to approve their access:\n                </td>\n              </tr>\n              <tr>\n                <td style=\"text-align: center; padding-bottom: 32px\">\n                  <a href=\"${verificationLink}\" style=\"background: #2276fc; color: #FFFFFF; display: inline-block; padding: 12px 32px; text-align: center; text-decoration: none; border-radius: 4px; font-weight: bold;\">Approve Admin</a>\n                </td>\n              </tr>\n              <tr>\n                <td style=\"text-align: center; font-size: 14px; color: #a7b0bd\">\n                  If you did not expect this request, you can safely ignore this message.\n                </td>\n              </tr>\n            </table>\n          </td>\n        </tr>\n      </table>\n    </body>\n  </html>`;\n};\n\nexport const getAdminApprovedEmailTemplate = (appLink: string): string => {\n  return `<!doctype html>\n  <html lang=\"en\">\n    <body style=\"margin: 0; padding: 0; background-color: #171e29; font-family: Arial, 'Helvetica Neue', Helvetica, sans-serif; color: #f8f9fb;\">\n      <table cellpadding=\"0\" cellspacing=\"0\" border=\"0\" width=\"100%\" style=\"background-color: #171e29; padding: 40px 0\">\n        <tr>\n          <td align=\"center\">\n            <table cellpadding=\"0\" cellspacing=\"0\" border=\"0\" width=\"100%\" style=\"max-width: 600px; background-color: #1f2937; padding: 40px; border-radius: 8px; box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);\">\n              <tr>\n                <td style=\"padding: 16px 0; text-align: center; font-size: 16px; color: #f8f9fb;\">\n                  Great news! Your account has been approved and you're now ready to start using AgentPass.<br/><br/>\n                  Click the button below to access your dashboard and start exploring:\n                </td>\n              </tr>\n              <tr>\n                <td style=\"text-align: center;\">\n                  <a href=\"${appLink}\" style=\"background: #2276fc; color: #FFFFFF; display: inline-block; padding: 12px 32px; text-align: center; text-decoration: none; border-radius: 4px; font-weight: bold;\">Go to AgentPass</a>\n                </td>\n              </tr>\n              <tr>\n                <td style=\"padding: 16px 0; text-align: center; font-size: 15px; color: #f8f9fb;\">\n                  We're excited to have you onboard!<br/>\n                  <span style=\"color: #b0b7c3;\">The AgentPass Team</span>\n                </td>\n              </tr>\n            </table>\n          </td>\n        </tr>\n      </table>\n    </body>\n  </html>`;\n};\n\nexport const getEasterEggWelcomeEmailTemplate = (appLink: string): string => {\n  return `<!doctype html>\n  <html lang=\"en\">\n    <body style=\"margin: 0; padding: 0; background-color: #171e29; font-family: Arial, 'Helvetica Neue', Helvetica, sans-serif; color: #f8f9fb;\">\n      <table cellpadding=\"0\" cellspacing=\"0\" border=\"0\" width=\"100%\" style=\"background-color: #171e29; padding: 40px 0\">\n        <tr>\n          <td align=\"center\">\n            <table cellpadding=\"0\" cellspacing=\"0\" border=\"0\" width=\"100%\" style=\"max-width: 600px; background-color: #1f2937; padding: 40px; border-radius: 8px; box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);\">\n              <tr>\n                <td style=\"text-align: center; font-size: 28px; font-weight: bold; padding-bottom: 10px\">\n                  <span style=\"color: #2276fc\">\uD83D\uDE80 AgentPass.ai</span>\n                </td>\n              </tr>\n              <tr>\n                <td style=\"padding: 24px 0; text-align: center; font-size: 18px\">\n                  <strong style=\"color: #2276fc;\">Rocket launch detected!</strong><br/><br/>\n                  Congratulations on discovering our easter egg! Your curiosity and exploration have earned you instant access to AgentPass.<br/><br/>\n                  Your account has been activated and you're ready to start connecting AI agents to APIs:\n                </td>\n              </tr>\n              <tr>\n                <td style=\"text-align: center; padding-bottom: 32px\">\n                  <a href=\"${appLink}\" style=\"background: #2276fc; color: #FFFFFF; display: inline-block; padding: 12px 32px; text-align: center; text-decoration: none; border-radius: 4px; font-weight: bold;\">\uD83D\uDE80 Launch into AgentPass</a>\n                </td>\n              </tr>\n              <tr>\n                <td style=\"padding: 16px 0; text-align: center; font-size: 15px; color: #f8f9fb;\">\n                  Thanks for launching the rocket! We're excited to have curious explorers like you onboard.<br/>\n                  <span style=\"color: #b0b7c3;\">The AgentPass Team</span>\n                </td>\n              </tr>\n              <tr>\n                <td style=\"text-align: center; font-size: 13px; color: #a7b0bd; padding-top: 16px;\">\n                  P.S. Keep exploring - there might be more surprises waiting! \uD83C\uDFAF\n                </td>\n              </tr>\n            </table>\n          </td>\n        </tr>\n      </table>\n    </body>\n  </html>`;\n};\n\nexport const getTenantInvitationEmailTemplate = (\n  inviter: string,\n  tenantName: string,\n  role: string,\n  invitationLink: string,\n  expiresAt: Date,\n): string => {\n  return `<!doctype html>\n  <html lang=\"en\">\n    <body style=\"margin: 0; padding: 0; background-color: #171e29; font-family: Arial, 'Helvetica Neue', Helvetica, sans-serif; color: #f8f9fb;\">\n      <table cellpadding=\"0\" cellspacing=\"0\" border=\"0\" width=\"100%\" style=\"background-color: #171e29; padding: 40px 0\">\n        <tr>\n          <td align=\"center\">\n            <table cellpadding=\"0\" cellspacing=\"0\" border=\"0\" width=\"100%\" style=\"max-width: 600px; background-color: #1f2937; padding: 40px; border-radius: 8px; box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);\">\n              <tr>\n                <td style=\"text-align: center; font-size: 28px; font-weight: bold; padding-bottom: 10px\">\n                  <span style=\"color: #2276fc\">AgentPass.ai</span>\n                </td>\n              </tr>\n              <tr>\n                <td style=\"padding: 24px 0; text-align: center; font-size: 18px\">\n                  <strong>${inviter}</strong> has invited you to join the tenant <strong>${tenantName}</strong> as a <strong>${role}</strong>.<br/><br/>\n                  Click the button below to accept your invitation:\n                </td>\n              </tr>\n              <tr>\n                <td style=\"text-align: center; padding-bottom: 32px\">\n                  <a href=\"${invitationLink}\" style=\"background: #2276fc; color: #FFFFFF; display: inline-block; padding: 12px 32px; text-align: center; text-decoration: none; border-radius: 4px; font-weight: bold;\">Accept Invitation</a>\n                </td>\n              </tr>\n              <tr>\n                <td style=\"text-align: center; font-size: 15px; color: #a7b0bd\">\n                  This invitation will expire on <strong>${expiresAt.toLocaleDateString()}</strong>.<br/>\n                  If you did not expect this invitation, you can safely ignore this message.\n                </td>\n              </tr>\n            </table>\n          </td>\n        </tr>\n      </table>\n    </body>\n  </html>`;\n};\n", "import { Router } from \"express\";\nimport {\n  chatStream,\n  generateCompletionHandler,\n  generateObjectHandler,\n  generateTemplateHandler,\n  getAIConfig,\n  streamAIAgentChatHandler,\n  streamCompletionHandler,\n} from \"../controllers/ai.controller.js\";\nimport { rateLimitMiddleware } from \"../middlewares/rate-limit.middleware.js\";\nimport { adminSessionMiddleware } from \"../middlewares/session.middleware.js\";\n\nconst router = Router();\n\n// Apply authentication middleware to all AI routes\nrouter.use(adminSessionMiddleware);\n\n// Apply rate limiting to prevent abuse\nconst aiRateLimit = rateLimitMiddleware({\n  windowMs: 60 * 1000, // 1 minute\n  max: 20, // 20 requests per minute\n  message: \"Too many AI requests, please try again later\",\n});\n\n// Chat endpoint with streaming support\nrouter.post(\"/chat\", aiRateLimit, chatStream);\n\n// AI Agent Chat with centralized prompts (internal use)\nrouter.post(\"/agent-chat\", aiRateLimit, streamAIAgentChatHandler);\n\n// Simple text completion endpoint\nrouter.post(\"/completion\", aiRateLimit, generateCompletionHandler);\n\n// Streaming text completion with reasoning support\nrouter.post(\"/stream-completion\", aiRateLimit, streamCompletionHandler);\n\n// Structured object generation endpoint\nrouter.post(\"/generate-object\", aiRateLimit, generateObjectHandler);\n\n// Generate agent-optimized response template\nrouter.post(\"/generate-template\", aiRateLimit, generateTemplateHandler);\n\n// Get AI configuration (available providers, models, etc.)\nrouter.get(\"/config\", getAIConfig);\n\n// Simple test endpoint to verify OpenAI connection\nrouter.get(\"/test\", async (req, res) => {\n  try {\n    console.log(\"\uD83E\uDDEA Testing OpenAI connection...\");\n\n    const { generateText } = await import(\"ai\");\n    const { openai } = await import(\"@ai-sdk/openai\");\n\n    const model = openai(\"gpt-4o\");\n\n    console.log(\"\uD83D\uDD04 Calling generateText with simple test...\");\n    const result = await generateText({\n      model,\n      prompt: \"Say hello in one word\",\n      maxRetries: 1,\n    });\n\n    console.log(\"\u2705 Test successful:\", result.text);\n\n    res.json({\n      success: true,\n      response: result.text,\n      usage: result.usage,\n    });\n  } catch (error) {\n    console.error(\"\u274C Test failed:\", error);\n\n    // Enhanced error logging for the test endpoint\n    if (error && typeof error === \"object\") {\n      const errorObj = error as {\n        status?: number;\n        statusCode?: number;\n        code?: number;\n        message?: string;\n        error?: { message?: string };\n      };\n      const statusCode = errorObj.status || errorObj.statusCode || errorObj.code;\n      const message = errorObj.message || errorObj.error?.message || String(error);\n\n      console.error(`\uD83D\uDD0D Test error - Status: ${statusCode}, Message: ${message}`);\n\n      if (statusCode === 429 || message.includes(\"429\") || message.includes(\"quota\") || message.includes(\"exceeded\")) {\n        console.error(\"\uD83D\uDCB3 QUOTA EXCEEDED: You need to add billing/credits to your OpenAI account\");\n        return res.status(429).json({\n          success: false,\n          error: \"QUOTA_EXCEEDED\",\n          message:\n            \"You've exceeded your OpenAI quota. Please check your billing at https://platform.openai.com/account/billing\",\n        });\n      }\n    }\n\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : \"Unknown error\",\n    });\n  }\n});\n\nexport default router;\n", "import { PrismaClient } from \"@prisma/client\";\nimport { CoreMessage } from \"ai\";\nimport { Request, Response } from \"express\";\nimport { z } from \"zod\";\nimport {\n  AIProvider,\n  generateCompletion,\n  generateHandlebarsTemplate,\n  generateStructuredObject,\n  getAvailableModels,\n  getConfiguredProviders,\n  streamAIAgentChat,\n  streamChat,\n  streamCompletion,\n} from \"../services/ai.service.js\";\n\n// Extended request interfaces\ninterface AuthenticatedRequest extends Request {\n  db: PrismaClient;\n  admin?: { tenantId: string; id: string };\n  user?: { tenantId: string; id: string };\n}\n\n// JSON Schema interfaces\ninterface JsonSchemaProperty {\n  type?: string;\n  properties?: Record<string, JsonSchemaProperty>;\n  items?: JsonSchemaProperty;\n  required?: string[];\n  minLength?: number;\n  maxLength?: number;\n  minimum?: number;\n  maximum?: number;\n}\n\ninterface JsonSchema {\n  type: string;\n  properties?: Record<string, JsonSchemaProperty>;\n  required?: string[];\n}\n\n// Convert JSON Schema to Zod Schema\nfunction convertJsonSchemaToZod(jsonSchema: JsonSchema): z.ZodSchema {\n  if (!jsonSchema || typeof jsonSchema !== \"object\") {\n    throw new Error(\"Invalid JSON schema provided\");\n  }\n\n  if (jsonSchema.type === \"object\" && jsonSchema.properties) {\n    const zodProperties: Record<string, z.ZodTypeAny> = {};\n\n    // Convert each property\n    for (const [key, prop] of Object.entries(jsonSchema.properties)) {\n      zodProperties[key] = convertPropertyToZod(prop);\n    }\n\n    let objectSchema = z.object(zodProperties);\n\n    // Handle required fields\n    if (Array.isArray(jsonSchema.required)) {\n      // Zod object schema is strict by default, so we just need to handle optional fields\n      const requiredFields = new Set(jsonSchema.required);\n      const partialFields: Record<string, z.ZodTypeAny> = {};\n\n      for (const [key, zodType] of Object.entries(zodProperties)) {\n        if (!requiredFields.has(key)) {\n          partialFields[key] = zodType.optional();\n        } else {\n          partialFields[key] = zodType;\n        }\n      }\n\n      objectSchema = z.object(partialFields);\n    }\n\n    return objectSchema;\n  }\n\n  throw new Error(\"Unsupported schema type - only object schemas are supported\");\n}\n\nfunction convertPropertyToZod(prop: JsonSchemaProperty): z.ZodTypeAny {\n  if (!prop || typeof prop !== \"object\") {\n    return z.string(); // Default fallback\n  }\n\n  switch (prop.type) {\n    case \"string\":\n      let stringSchema = z.string();\n      if (prop.minLength) stringSchema = stringSchema.min(prop.minLength);\n      if (prop.maxLength) stringSchema = stringSchema.max(prop.maxLength);\n      return stringSchema;\n\n    case \"number\":\n      let numberSchema = z.number();\n      if (prop.minimum !== undefined) numberSchema = numberSchema.min(prop.minimum);\n      if (prop.maximum !== undefined) numberSchema = numberSchema.max(prop.maximum);\n      return numberSchema;\n\n    case \"integer\":\n      let intSchema = z.number().int();\n      if (prop.minimum !== undefined) intSchema = intSchema.min(prop.minimum);\n      if (prop.maximum !== undefined) intSchema = intSchema.max(prop.maximum);\n      return intSchema;\n\n    case \"boolean\":\n      return z.boolean();\n\n    case \"array\":\n      const itemSchema = prop.items ? convertPropertyToZod(prop.items) : z.any();\n      return z.array(itemSchema);\n\n    case \"object\":\n      if (prop.properties) {\n        const nestedProps: Record<string, z.ZodTypeAny> = {};\n        for (const [key, nestedProp] of Object.entries(prop.properties)) {\n          nestedProps[key] = convertPropertyToZod(nestedProp);\n        }\n        return z.object(nestedProps);\n      }\n      // For objects without defined properties or with additionalProperties: true, use z.record()\n      return z.record(z.unknown());\n\n    default:\n      return z.unknown(); // Fallback for unknown types\n  }\n}\n\n// Request validation schemas\nconst chatRequestSchema = z.object({\n  messages: z.array(\n    z.object({\n      id: z.string(),\n      role: z.enum([\"user\", \"assistant\", \"system\"]),\n      content: z.string(),\n    }),\n  ),\n  config: z\n    .object({\n      provider: z.enum([\"openai\", \"anthropic\"]).optional(),\n      model: z.string().optional(),\n      temperature: z.number().min(0).max(2).optional(),\n      maxTokens: z.number().positive().optional(),\n      topP: z.number().min(0).max(1).optional(),\n    })\n    .optional(),\n});\n\nconst completionRequestSchema = z.object({\n  prompt: z.string().min(1),\n  config: z\n    .object({\n      provider: z.enum([\"openai\", \"anthropic\"]).optional(),\n      model: z.string().optional(),\n      temperature: z.number().min(0).max(2).optional(),\n      maxTokens: z.number().positive().optional(),\n      topP: z.number().min(0).max(1).optional(),\n    })\n    .optional(),\n  enableWebSearch: z.boolean().optional(),\n});\n\nconst streamCompletionRequestSchema = completionRequestSchema.extend({\n  enableReasoning: z.boolean().optional(),\n});\n\nconst agentChatRequestSchema = completionRequestSchema.extend({\n  conversationHistory: z.string().optional(),\n  hasShownDesign: z.boolean().optional(),\n  serverId: z.string().optional(),\n});\n\nconst templateRequestSchema = z.object({\n  tool: z.object({\n    name: z.string(),\n    description: z.string(),\n    method: z.string(),\n    url: z.string(),\n    parameters: z.record(z.unknown()).optional().nullable(),\n    requestParameterOverrides: z.record(z.unknown()).optional().nullable(),\n    responses: z.record(z.unknown()).optional().nullable(),\n  }),\n  config: z\n    .object({\n      provider: z.enum([\"openai\", \"anthropic\"]).optional(),\n      model: z.string().optional(),\n      temperature: z.number().min(0).max(2).optional(),\n      maxTokens: z.number().positive().optional(),\n      topP: z.number().min(0).max(1).optional(),\n    })\n    .optional(),\n});\n\n// Stream chat response\nexport async function chatStream(req: Request, res: Response) {\n  try {\n    // Validate request body\n    const body = chatRequestSchema.parse(req.body);\n\n    // Get tenant ID from authenticated user (admin or end user)\n    const authReq = req as unknown as AuthenticatedRequest;\n    const admin = authReq.admin;\n    const user = authReq.user;\n    const tenantId = admin?.tenantId || user?.tenantId;\n    const userId = admin?.id || user?.id;\n\n    if (!tenantId) {\n      return res.status(400).json({ error: \"Tenant ID is required\" });\n    }\n\n    // Set up SSE headers for streaming\n    res.setHeader(\"Content-Type\", \"text/event-stream\");\n    res.setHeader(\"Cache-Control\", \"no-cache\");\n    res.setHeader(\"Connection\", \"keep-alive\");\n    res.setHeader(\"X-Accel-Buffering\", \"no\"); // Disable nginx buffering\n\n    console.log(`\uD83D\uDE80 Starting chat stream for tenant: ${tenantId}, user: ${userId}`);\n    console.log(`\uD83D\uDCDD Request body:`, {\n      messageCount: body.messages.length,\n      config: body.config,\n      firstMessage: body.messages[0]?.content.substring(0, 100) + \"...\",\n    });\n\n    // Stream the chat response\n    const result = await streamChat((req as unknown as AuthenticatedRequest).db, {\n      messages: body.messages as CoreMessage[],\n      config: body.config,\n      tenantId,\n      userId,\n    });\n\n    console.log(`\uD83D\uDCE1 Stream result created, converting to text stream response`);\n\n    // Convert to data stream response\n    const response = result.toTextStreamResponse();\n    console.log(`\uD83D\uDCE1 Stream response headers:`, Object.fromEntries(response.headers.entries()));\n\n    console.log(`\uD83D\uDCE4 Starting to stream response to client`);\n\n    // Pipe the response body to our response\n    if (response.body) {\n      const reader = response.body.getReader();\n      let chunkCount = 0;\n      let totalBytes = 0;\n\n      try {\n        while (true) {\n          const { done, value } = await reader.read();\n          if (done) {\n            console.log(`\uD83C\uDFC1 Stream finished after ${chunkCount} chunks, ${totalBytes} total bytes`);\n            break;\n          }\n\n          chunkCount++;\n          totalBytes += value.length;\n\n          // Log the actual content for debugging\n          const chunk = new TextDecoder().decode(value);\n          console.log(`\uD83D\uDCE6 Chunk ${chunkCount}: ${value.length} bytes`);\n          console.log(`\uD83D\uDCDD Chunk content (first 200 chars): ${chunk.substring(0, 200)}...`);\n\n          // Write the chunk to the response\n          res.write(value);\n        }\n      } finally {\n        reader.releaseLock();\n      }\n    } else {\n      console.log(`\u274C No response body from stream`);\n    }\n\n    console.log(`\u2705 Stream completed successfully`);\n    res.end();\n  } catch (error) {\n    console.error(\"Chat stream error:\", error);\n\n    // If headers haven't been sent, send error response\n    if (!res.headersSent) {\n      res.status(500).json({\n        error: \"Failed to process chat request\",\n        message: error instanceof Error ? error.message : \"Unknown error\",\n      });\n    } else {\n      // If streaming has started, send error event\n      res.write(`data: ${JSON.stringify({ error: \"Stream error occurred\" })}\\n\\n`);\n      res.end();\n    }\n  }\n}\n\n// Generate text completion\nexport async function generateCompletionHandler(req: Request, res: Response) {\n  try {\n    // Validate request body\n    const body = completionRequestSchema.parse(req.body);\n\n    // Get tenant ID from authenticated user (admin or end user)\n    const authReq = req as unknown as AuthenticatedRequest;\n    const admin = authReq.admin;\n    const user = authReq.user;\n    const tenantId = admin?.tenantId || user?.tenantId;\n    const userId = admin?.id || user?.id;\n\n    if (!tenantId) {\n      return res.status(400).json({ error: \"Tenant ID is required\" });\n    }\n\n    // Generate completion\n    const result = await generateCompletion((req as unknown as AuthenticatedRequest).db, {\n      prompt: body.prompt,\n      config: body.config,\n      tenantId,\n      userId,\n      enableWebSearch: body.enableWebSearch,\n    });\n\n    // Return the result\n    res.json({\n      text: result.text,\n      usage: result.usage,\n      finishReason: result.finishReason,\n    });\n  } catch (error) {\n    console.error(\"Completion error:\", error);\n\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({\n        error: \"Invalid request\",\n        details: error.errors,\n      });\n    }\n\n    res.status(500).json({\n      error: \"Failed to generate completion\",\n      message: error instanceof Error ? error.message : \"Unknown error\",\n    });\n  }\n}\n\n// Stream text completion with reasoning support\nexport async function streamCompletionHandler(req: Request, res: Response) {\n  try {\n    // Validate request body\n    const body = streamCompletionRequestSchema.parse(req.body);\n\n    // Get tenant ID from authenticated user (admin or end user)\n    const authReq = req as unknown as AuthenticatedRequest;\n    const admin = authReq.admin;\n    const user = authReq.user;\n    const tenantId = admin?.tenantId || user?.tenantId;\n    const userId = admin?.id || user?.id;\n\n    if (!tenantId) {\n      return res.status(400).json({ error: \"Tenant ID is required\" });\n    }\n\n    // Set up SSE headers for streaming\n    res.setHeader(\"Content-Type\", \"text/event-stream\");\n    res.setHeader(\"Cache-Control\", \"no-cache\");\n    res.setHeader(\"Connection\", \"keep-alive\");\n    res.setHeader(\"X-Accel-Buffering\", \"no\");\n\n    console.log(`\uD83D\uDE80 Starting completion stream for tenant: ${tenantId}`);\n\n    // Stream the completion\n    const result = await streamCompletion((req as unknown as AuthenticatedRequest).db, {\n      prompt: body.prompt,\n      config: body.config,\n      tenantId,\n      userId,\n      enableWebSearch: body.enableWebSearch,\n      enableReasoning: body.enableReasoning,\n    });\n\n    // Convert to UI message stream response with reasoning enabled\n    const response = result.toUIMessageStreamResponse({\n      sendReasoning: body.enableReasoning || false,\n      headers: {\n        \"Content-Type\": \"text/plain; charset=utf-8\",\n      },\n    });\n\n    // Pipe the response body to our response\n    if (response.body) {\n      const reader = response.body.getReader();\n\n      try {\n        while (true) {\n          const { done, value } = await reader.read();\n          if (done) break;\n          res.write(value);\n        }\n      } finally {\n        reader.releaseLock();\n      }\n    }\n\n    res.end();\n  } catch (error) {\n    console.error(\"Stream completion error:\", error);\n\n    if (!res.headersSent) {\n      res.status(500).json({\n        error: \"Failed to stream completion\",\n        message: error instanceof Error ? error.message : \"Unknown error\",\n      });\n    } else {\n      res.write(`data: ${JSON.stringify({ error: \"Stream error occurred\" })}\\n\\n`);\n      res.end();\n    }\n  }\n}\n\n// Generate structured object\nexport async function generateObjectHandler(req: Request, res: Response) {\n  try {\n    const { prompt, schema: schemaDefinition, config } = req.body;\n\n    // Get tenant ID from authenticated user (admin or end user)\n    const authReq = req as unknown as AuthenticatedRequest;\n    const admin = authReq.admin;\n    const user = authReq.user;\n    const tenantId = admin?.tenantId || user?.tenantId;\n    const userId = admin?.id || user?.id;\n\n    if (!tenantId) {\n      return res.status(400).json({ error: \"Tenant ID is required\" });\n    }\n\n    if (!prompt || !schemaDefinition) {\n      return res.status(400).json({\n        error: \"Prompt and schema are required\",\n      });\n    }\n\n    // Convert JSON schema to Zod schema\n    console.log(\"\uD83D\uDD04 Converting JSON schema to Zod:\", JSON.stringify(schemaDefinition, null, 2));\n    let schema: z.ZodSchema;\n    try {\n      schema = convertJsonSchemaToZod(schemaDefinition);\n      console.log(\"\u2705 Schema conversion successful\");\n    } catch (error) {\n      console.error(\"\u274C Schema conversion error:\", error);\n      return res.status(400).json({\n        error: \"Invalid schema definition\",\n        details: error instanceof Error ? error.message : \"Unknown error\",\n      });\n    }\n\n    // Generate structured object\n    const result = await generateStructuredObject((req as unknown as AuthenticatedRequest).db, {\n      prompt,\n      schema,\n      config,\n      tenantId,\n      userId,\n    });\n\n    // Return the result\n    res.json({\n      object: result.object,\n      usage: result.usage,\n      finishReason: result.finishReason,\n    });\n  } catch (error) {\n    console.error(\"Generate object error:\", error);\n\n    res.status(500).json({\n      error: \"Failed to generate object\",\n      message: error instanceof Error ? error.message : \"Unknown error\",\n    });\n  }\n}\n\n// Stream AI agent chat with centralized prompts\nexport async function streamAIAgentChatHandler(req: Request, res: Response) {\n  try {\n    // Validate request body\n    const body = agentChatRequestSchema.parse(req.body);\n\n    // Get tenant ID from authenticated user (admin or end user)\n    const authReq = req as unknown as AuthenticatedRequest;\n    const admin = authReq.admin;\n    const user = authReq.user;\n    const tenantId = admin?.tenantId || user?.tenantId;\n    const userId = admin?.id || user?.id;\n\n    if (!tenantId) {\n      return res.status(400).json({ error: \"Tenant ID is required\" });\n    }\n\n    // Set up SSE headers for streaming\n    res.setHeader(\"Content-Type\", \"text/event-stream\");\n    res.setHeader(\"Cache-Control\", \"no-cache\");\n    res.setHeader(\"Connection\", \"keep-alive\");\n    res.setHeader(\"X-Accel-Buffering\", \"no\");\n\n    // Stream the AI agent chat response\n    const result = await streamAIAgentChat((req as unknown as AuthenticatedRequest).db, {\n      prompt: body.prompt,\n      conversationHistory: body.conversationHistory,\n      hasShownDesign: body.hasShownDesign,\n      serverId: body.serverId,\n      config: body.config,\n      tenantId,\n      userId,\n    });\n\n    // Convert to UI message stream response for richer interaction\n    const response = result.toUIMessageStreamResponse();\n\n    // Pipe the response body to our response\n    if (response.body) {\n      const reader = response.body.getReader();\n      try {\n        while (true) {\n          const { done, value } = await reader.read();\n          if (done) break;\n          res.write(value);\n        }\n      } finally {\n        reader.releaseLock();\n      }\n    }\n\n    res.end();\n  } catch (error) {\n    console.error(\"AI agent chat stream error:\", error);\n    console.error(\"Error details:\", {\n      name: error instanceof Error ? error.name : \"Unknown\",\n      message: error instanceof Error ? error.message : \"Unknown error\",\n      stack: error instanceof Error ? error.stack : undefined,\n    });\n\n    if (!res.headersSent) {\n      res.status(500).json({\n        error: \"Failed to process AI agent chat request\",\n        message: error instanceof Error ? error.message : \"Unknown error\",\n      });\n    } else {\n      // Send error in UI message stream format\n      const errorData = JSON.stringify({\n        type: \"error\",\n        error: error instanceof Error ? error.message : \"Stream error occurred\",\n      });\n      res.write(`${errorData}\\n`);\n      res.end();\n    }\n  }\n}\n\n// Generate agent-optimized response template\nexport async function generateTemplateHandler(req: Request, res: Response) {\n  try {\n    // Validate request body\n    const body = templateRequestSchema.parse(req.body);\n\n    // Get tenant ID from authenticated user (admin or end user)\n    const authReq = req as unknown as AuthenticatedRequest;\n    const admin = authReq.admin;\n    const user = authReq.user;\n    const tenantId = admin?.tenantId || user?.tenantId;\n\n    if (!tenantId) {\n      return res.status(400).json({ error: \"Tenant ID is required\" });\n    }\n\n    const { tool, config } = body;\n\n    // Use requestParameterOverrides if available, otherwise fall back to parameters\n    // Handle null values by converting them to empty objects\n    const parametersToUse = tool.requestParameterOverrides || tool.parameters || {};\n\n    // Build the tool context for the prompt\n    const toolContext = {\n      toolName: tool.name,\n      toolDescription: tool.description,\n      method: tool.method,\n      url: tool.url,\n      parameters: JSON.stringify(parametersToUse, null, 2),\n      responses: JSON.stringify(tool.responses || {}, null, 2),\n    };\n\n    // Generate template using the centralized backend function\n    const result = await generateHandlebarsTemplate((req as unknown as AuthenticatedRequest).db, toolContext, config);\n\n    // Extract the template from the completion\n    let template = result.text.trim();\n\n    // Remove code fence markers if present\n    if (template.startsWith(\"```\") && template.endsWith(\"```\")) {\n      const lines = template.split(\"\\n\");\n      if (lines.length > 2) {\n        template = lines.slice(1, -1).join(\"\\n\");\n      }\n    }\n\n    // Return the generated template\n    res.json({\n      template,\n      usage: result.usage,\n      finishReason: result.finishReason,\n    });\n  } catch (error) {\n    console.error(\"Template generation error:\", error);\n\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({\n        error: \"Invalid request\",\n        details: error.errors,\n      });\n    }\n\n    res.status(500).json({\n      error: \"Failed to generate template\",\n      message: error instanceof Error ? error.message : \"Unknown error\",\n    });\n  }\n}\n\n// Get AI configuration and available providers\nexport async function getAIConfig(req: Request, res: Response) {\n  try {\n    const providers = getConfiguredProviders();\n\n    const config = {\n      providers: providers.map((provider) => ({\n        id: provider,\n        name: provider.charAt(0).toUpperCase() + provider.slice(1),\n        models: getAvailableModels(provider as AIProvider),\n        configured: true,\n      })),\n      defaultProvider: providers[0] || null,\n    };\n\n    res.json(config);\n  } catch (error) {\n    console.error(\"Get AI config error:\", error);\n    res.status(500).json({\n      error: \"Failed to get AI configuration\",\n    });\n  }\n}\n", "import { HttpMethod, Parameter, RequestParamConfig } from \"@agentbridge/api\";\nimport { anthropic } from \"@ai-sdk/anthropic\";\nimport { openai } from \"@ai-sdk/openai\";\nimport { PrismaClient } from \"@prisma/client\";\nimport { CoreMessage, generateObject, GenerateObjectResult, generateText, streamText, tool } from \"ai\";\nimport { z } from \"zod\";\nimport { HttpRequestOverrides } from \"../utils/generateRequestOverrides.js\";\nimport { PromptService } from \"./prompts.service.js\";\n\n// AI Provider types\nexport type AIProvider = \"openai\" | \"anthropic\";\n\n// Model configurations\nconst AI_MODELS = {\n  openai: {\n    chat: \"gpt-4o\",\n    completion: \"gpt-4o\",\n    advanced: \"o1-mini\", // Use o1-mini for reasoning support\n  },\n  anthropic: {\n    chat: \"claude-3-5-sonnet-20241022\",\n    completion: \"claude-3-haiku-20240307\",\n    advanced: \"claude-3-opus-20240229\",\n  },\n} as const;\n\n// Service configuration\nexport interface AIServiceConfig {\n  provider?: AIProvider;\n  model?: string;\n  temperature?: number;\n  maxTokens?: number;\n  topP?: number;\n}\n\n// Request types\nexport interface ChatRequest {\n  messages: CoreMessage[];\n  config?: AIServiceConfig;\n  tenantId: string;\n  userId?: string;\n}\n\nexport interface CompletionRequest {\n  prompt: string;\n  config?: AIServiceConfig;\n  tenantId: string;\n  userId?: string;\n  enableWebSearch?: boolean;\n}\n\nexport interface StreamCompletionRequest extends CompletionRequest {\n  enableReasoning?: boolean;\n}\n\nexport interface AIAgentChatRequest extends CompletionRequest {\n  conversationHistory?: string;\n  hasShownDesign?: boolean;\n}\n\nexport interface GenerateObjectRequest<T = unknown> {\n  prompt: string;\n  schema: z.ZodSchema<T>;\n  config?: AIServiceConfig;\n  tenantId: string;\n  userId?: string;\n}\n\n// Get AI model based on provider and model type\nfunction getAIModel(provider: AIProvider = \"openai\", modelType = \"chat\") {\n  const providerModels = AI_MODELS[provider];\n  const modelName = providerModels[modelType as keyof typeof providerModels] || providerModels.chat;\n\n  switch (provider) {\n    case \"anthropic\":\n      return anthropic(modelName);\n    case \"openai\":\n    default:\n      // Use responses API for OpenAI models\n      return openai.responses(modelName);\n  }\n}\n\n// Get API key for provider\nfunction getAPIKey(provider: AIProvider): string {\n  const keys = {\n    openai: process.env.OPENAI_API_KEY,\n    anthropic: process.env.ANTHROPIC_API_KEY,\n  };\n\n  const key = keys[provider];\n  if (!key) {\n    throw new Error(`API key not configured for provider: ${provider}`);\n  }\n\n  // Check for placeholder values\n  const placeholders = {\n    openai: [\"sk-your-openai-api-key\", \"your-openai-api-key\", \"sk-proj-your-key-here\"],\n    anthropic: [\"sk-ant-your-anthropic-api-key\", \"your-anthropic-api-key\"],\n  };\n\n  if (placeholders[provider].includes(key)) {\n    throw new Error(`Please replace the placeholder API key for ${provider} with your actual API key`);\n  }\n\n  // Basic format validation\n  if (provider === \"openai\" && !key.startsWith(\"sk-\")) {\n    throw new Error(`OpenAI API key should start with 'sk-'`);\n  }\n  if (provider === \"anthropic\" && !key.startsWith(\"sk-ant-\")) {\n    throw new Error(`Anthropic API key should start with 'sk-ant-'`);\n  }\n\n  return key;\n}\n\n// Stream text for chat conversations\nexport async function streamChat(prisma: PrismaClient, request: ChatRequest) {\n  const { messages, config = {}, tenantId, userId } = request;\n  const { provider = \"openai\", ...modelConfig } = config;\n\n  const lastMessage = messages[messages.length - 1];\n  const lastMessageContent =\n    typeof lastMessage?.content === \"string\"\n      ? lastMessage.content.substring(0, 100) + \"...\"\n      : Array.isArray(lastMessage?.content)\n        ? `[${lastMessage.content.length} parts]`\n        : \"Unknown format\";\n\n  console.log(`\uD83E\uDD16 AI Chat Request:`, {\n    provider,\n    tenantId,\n    userId,\n    messageCount: messages.length,\n    lastMessage: lastMessageContent,\n    config: modelConfig,\n  });\n\n  // Validate API key\n  const apiKey = getAPIKey(provider);\n  console.log(`\uD83D\uDD11 API Key validation: ${provider} key ${apiKey ? \"present\" : \"missing\"}`);\n\n  // Get the appropriate model\n  const model = getAIModel(provider, \"chat\");\n  console.log(`\uD83C\uDFAF Using model: ${provider} with model type \"chat\"`);\n\n  // Messages are already in CoreMessage format\n  const coreMessages = messages;\n  console.log(`\uD83D\uDCAC Processing ${coreMessages.length} messages`);\n\n  const streamConfig = {\n    model,\n    messages: coreMessages,\n    temperature: modelConfig.temperature ?? 0.7,\n    maxOutputTokens: modelConfig.maxTokens,\n    topP: modelConfig.topP,\n    system: \"You are a helpful AI assistant integrated into the AgentBridge platform.\",\n  };\n\n  console.log(`\u2699\uFE0F Stream config:`, {\n    modelName: model,\n    temperature: streamConfig.temperature,\n    maxOutputTokens: streamConfig.maxOutputTokens,\n    topP: streamConfig.topP,\n  });\n\n  try {\n    // Stream the response\n    console.log(`\uD83D\uDD04 Calling streamText with ${provider}...`);\n\n    // Add timeout to detect hanging calls\n    const streamPromise = streamText(streamConfig);\n    const timeoutPromise = new Promise<never>((resolve, reject) => {\n      setTimeout(() => reject(new Error(\"StreamText call timed out after 30 seconds\")), 30000);\n    });\n\n    const result = await Promise.race([streamPromise, timeoutPromise]);\n    console.log(`\u2705 Stream created successfully`);\n\n    // Log the stream result properties\n    console.log(`\uD83D\uDD0D Stream result properties:`, {\n      hasTextStream: !!result.textStream,\n      hasFullStream: !!result.fullStream,\n      hasToTextStreamResponse: typeof result.toTextStreamResponse === \"function\",\n    });\n\n    // Test if we can read from the stream immediately\n    try {\n      const textStreamResponse = result.toTextStreamResponse();\n      console.log(`\uD83D\uDD0D Text stream response created, status: ${textStreamResponse.status}`);\n    } catch (streamError) {\n      console.error(`\u274C Error creating text stream response:`, streamError);\n    }\n\n    // TODO: Track usage in database if needed\n    // This could be done by listening to the stream events\n\n    return result;\n  } catch (error) {\n    console.error(`\u274C Stream creation failed:`, error);\n\n    // Enhanced error logging with better structure\n    if (error instanceof Error) {\n      console.error(`\uD83D\uDD0D Error details:`);\n      console.error(`  Message: ${error.message}`);\n      console.error(`  Name: ${error.name}`);\n      console.error(`  Stack: ${error.stack}`);\n    }\n\n    // Log the full error object to see its structure\n    console.error(`\uD83D\uDD0D Full error object:`, JSON.stringify(error, null, 2));\n\n    // Check for API-specific error properties\n    if (error && typeof error === \"object\") {\n      const errorObj = error as {\n        status?: number;\n        statusCode?: number;\n        code?: number;\n        message?: string;\n        error?: { message?: string };\n      };\n\n      // Check for status code in various possible locations\n      const statusCode = errorObj.status || errorObj.statusCode || errorObj.code;\n      const message = errorObj.message || errorObj.error?.message || String(error);\n\n      console.error(`\uD83D\uDD0D Extracted status: ${statusCode}, message: ${message}`);\n\n      // Check for 429 errors specifically\n      if (statusCode === 429 || message.includes(\"429\") || message.includes(\"quota\") || message.includes(\"exceeded\")) {\n        const quotaError = `\u274C QUOTA EXCEEDED: You've exceeded your OpenAI quota. Please check your billing at https://platform.openai.com/account/billing`;\n        console.error(quotaError);\n        throw new Error(quotaError);\n      }\n\n      if (statusCode === 401 || message.includes(\"401\") || message.includes(\"Unauthorized\")) {\n        const authError = `\u274C INVALID API KEY: Please check your OpenAI API key`;\n        console.error(authError);\n        throw new Error(authError);\n      }\n\n      if (message.includes(\"rate limit\")) {\n        const rateLimitError = `\u274C RATE LIMIT: Too many requests to ${provider}. Please try again later.`;\n        console.error(rateLimitError);\n        throw new Error(rateLimitError);\n      }\n    }\n\n    throw error;\n  }\n}\n\n// Generate text completion\nexport async function generateCompletion(prisma: PrismaClient, request: CompletionRequest) {\n  const { prompt, config = {} } = request;\n  // tenantId and userId are for future use in usage tracking\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const { tenantId, userId } = request;\n  const { provider = \"openai\", ...modelConfig } = config;\n\n  // Validate API key\n  getAPIKey(provider);\n\n  // Get the appropriate model\n  const model = getAIModel(provider, \"completion\");\n\n  // TODO: Web search will be re-added after responses API migration is complete\n  // For now, focusing on basic migration without web search tools\n\n  // Generate the response\n  const result = await generateText({\n    model,\n    prompt,\n    temperature: modelConfig.temperature ?? 0.7,\n    maxOutputTokens: modelConfig.maxTokens,\n    topP: modelConfig.topP,\n  });\n\n  // TODO: Track usage in database if needed\n  // You can access result.usage for token counts\n\n  return result;\n}\n\n// Stream completion with reasoning support\nexport async function streamCompletion(prisma: PrismaClient, request: StreamCompletionRequest) {\n  const { prompt, config = {}, enableReasoning = false } = request;\n  // tenantId and userId are for future use in usage tracking\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const { tenantId, userId } = request;\n  const { provider = \"openai\", ...modelConfig } = config;\n\n  // Validate API key\n  getAPIKey(provider);\n\n  // Get the appropriate model - use advanced model for reasoning if enabled\n  const model = getAIModel(provider, enableReasoning ? \"advanced\" : \"completion\");\n\n  // TODO: Web search will be re-added after responses API migration is complete\n  // For now, focusing on basic migration without web search tools\n\n  // Stream the response\n  const result = streamText({\n    model,\n    prompt,\n    temperature: modelConfig.temperature ?? 0.7,\n    maxOutputTokens: modelConfig.maxTokens,\n    topP: modelConfig.topP,\n  });\n\n  // TODO: Track usage in database if needed\n  // You can access result.usage for token counts\n\n  return result;\n}\n\n// Generate structured object\nexport async function generateStructuredObject<T>(\n  prisma: PrismaClient,\n  request: GenerateObjectRequest<T>,\n): Promise<GenerateObjectResult<T>> {\n  const { prompt, schema, config = {} } = request;\n  const { provider = \"openai\", ...modelConfig } = config;\n\n  // Validate API key\n  getAPIKey(provider);\n\n  // Get the appropriate model\n  const model = getAIModel(provider, \"chat\");\n\n  // Generate the structured response with appropriate settings for complex schemas\n  const result = await generateObject({\n    model,\n    output: \"object\", // Explicitly specify output mode\n    schema,\n    prompt,\n    temperature: modelConfig.temperature ?? 0.7,\n    maxOutputTokens: modelConfig.maxTokens ?? 4096, // Ensure enough tokens for complex responses\n    topP: modelConfig.topP,\n    maxRetries: 2, // Retry on failures\n  });\n\n  // TODO: Track usage in database if needed\n\n  return result;\n}\n\n// Get available models for a provider\nexport function getAvailableModels(provider: AIProvider) {\n  return AI_MODELS[provider] || {};\n}\n\n// Check if a provider is configured\nexport function isProviderConfigured(provider: AIProvider): boolean {\n  try {\n    getAPIKey(provider);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n// Get all configured providers\nexport function getConfiguredProviders(): AIProvider[] {\n  const providers: AIProvider[] = [\"openai\", \"anthropic\"];\n  return providers.filter(isProviderConfigured);\n}\n\n// AI Agent Chat with centralized prompt\nexport interface AIAgentChatRequest extends CompletionRequest {\n  conversationHistory?: string;\n  hasShownDesign?: boolean;\n  serverId?: string;\n}\n\nexport async function streamAIAgentChat(prisma: PrismaClient, request: AIAgentChatRequest) {\n  console.log(\"\uD83D\uDCE5 [AI SERVICE] streamAIAgentChat called with request:\", {\n    hasServerId: !!request.serverId,\n    serverId: request.serverId,\n    prompt: request.prompt?.substring(0, 50) + \"...\",\n    tenantId: request.tenantId,\n    hasPrisma: !!prisma,\n    prismaType: typeof prisma,\n  });\n\n  const { conversationHistory = \"\", hasShownDesign = false, serverId, ...baseRequest } = request;\n  const { config = {}, tenantId } = baseRequest;\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const { userId } = baseRequest;\n  const { provider = \"openai\", ...modelConfig } = config;\n\n  // Use centralized system prompt\n  const systemPrompt = PromptService.renderPrompt(\"ai-agent-system\", {\n    conversationHistory,\n    hasShownDesign: hasShownDesign\n      ? \"Note: You've already shown a tool design in this conversation. Check if the user is responding to it.\"\n      : \"\",\n  });\n\n  if (!systemPrompt) {\n    throw new Error(\"AI Agent system prompt not found\");\n  }\n\n  // Validate API key\n  getAPIKey(provider);\n\n  // Get the appropriate model\n  const model = getAIModel(provider, \"chat\");\n\n  // Store prisma in a variable that will be captured by the closure\n  const db = prisma;\n\n  // Define tools for the AI to use\n  const tools = {\n    // Web search tool - always available\n    web_search_preview: openai.tools.webSearchPreview({\n      searchContextSize: \"high\",\n      userLocation: {\n        type: \"approximate\",\n        city: \"San Francisco\",\n        region: \"California\",\n      },\n    }),\n\n    // MCP tool creation - only if serverId is provided\n    ...(serverId\n      ? {\n          createMCPTool: tool({\n            description:\n              \"Create an MCP tool with the provided specification. Only call this when the user has explicitly confirmed they want to create the tool.\",\n            inputSchema: z.object({\n              tool: z.object({\n                name: z.string().describe(\"The name of the tool\"),\n                description: z.string().describe(\"Clear description of what this tool does\"),\n                method: z.enum([\"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\"]).describe(\"HTTP method\"),\n                url: z.string().describe(\"The API endpoint URL\"),\n                parameters: z.object({}).passthrough().default({}).describe(\"Parameter definitions object\"),\n                requestParameterOverrides: z\n                  .object({})\n                  .passthrough()\n                  .optional()\n                  .describe(\"Direct HTTP request overrides (for GraphQL)\"),\n                responses: z.object({}).passthrough().default({}).optional().describe(\"Response definitions object\"),\n              }),\n              auth: z\n                .object({\n                  type: z.enum([\"oauth\", \"apikey\", \"none\"]).describe(\"Authentication type\"),\n                  oauth: z\n                    .object({\n                      name: z.string().describe(\"OAuth provider name\"),\n                      authorizationUrl: z.string().describe(\"OAuth authorization URL\"),\n                      tokenUrl: z.string().describe(\"OAuth token URL\"),\n                      scopes: z.array(z.string()).describe(\"Required OAuth scopes\"),\n                      clientId: z.string().optional().describe(\"OAuth client ID\"),\n                      clientSecret: z.string().optional().describe(\"OAuth client secret\"),\n                    })\n                    .optional(),\n                  apikey: z\n                    .object({\n                      name: z.string().describe(\"API key provider name\"),\n                      keyName: z.string().describe(\"Header or query parameter name for the API key\"),\n                      keyIn: z.enum([\"header\", \"query\", \"path\", \"body\"]).describe(\"Where to send the API key\"),\n                    })\n                    .optional(),\n                })\n                .optional(),\n              service: z.string().describe(\"The service name (e.g., 'github', 'slack')\"),\n            }),\n            execute: async ({ tool, auth, service }) => {\n              console.log(\"\uD83D\uDE80 [TOOL EXECUTION START] Creating MCP tool in backend\");\n              console.log(\"\uD83D\uDCCB Tool Details:\", JSON.stringify({ serverId, tenantId, tool, auth, service }, null, 2));\n              console.log(\"\uD83D\uDD0D [DEBUG] Checking db availability:\", !!db, typeof db);\n              console.log(\"\uD83D\uDD0D [DEBUG] Checking tenantId:\", tenantId);\n              console.log(\"\uD83D\uDD0D [DEBUG] Checking serverId:\", serverId);\n\n              try {\n                // Import the necessary functions\n                console.log(\"\uD83D\uDCE6 Importing required modules...\");\n                const { createTool } = await import(\"./servers.service.js\");\n                const { generateRequestOverrides } = await import(\"../utils/generateRequestOverrides.js\");\n                console.log(\"\u2705 Modules imported successfully\");\n\n                let oAuthProviderId: string | undefined;\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                let apiKeyProviderId: string | undefined;\n\n                // Create authentication providers if specified\n                if (auth && auth.type !== \"none\") {\n                  console.log(\"\uD83D\uDD10 Creating authentication provider...\", auth.type);\n\n                  if (auth.type === \"oauth\" && auth.oauth) {\n                    console.log(\"\uD83D\uDD11 Creating OAuth provider:\", auth.oauth.name);\n                    const oauthProvider = await db.oAuthProvider.create({\n                      data: {\n                        name: auth.oauth.name,\n                        clientId: auth.oauth.clientId || \"\",\n                        clientSecret: auth.oauth.clientSecret || \"\",\n                        authorizationUrl: auth.oauth.authorizationUrl,\n                        tokenUrl: auth.oauth.tokenUrl,\n                        scopes: auth.oauth.scopes || [],\n                        tenantId,\n                      },\n                    });\n                    oAuthProviderId = oauthProvider.id;\n                    console.log(\"\u2705 OAuth provider created with ID:\", oAuthProviderId);\n                  } else if (auth.type === \"apikey\" && auth.apikey) {\n                    console.log(\"\uD83D\uDD11 API Key provider configured:\", auth.apikey.name, \"for\", auth.apikey.keyIn);\n                    console.log(\n                      \"\u2705 API Key will be handled automatically during execution - not added to tool parameters\",\n                    );\n                  }\n                } else {\n                  console.log(\"\uD83D\uDD10 No authentication provider specified or auth type is 'none'\");\n                }\n\n                // Check if requestParameterOverrides was provided directly (e.g., for GraphQL)\n                let requestParameterOverrides: Record<string, RequestParamConfig> | HttpRequestOverrides;\n                if (tool.requestParameterOverrides) {\n                  console.log(\n                    \"\uD83D\uDCDD Using provided request parameter overrides:\",\n                    JSON.stringify(tool.requestParameterOverrides, null, 2),\n                  );\n                  requestParameterOverrides = tool.requestParameterOverrides;\n                } else {\n                  // Generate request overrides - this creates the proper HTTP request structure\n                  console.log(\"\uD83D\uDD27 Generating request parameter overrides...\");\n                  const httpOverrides = generateRequestOverrides((tool.parameters || {}) as Record<string, Parameter>);\n                  console.log(\"\uD83D\uDCDD Generated HTTP overrides:\", JSON.stringify(httpOverrides, null, 2));\n                  requestParameterOverrides = httpOverrides;\n                }\n\n                // Add API key to the appropriate location if configured\n                if (auth && auth.type === \"apikey\" && auth.apikey) {\n                  const template = `{{${auth.apikey.keyName}}}`;\n\n                  // Check if this is the new HTTP format\n                  const isHttpFormat = \"headers\" in requestParameterOverrides || \"query\" in requestParameterOverrides;\n\n                  if (isHttpFormat) {\n                    const httpOverrides = requestParameterOverrides as HttpRequestOverrides;\n                    switch (auth.apikey.keyIn) {\n                      case \"header\":\n                        if (!httpOverrides.headers) {\n                          httpOverrides.headers = {};\n                        }\n                        httpOverrides.headers[auth.apikey.keyName] = template;\n                        break;\n                      case \"query\":\n                        if (!httpOverrides.query) {\n                          httpOverrides.query = {};\n                        }\n                        httpOverrides.query[auth.apikey.keyName] = template;\n                        break;\n                    }\n                    requestParameterOverrides = httpOverrides;\n                  }\n\n                  console.log(\"\uD83D\uDD11 Added API key to request overrides:\", auth.apikey.keyName, \"in\", auth.apikey.keyIn);\n                }\n\n                console.log(\n                  \"\uD83D\uDCDD Final request parameter overrides:\",\n                  JSON.stringify(requestParameterOverrides, null, 2),\n                );\n\n                // Convert Zod parameters to the expected Parameter type structure\n                const convertedParameters: Record<string, Parameter> = {};\n                if (tool.parameters) {\n                  for (const [key, param] of Object.entries(tool.parameters)) {\n                    // Assume param already has the correct Parameter structure\n                    // since it comes from the AI tool specification\n                    convertedParameters[key] = param as Parameter;\n                  }\n                }\n\n                // Create the tool - note the correct parameter order\n                const toolData = {\n                  name: tool.name,\n                  description: tool.description,\n                  method: tool.method as HttpMethod,\n                  url: tool.url,\n                  parameters: convertedParameters,\n                  requestParameterOverrides: requestParameterOverrides as Record<string, RequestParamConfig> | null, // Type assertion needed for now\n                  oAuthProviderId, // Only set for OAuth\n                  apiKeyProviderId: undefined, // API keys are now embedded in parameters\n                };\n\n                console.log(\"\uD83D\uDD28 Calling createTool with data:\", JSON.stringify(toolData, null, 2));\n                console.log(\"\uD83D\uDD11 Parameters: db=\", !!db, typeof db, \"serverId=\", serverId, \"tenantId=\", tenantId);\n\n                if (!db) {\n                  throw new Error(\"Prisma client is not available in tool execution context\");\n                }\n\n                const createdTool = await createTool(db, serverId, tenantId, toolData);\n\n                console.log(\"\u2705 Tool created successfully!\");\n                console.log(\"\uD83C\uDD94 Created tool:\", JSON.stringify(createdTool, null, 2));\n\n                // Build success message with auth info\n                let successMessage = `Successfully created tool \"${tool.name}\"!`;\n                if (oAuthProviderId) {\n                  successMessage += ` OAuth authentication provider has been configured.`;\n                } else if (auth && auth.type === \"apikey\") {\n                  successMessage += ` API Key parameter has been added to the tool.`;\n                }\n                successMessage += ` The tool is now available in your workflow canvas.`;\n\n                return {\n                  success: true,\n                  message: successMessage,\n                  toolId: createdTool.id,\n                  toolName: createdTool.name,\n                  authProviderId: oAuthProviderId,\n                  authProviderType: oAuthProviderId ? \"oauth\" : auth?.type === \"apikey\" ? \"apikey\" : undefined,\n                };\n              } catch (error) {\n                console.error(\"\u274C [TOOL CREATION ERROR] Failed to create tool in backend\");\n                console.error(\"\uD83D\uDD0D Error details:\", error);\n                console.error(\"\uD83D\uDCCA Stack trace:\", error instanceof Error ? error.stack : \"No stack trace\");\n\n                // Log specific error details\n                if (error instanceof Error) {\n                  console.error(\"\uD83D\uDCCC Error name:\", error.name);\n                  console.error(\"\uD83D\uDCCC Error message:\", error.message);\n                }\n\n                return {\n                  success: false,\n                  message: `Failed to create tool: ${error instanceof Error ? error.message : \"Unknown error\"}`,\n                  error: error instanceof Error ? error.message : \"Unknown error\",\n                };\n              }\n            },\n          }),\n        }\n      : {}),\n  };\n\n  // Include conversation history if provided\n  const contextSection = conversationHistory ? `\\n\\nPrevious conversation:\\n${conversationHistory}\\n\\n` : \"\";\n  const fullPrompt = `${systemPrompt}${contextSection}Current user message: ${baseRequest.prompt}`;\n\n  // Stream the response with tools (if available)\n  const streamConfig: Parameters<typeof streamText>[0] = {\n    model,\n    prompt: fullPrompt,\n    temperature: modelConfig.temperature ?? 0.7,\n    maxOutputTokens: modelConfig.maxTokens,\n    topP: modelConfig.topP,\n    onError: (error) => {\n      console.error(\"Stream error in AI service:\", error);\n    },\n  };\n\n  // Add tools to stream config\n  console.log(\"\uD83D\uDEE0\uFE0F [AI SERVICE] Tools are defined, adding to stream config\");\n  console.log(\"\uD83D\uDD27 [AI SERVICE] Available tools:\", Object.keys(tools));\n  streamConfig.tools = tools;\n  streamConfig.toolChoice = \"auto\";\n\n  console.log(\"\uD83D\uDE80 [AI SERVICE] Starting streamText with config:\", {\n    model: streamConfig.model,\n    hasTools: !!streamConfig.tools,\n    toolChoice: streamConfig.toolChoice,\n    temperature: streamConfig.temperature,\n  });\n\n  return streamText(streamConfig);\n}\n\n// Generate mock data with centralized prompt\nexport async function generateMockData(\n  prisma: PrismaClient,\n  toolContext: {\n    toolName: string;\n    toolDescription: string;\n    method: string;\n    url: string;\n    serverName: string;\n    parameterDetails: string;\n    hasAuthFields: boolean;\n  },\n  schema: z.ZodSchema,\n  config?: AIServiceConfig,\n) {\n  const mockPrompt = PromptService.renderPrompt(\"mock-data-generation\", toolContext);\n\n  if (!mockPrompt) {\n    throw new Error(\"Mock data generation prompt not found\");\n  }\n\n  return generateStructuredObject(prisma, {\n    prompt: mockPrompt,\n    schema,\n    config: config || {},\n    tenantId: \"system\", // Internal system operation\n    userId: \"system\",\n  });\n}\n\n// Generate Handlebars template with centralized prompt\nexport async function generateHandlebarsTemplate(\n  prisma: PrismaClient,\n  toolContext: {\n    toolName: string;\n    toolDescription: string;\n    method: string;\n    url: string;\n    parameters: string;\n    responses: string;\n  },\n  config?: AIServiceConfig,\n) {\n  const templatePrompt = PromptService.renderPrompt(\"handlebars-template-generation\", toolContext);\n\n  if (!templatePrompt) {\n    throw new Error(\"Handlebars template generation prompt not found\");\n  }\n\n  return generateCompletion(prisma, {\n    prompt: templatePrompt,\n    config: config || { temperature: 0.3, maxTokens: 1000 },\n    tenantId: \"system\", // Internal system operation\n    userId: \"system\",\n  });\n}\n", "export interface PromptTemplate {\n  id: string;\n  name: string;\n  description: string;\n  content: string;\n  variables: string[];\n  category: \"system\" | \"user\" | \"tool\" | \"template\";\n  version: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\n// Static prompt service implementation\nconst prompts: Map<string, PromptTemplate> = new Map();\n\n// Initialize prompts on module load\ninitializePrompts();\n\nfunction initializePrompts() {\n  // AI Agent Chat System Prompt\n  prompts.set(\"ai-agent-system\", {\n    id: \"ai-agent-system\",\n    name: \"AI Agent System Prompt\",\n    description: \"System prompt for AI assistant specialized in creating API tools for MCP servers\",\n    content: `You are an AI assistant specialized EXCLUSIVELY in creating API tools for MCP servers. You ONLY help with API integrations, tool creation, and related technical tasks.\n\nCRITICAL BOUNDARIES:\n- You help create API tools and integrations for MCP servers\n- When users mention APIs, tools, or integrations (like \"fetch figma designs\", \"github PR\", \"weather data\"), understand they want to create MCP tools\n- Only redirect off-topic requests that are clearly unrelated (recipes, personal advice, etc.)\n- Be helpful and interpret tool-related requests correctly\n\nMANDATORY WEB SEARCH RULE:\n- You MUST search the web for API documentation BEFORE designing any tool\n- Even if you think you know the API well, search for the latest documentation\n- This ensures you have the most current endpoints, authentication methods, and parameters\n- Start your response with something like \"Let me search for the latest [API name] documentation...\"\n\nRESPONSE STYLE:\n- Be conversational but concise\n- Show your reasoning process naturally by starting thoughts with \"[THINKING] \" on separate lines\n- NEVER use [SEARCHING] or any other tags - only [THINKING] is allowed\n- Focus on understanding what the user needs and delivering it efficiently\n\nCORE CAPABILITIES:\n- Expert knowledge of REST APIs, OAuth 2.0, and API authentication patterns\n- Familiar with popular APIs (GitHub, Slack, OpenWeatherMap, Stripe, Discord, etc.)\n- Can infer common use cases from minimal context\n- Access to web search for verifying current API documentation and finding latest endpoints\n- ALWAYS use web search BEFORE creating any tool definition to get the most accurate API information\n- Do NOT create tools unless the user explicitly confirms they want the tool created\n\nWHAT MAKES A SUITABLE API FOR MCP TOOLS:\n- Must be an HTTP endpoint (REST or GraphQL)\n- REST APIs: GET, POST, PUT, DELETE, PATCH methods\n- GraphQL APIs: POST method with query/mutation in the body\n- Must return JSON or XML responses\n- Can use authentication (OAuth, API keys, Bearer tokens)\n- NOT suitable: File downloads (CSV, GTFS), SOAP services, websockets, non-HTTP protocols\n\nWEB SEARCH BEST PRACTICES:\n- When you search the web and find information, always mention the source (e.g., \"According to docs.ownid.com...\")\n- If documentation reveals important details (authentication, headers, etc.), quote them specifically\n- Web search results will be displayed to the user with clickable links\n- Look specifically for REST APIs or HTTP endpoints that can be called directly\n- If you only find data files (CSV, GTFS, etc.) or non-API solutions, BE HONEST about it\n\nCONVERSATION FLOW:\n1. When a user mentions an API or service, understand their intent\n2. ALWAYS search the web FIRST to find the latest API documentation, even if you think you know the API\n3. When web search reveals authentication requirements (HMAC, signatures, timestamps, etc.), ALWAYS include them in your tool specification\n4. After finding a suitable API (REST or GraphQL), YOU MUST create a complete JSON tool specification - this is NOT optional\n5. For GraphQL: Even if it's a simple mutation, CREATE THE TOOL SPECIFICATION\n6. If genuinely ambiguous, ask a clarifying question\n7. ALWAYS present your tool design as clean JSON with explanations, citing the sources you found\n8. ALWAYS end with: \"Does this look good? Would you like me to create it, or would you prefer any changes?\"\n9. Wait for user feedback - they might want changes or have questions\n10. Only proceed to tool creation when the user explicitly confirms with phrases like:\n    - \"yes\", \"create it\", \"looks good\", \"go ahead\", \"perfect\", \"that's correct\"\n    - NOT when they ask questions like \"did you create it?\", \"has it been created?\", \"is it done?\"\n\nIMPORTANT AUTHENTICATION RULES:\n- If web search reveals HMAC signatures, include them as header parameters\n- If timestamps are required for request validation, include them as header parameters\n- If the API uses custom authentication headers, include ALL of them\n- Don't forget path parameters like appId, organizationId, etc. that are often part of the URL\n- Include response schemas when documentation provides them\n\nCRITICAL RULE - COMPLETE THE FLOW:\nWhen you find a suitable API (REST or GraphQL), you MUST:\n1. Create the complete JSON tool specification\n2. Include all parameters, authentication, and responses\n3. End with the confirmation question\nDO NOT stop after explaining the API - you MUST provide the tool specification!\n\nVIOLATION WARNING: If you explain an API without providing the JSON tool specification, you are FAILING to complete your task!\n\nTOOL SPECIFICATION FORMAT:\nOnly create tool specifications for HTTP endpoints (REST or GraphQL). When you've found a suitable API, present the tool specification in a JSON code block (use triple backticks with json language identifier):\n\n{\n  \"tool\": {\n    \"name\": \"descriptiveName\",\n    \"description\": \"Clear description of what this tool does\",\n    \"method\": \"GET/POST/PUT/DELETE\",\n    \"url\": \"https://api.example.com/endpoint/{params}\",\n    \"parameters\": {\n      \"paramName\": {\n        \"name\": \"paramName\",\n        \"description\": \"What this parameter is for\",\n        \"schema\": {\n          \"type\": \"string/number/boolean\",\n          \"description\": \"Same description for API validation\"\n        },\n        \"required\": true/false,\n        \"in\": \"path/query/header/body\"\n      }\n    },\n    \"responses\": {\n      \"200\": { \"statusCode\": 200, \"description\": \"Success\" }\n    }\n  },\n  \"auth\": {\n    \"type\": \"oauth/apikey\",\n    \"oauth\": {\n      \"name\": \"ServiceName OAuth\",\n      \"authorizationUrl\": \"https://...\",\n      \"tokenUrl\": \"https://...\",\n      \"scopes\": [\"scope1\", \"scope2\"]\n    },\n    \"apikey\": {\n      \"name\": \"ServiceName API\",\n      \"keyName\": \"API-Key-Header-Name\",\n      \"keyIn\": \"header/query\"\n    }\n  },\n  \"service\": \"ServiceName\"\n}\n\nNote: Always wrap your JSON specification in a markdown code block with triple backticks and 'json' language identifier.\n\nFor REST APIs: The system will automatically generate requestParameterOverrides from your parameters.\nFor GraphQL: You MUST include requestParameterOverrides with the hardcoded query/mutation.\n\nGRAPHQL SPECIFIC FORMAT:\nFor GraphQL endpoints, always use:\n- method: \"POST\"\n- url: The GraphQL endpoint URL (usually ends with /graphql)\n- parameters: {} (empty object if no variables), or only variable parameters\n- requestParameterOverrides: ALWAYS include this with the hardcoded query/mutation\n  - body: { \"query\": \"your GraphQL query here\" } (add \"variables\" only if needed)\n  - headers: { \"Content-Type\": \"application/json\" }\n- DO NOT make the query itself a parameter - it should be hardcoded in requestParameterOverrides\n\nWHY: The GraphQL query/mutation is part of the API definition, not a runtime parameter. By hardcoding it in requestParameterOverrides, the tool becomes easier to use and the query is guaranteed to be correct.\n\nAfter presenting the specification, ALWAYS ask: \"Does this look good? Would you like me to create it, or would you prefer any changes?\"\n\nNEVER skip this question - it's required for the flow to continue!\n\nEXAMPLE WHEN NO API FOUND:\n\"Let me search for the latest Mallorca bus schedule API documentation...\n\n[THINKING] I'm searching for REST APIs that provide Mallorca bus schedules\n\nI searched for Mallorca bus schedule APIs, but I couldn't find a suitable REST API. What I found instead:\n- The CTM (Consorcio de Transportes de Mallorca) provides GTFS files that need to be downloaded\n- This is static data in file format, not a REST API endpoint\n\nUnfortunately, GTFS files aren't suitable for MCP tools because they require downloading and parsing files rather than making HTTP API calls. \n\nFor bus schedule data, you might want to:\n1. Look for third-party transit APIs that serve GTFS data via REST endpoints\n2. Check if there's a regional transport API that includes Mallorca\n3. Consider APIs like Transitland or OpenTripPlanner that might have imported this data\n\nWould you like me to search for alternative transit APIs that might cover Mallorca?\"\n\nEXAMPLE OF COMPLETE FLOW (OpenWeatherMap):\nUser: \"I need to get weather for Mallorca\"\nAssistant: Let me search for the latest OpenWeatherMap API documentation to find how we can retrieve weather for Mallorca.\n\n[THINKING] I'm searching for REST APIs providing weather data, specifically OpenWeatherMap, as it's a popular choice.\n\nAccording to OpenWeatherMap's documentation (openweathermap.org), their API provides comprehensive weather data worldwide. Here's a tool to get weather for Mallorca:\n\n\\`\\`\\`json\n{\n  \"tool\": {\n    \"name\": \"getMallorcaWeather\",\n    \"description\": \"Get current weather data for any location in Mallorca using OpenWeatherMap API\",\n    \"method\": \"GET\",\n    \"url\": \"https://api.openweathermap.org/data/2.5/weather\",\n    \"parameters\": {\n      \"q\": {\n        \"name\": \"q\",\n        \"description\": \"City name in Mallorca (e.g., 'Palma,ES', 'Inca,ES', 'Manacor,ES')\",\n        \"schema\": {\n          \"type\": \"string\",\n          \"description\": \"City name with country code\"\n        },\n        \"required\": true,\n        \"in\": \"query\"\n      },\n      \"lat\": {\n        \"name\": \"lat\",\n        \"description\": \"Latitude coordinate (e.g., 39.5696 for Palma)\",\n        \"schema\": {\n          \"type\": \"number\",\n          \"description\": \"Latitude coordinate\"\n        },\n        \"required\": false,\n        \"in\": \"query\"\n      },\n      \"lon\": {\n        \"name\": \"lon\",\n        \"description\": \"Longitude coordinate (e.g., 2.6502 for Palma)\",\n        \"schema\": {\n          \"type\": \"number\",\n          \"description\": \"Longitude coordinate\"\n        },\n        \"required\": false,\n        \"in\": \"query\"\n      },\n      \"units\": {\n        \"name\": \"units\",\n        \"description\": \"Units of measurement. standard, metric and imperial units are available\",\n        \"schema\": {\n          \"type\": \"string\",\n          \"enum\": [\"standard\", \"metric\", \"imperial\"],\n          \"default\": \"metric\",\n          \"description\": \"Temperature units\"\n        },\n        \"required\": false,\n        \"in\": \"query\"\n      },\n      \"lang\": {\n        \"name\": \"lang\",\n        \"description\": \"Language for weather descriptions (e.g., 'es' for Spanish, 'en' for English)\",\n        \"schema\": {\n          \"type\": \"string\",\n          \"description\": \"Language code\"\n        },\n        \"required\": false,\n        \"in\": \"query\"\n      }\n    },\n    \"responses\": {\n      \"200\": {\n        \"statusCode\": 200,\n        \"description\": \"Successful response with weather data\"\n      },\n      \"404\": {\n        \"statusCode\": 404,\n        \"description\": \"City not found\"\n      },\n      \"401\": {\n        \"statusCode\": 401,\n        \"description\": \"Invalid API key\"\n      }\n    }\n  },\n  \"auth\": {\n    \"type\": \"apikey\",\n    \"apikey\": {\n      \"name\": \"OpenWeatherMap API\",\n      \"keyName\": \"appid\",\n      \"keyIn\": \"query\"\n    }\n  },\n  \"service\": \"openweathermap\"\n}\n\\`\\`\\`\n\nThis tool will let you get current weather for any city in Mallorca. You can either use city names (like \"Palma,ES\") or coordinates. The API key will be added automatically as a query parameter.\n\nDoes this look good? Would you like me to create it, or would you prefer any changes?\"\n\nEXAMPLE OF GRAPHQL FLOW (Adobe Commerce):\nUser: \"I want to create an empty cart for a guest user using Adobe Commerce GraphQL\"\nAssistant: Let me search for the latest Adobe Commerce GraphQL API documentation to find how to create an empty cart for guest users.\n\n[THINKING] Adobe Commerce (Magento) uses GraphQL for many operations. Let me find the specific mutation for creating guest carts.\n\nAccording to Adobe Commerce documentation (developer.adobe.com), their GraphQL API provides cart management capabilities. The createGuestCart mutation creates an empty shopping cart for a guest user. Here's a tool to create an empty cart:\n\n\\`\\`\\`json\n{\n  \"tool\": {\n    \"name\": \"createGuestCart\",\n    \"description\": \"Create an empty cart for a guest user in Adobe Commerce\",\n    \"method\": \"POST\",\n    \"url\": \"https://your-store.com/graphql\",\n    \"parameters\": {},\n    \"requestParameterOverrides\": {\n      \"body\": {\n        \"query\": \"mutation { createGuestCart { cart { id } } }\"\n      },\n      \"headers\": {\n        \"Content-Type\": \"application/json\"\n      }\n    },\n    \"responses\": {\n      \"200\": {\n        \"statusCode\": 200,\n        \"description\": \"Returns the cart ID as a string\"\n      }\n    }\n  },\n  \"auth\": {\n    \"type\": \"none\"\n  },\n  \"service\": \"adobe-commerce\"\n}\n\\`\\`\\`\n\nThis tool will create an empty cart for a guest user and return the cart ID. The cart ID can then be used for subsequent operations like adding items or checking out.\n\nNote: The GraphQL mutation is hardcoded in the requestParameterOverrides, so users don't need to pass it as a parameter.\n\nDoes this look good? Would you like me to create it, or would you prefer any changes?\"\n\nEXAMPLE OF GRAPHQL WITH VARIABLES:\nFor GraphQL operations that need variables, include them as parameters:\n\n\\`\\`\\`json\n{\n  \"tool\": {\n    \"name\": \"addProductToCart\",\n    \"description\": \"Add a product to the cart\",\n    \"method\": \"POST\",\n    \"url\": \"https://your-store.com/graphql\",\n    \"parameters\": {\n      \"cartId\": {\n        \"name\": \"cartId\",\n        \"description\": \"The cart ID\",\n        \"schema\": { \"type\": \"string\" },\n        \"required\": true,\n        \"in\": \"body\"\n      },\n      \"sku\": {\n        \"name\": \"sku\",\n        \"description\": \"Product SKU to add\",\n        \"schema\": { \"type\": \"string\" },\n        \"required\": true,\n        \"in\": \"body\"\n      },\n      \"quantity\": {\n        \"name\": \"quantity\",\n        \"description\": \"Quantity to add\",\n        \"schema\": { \"type\": \"number\", \"minimum\": 1 },\n        \"required\": true,\n        \"in\": \"body\"\n      }\n    },\n    \"requestParameterOverrides\": {\n      \"body\": {\n        \"query\": \"mutation($cartId: String!, $sku: String!, $qty: Float!) { addSimpleProductsToCart(input: { cart_id: $cartId, cart_items: [{ data: { sku: $sku, quantity: $qty } }] }) { cart { items { product { name } quantity } } } }\",\n        \"variables\": {\n          \"cartId\": \"{{toolParams.cartId}}\",\n          \"sku\": \"{{toolParams.sku}}\",\n          \"qty\": \"{{toolParams.quantity}}\"\n        }\n      },\n      \"headers\": {\n        \"Content-Type\": \"application/json\"\n      }\n    }\n  }\n}\n\\`\\`\\`\n\nCRITICAL - TOOL-BASED CREATION:\n- You have access to a 'createMCPTool' tool that you MUST use to create tools\n- Only call this tool AFTER the user explicitly confirms they want to create the tool\n- The tool takes the complete specification (tool, auth, service) as parameters\n- When the tool call succeeds, the tool is actually created in the system\n- Never claim to have created a tool without actually calling the createMCPTool function\n- IMPORTANT: When the user confirms, you MUST immediately call the createMCPTool tool in your response\n- Do NOT say \"I'll proceed with creation\" - just call the tool directly\n- The tool call should happen in the same message where you acknowledge the confirmation\n\nCREATION STATUS TRACKING:\n- Keep track of what you've shown vs. what you've actually created\n- If you've only shown a design, you HAVE NOT created the tool yet\n- If a user asks \"did you create it?\" or similar:\n  - If you only showed the design: \"I've shown you the design, but haven't created it yet. Would you like me to create it now?\"\n  - If you actually called createMCPTool: \"Yes, I've successfully created the tool [name]. It's now available in your workflow.\"\n- Never claim to have created something without calling the createMCPTool tool\n\nAUTHENTICATION PATTERNS:\n- OAuth: GitHub, Slack, Google, Salesforce typically use OAuth 2.0\n- API Keys in headers: Stripe (Bearer token), OpenAI (Bearer token), SendGrid\n- API Keys in query: OpenWeatherMap (appid), some older APIs\n- No auth: Some public APIs don't require authentication\n\nWHEN NO SUITABLE API IS FOUND:\n- Be HONEST and direct: \"I searched but couldn't find a REST API for [service]. I found [what you found] instead.\"\n- Explain why it's not suitable: \"GTFS files need to be downloaded and parsed, which isn't suitable for MCP API tools\"\n- Suggest alternatives if possible: \"You might want to look for a third-party API that serves this data\"\n- Don't try to force a solution that won't work as an MCP tool\n- Don't create vague or incomplete tool definitions\n\nIMPORTANT GUIDELINES:\n- Read the conversation context to understand if the user already approved a design\n- CONFIRMATION vs QUESTIONS: Distinguish between:\n  - Confirmations: \"yes\", \"create it\", \"looks good\", \"go ahead\", \"that's right\", \"perfect\"\n  - Status questions: \"did you create it?\", \"has it been created?\", \"is it done?\"\n  - Respond to questions about status honestly - don't confuse them with confirmations\n- If they provide feedback or ask questions, address those before creating\n- Never create a tool without showing the complete specification first\n- Never claim creation success without actual confirmation from the user\n- Be helpful and explain your choices when relevant\n- When creation is successful, ALWAYS mention the tool is \"now available in your workflow canvas\"\n\nTOOL CALLING FORMAT:\nWhen user confirms, you MUST call the tool like this:\n1. Acknowledge the confirmation briefly\n2. Call createMCPTool with the exact specification you showed\n3. Let the tool execution complete\n4. The system will show the result automatically\n\nRemember: Good conversation is about understanding intent and responding appropriately. Questions about status are NOT confirmations to proceed.`,\n    variables: [],\n    category: \"system\",\n    version: \"1.0.0\",\n    createdAt: new Date(),\n    updatedAt: new Date(),\n  });\n\n  // Mock Data Generation Prompt\n  prompts.set(\"mock-data-generation\", {\n    id: \"mock-data-generation\",\n    name: \"Mock Data Generation Prompt\",\n    description: \"Generate realistic mock data for API tool testing\",\n    content: `You are an AI assistant helping developers test API tools by generating realistic mock data.\n\nTool Information:\n- Name: {{toolName}}\n- Description: {{toolDescription}}\n- Method: {{method}} {{url}}\n- Server: {{serverName}}\n\nParameters to populate:\n{{parameterDetails}}\n\nTask: Generate realistic, contextually appropriate mock data for each parameter. Consider:\n1. The tool's purpose and domain (e.g., user management, e-commerce, analytics)\n2. Realistic data types and formats\n3. Meaningful relationships between parameters\n4. Industry standards and common patterns\n\nFor example:\n- Email fields should use realistic email addresses\n- Names should be common first/last names\n- IDs should follow typical patterns (UUIDs, incremental numbers)\n- Dates should be reasonable and properly formatted\n- Objects/arrays should contain meaningful nested data\n\nSpecial Instructions for Authentication Fields:\n- For API keys, tokens, or auth headers: Generate realistic-looking but fake values (e.g., \"sk-test-1234567890abcdef\" for API keys, \"Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...\" for tokens)\n- These are for testing purposes only and will not work with real APIs\n\nImportant: {{#if hasAuthFields}}This tool contains authentication/authorization fields. In your reasoning, include a warning that mock authentication data will likely result in 401/403 errors when testing, and real credentials should be configured through the authorization system.{{else}}Consider if any fields might be related to authentication or authorization.{{/if}}\n\nProvide:\n1. Generated parameter values as a key-value object\n2. Brief reasoning for your choices{{#if hasAuthFields}} (include authentication warning){{/if}}\n3. Confidence score (0-1) for the quality of generated data\n\nReturn the response in the exact JSON format specified.`,\n    variables: [\"toolName\", \"toolDescription\", \"method\", \"url\", \"serverName\", \"parameterDetails\", \"hasAuthFields\"],\n    category: \"tool\",\n    version: \"1.0.0\",\n    createdAt: new Date(),\n    updatedAt: new Date(),\n  });\n\n  // Handlebars Template Generation Prompt\n  prompts.set(\"handlebars-template-generation\", {\n    id: \"handlebars-template-generation\",\n    name: \"Handlebars Template Generation\",\n    description: \"Generate agent-optimized Handlebars response templates\",\n    content: `You are an expert in Handlebars templating for AI agent response formatting. Your task is to create an agent-optimized response template for the following API tool.\n\n**CRITICAL WARNING**: You MUST NOT use any custom Handlebars helpers like (eq), (gt), (lt), (ne), etc. These will cause template errors. Only use built-in helpers like {{#if}}, {{#each}}, and {{json}}.\n\n# Tool Context:\n- **Name**: {{toolName}}\n- **Description**: {{toolDescription}}\n- **Method**: {{method}}\n- **URL**: {{url}}\n- **Parameters**: {{parameters}}\n- **Expected Responses**: {{responses}}\n\n# Key Requirements:\n1. **FOR AGENTS, NOT HUMANS**: The response must be structured for AI agent consumption\n2. **ACTIONABLE DATA**: Focus on data that agents can use for decision-making\n3. **CONSISTENT STRUCTURE**: Use consistent formatting for similar data types\n4. **MINIMAL PROSE**: Avoid human-friendly explanations, use structured data\n5. **ERROR HANDLING**: Handle missing/null values gracefully\n\n# Handlebars Expertise:\nYou have access to these variables:\n- \\`{{response.data.body}}\\` - The API response body\n- \\`{{response.data.headers}}\\` - Response headers\n- \\`{{request.data.parameters}}\\` - Request parameters\n- \\`{{request.data.payload}}\\` - Request payload\n\n# Handlebars Helpers (Built-in Only):\n- \\`{{#each array}}\\` - Loop through arrays\n- \\`{{#if condition}}\\` - Conditional rendering (only checks truthy/falsy)\n- \\`{{@key}}\\` - Current key in each loop\n- \\`{{this}}\\` - Current value in each loop\n- \\`{{json object}}\\` - JSON stringify an object\n\n**CRITICAL**: NEVER use \\`eq\\`, \\`gt\\`, \\`lt\\`, \\`ne\\`, or any custom helpers. They will cause errors.\n**ONLY** use \\`{{#if}}\\` to check if values exist (truthy/falsy), NOT for comparisons.\n**BOOLEAN WARNING**: \\`{{#if field}}\\` treats \\`false\\` as falsy! For boolean fields, use direct output: \\`{{field}}\\`\n\n# Agent-Focused Template Examples:\n\n## Example 1: Simple Response\n\\`\\`\\`\n{{#if response.data.body}}\nRESPONSE: {{response.data.body}}\nSTATUS: SUCCESS\n{{else}}\nSTATUS: NO_RESPONSE\n{{/if}}\n\\`\\`\\`\n\n## Example 2: Object Response with Boolean\n\\`\\`\\`\n{{#if response.data.body}}\n{{#if response.data.body.id}}\nID: {{response.data.body.id}}\n{{/if}}\n{{#if response.data.body.name}}\nNAME: {{response.data.body.name}}\n{{/if}}\nACTIVE: {{response.data.body.active}}\nCOMPLETED: {{response.data.body.completed}}\n{{else}}\nSTATUS: NO_DATA\n{{/if}}\n\\`\\`\\`\n\n## Example 3: Array Response\n\\`\\`\\`\n{{#if response.data.body}}\n{{#each response.data.body}}\nITEM_{{@index}}:\n{{#if this.id}}\n- ID: {{this.id}}\n{{/if}}\n{{#if this.name}}\n- NAME: {{this.name}}\n{{/if}}\n{{/each}}\n{{else}}\nSTATUS: NO_ITEMS\n{{/if}}\n\\`\\`\\`\n\n# Your Task:\nAnalyze the tool context and create a response template that:\n1. Extracts the most relevant data fields for agent decision-making\n2. Uses consistent field naming (UPPERCASE labels)\n3. Handles arrays and objects appropriately\n4. Provides fallbacks for missing data\n5. Maintains a structured, parseable format\n\n**CRITICAL CONSTRAINTS**:\n- NEVER use (eq), (gt), (lt), (ne), or any custom helpers - they will break the template\n- Use ONLY {{#if}}, {{#each}}, {{json}}, {{@key}}, {{this}}, {{@index}}\n- For string comparisons, do NOT compare - just check if the field exists\n- Structure conditions using nested \\`{{#if}}\\` blocks\n- Always provide fallback values for missing data\n- Keep templates simple and direct\n- **BOOLEAN FIELDS**: Use direct output \\`{{field}}\\` not \\`{{#if field}}\\` (false is falsy!)\n\n**FORBIDDEN**: Do NOT use any parentheses with helpers like (eq response.data.body \"text\")\n**ALLOWED**: Only use {{#if response.data.body}} to check existence\n**BOOLEAN HANDLING**: Use \\`COMPLETED: {{response.data.body.completed}}\\` not \\`{{#if response.data.body.completed}}\\`\n\nReturn ONLY the Handlebars template code, no explanations.`,\n    variables: [\"toolName\", \"toolDescription\", \"method\", \"url\", \"parameters\", \"responses\"],\n    category: \"template\",\n    version: \"1.0.0\",\n    createdAt: new Date(),\n    updatedAt: new Date(),\n  });\n}\n\nexport const PromptService = {\n  /**\n   * Get a prompt template by ID\n   */\n  getPrompt(id: string): PromptTemplate | null {\n    return prompts.get(id) || null;\n  },\n\n  /**\n   * Get all prompts\n   */\n  getAllPrompts(): PromptTemplate[] {\n    return Array.from(prompts.values());\n  },\n\n  /**\n   * Get prompts by category\n   */\n  getPromptsByCategory(category: PromptTemplate[\"category\"]): PromptTemplate[] {\n    return Array.from(prompts.values()).filter((prompt) => prompt.category === category);\n  },\n\n  /**\n   * Render a prompt with variables\n   */\n  renderPrompt(id: string, variables: Record<string, string | boolean | number> = {}): string | null {\n    const prompt = this.getPrompt(id);\n    if (!prompt) return null;\n\n    let content = prompt.content;\n\n    // Simple template variable replacement\n    for (const [key, value] of Object.entries(variables)) {\n      const pattern = new RegExp(`{{${key}}}`, \"g\");\n      content = content.replace(pattern, String(value));\n    }\n\n    // Handle conditional blocks {{#if variable}}...{{else}}...{{/if}}\n    content = content.replace(\n      /{{#if\\s+(\\w+)}}([\\s\\S]*?)(?:{{else}}([\\s\\S]*?))?{{\\/if}}/g,\n      (match, variable, ifContent, elseContent = \"\") => {\n        const value = variables[variable];\n        return value ? ifContent : elseContent;\n      },\n    );\n\n    return content;\n  },\n\n  /**\n   * Add or update a prompt template\n   */\n  setPrompt(prompt: PromptTemplate): void {\n    prompts.set(prompt.id, {\n      ...prompt,\n      updatedAt: new Date(),\n    });\n  },\n\n  /**\n   * Delete a prompt template\n   */\n  deletePrompt(id: string): boolean {\n    return prompts.delete(id);\n  },\n\n  /**\n   * Check if a prompt exists\n   */\n  hasPrompt(id: string): boolean {\n    return prompts.has(id);\n  },\n\n  /**\n   * Get prompt variables\n   */\n  getPromptVariables(id: string): string[] {\n    const prompt = this.getPrompt(id);\n    return prompt ? prompt.variables : [];\n  },\n};\n", "import { NextFunction, Request, Response } from \"express\";\n\ninterface RateLimitOptions {\n  windowMs: number; // Time window in milliseconds\n  max: number; // Max requests per window\n  message?: string; // Error message\n}\n\n// Simple in-memory rate limiter\n// In production, consider using redis or a dedicated rate limiting service\nconst requestCounts = new Map<string, { count: number; resetTime: number }>();\n\nexport function rateLimitMiddleware(options: RateLimitOptions) {\n  const { windowMs, max, message = \"Too many requests, please try again later\" } = options;\n\n  return (req: Request, res: Response, next: NextFunction) => {\n    // Create a unique key for the client\n    // Using tenant ID and user ID if available, otherwise IP\n    const authReq = req as unknown as {\n      admin?: { tenantId: string; id: string };\n      user?: { tenantId: string; id: string };\n    };\n    const admin = authReq.admin;\n    const user = authReq.user;\n    const tenantId = admin?.tenantId || user?.tenantId;\n    const userId = admin?.id || user?.id;\n    const clientIp = req.ip || req.socket.remoteAddress || \"unknown\";\n    const key = `${tenantId || \"no-tenant\"}_${userId || clientIp}`;\n\n    const now = Date.now();\n\n    // Get or create rate limit data for this key\n    let rateLimit = requestCounts.get(key);\n\n    // Reset if window has expired\n    if (!rateLimit || rateLimit.resetTime < now) {\n      rateLimit = { count: 0, resetTime: now + windowMs };\n      requestCounts.set(key, rateLimit);\n    }\n\n    // Increment request count\n    rateLimit.count++;\n\n    // Check if limit exceeded\n    if (rateLimit.count > max) {\n      res.status(429).json({\n        error: \"Rate limit exceeded\",\n        message,\n        retryAfter: Math.ceil((rateLimit.resetTime - now) / 1000),\n      });\n      return;\n    }\n\n    // Set rate limit headers\n    res.setHeader(\"X-RateLimit-Limit\", max.toString());\n    res.setHeader(\"X-RateLimit-Remaining\", (max - rateLimit.count).toString());\n    res.setHeader(\"X-RateLimit-Reset\", new Date(rateLimit.resetTime).toISOString());\n\n    next();\n  };\n}\n\n// Cleanup old entries periodically (every 5 minutes)\nsetInterval(\n  () => {\n    const now = Date.now();\n    for (const [key, data] of requestCounts.entries()) {\n      if (data.resetTime < now) {\n        requestCounts.delete(key);\n      }\n    }\n  },\n  5 * 60 * 1000,\n);\n", "import { Router } from \"express\";\nimport { getServerAnalytics, getToolAnalytics } from \"../controllers/analytics.controller.js\";\n\nconst router: Router = Router();\n\nrouter.get(\"/:serverId/analytics\", getServerAnalytics);\nrouter.get(\"/:serverId/tools/:toolId/analytics\", getToolAnalytics);\n\nexport default router;\n", "import { client, v2 } from \"@datadog/datadog-api-client\";\nimport { isLocalRun } from \"../utils/config.js\";\nimport { getAppSecrets } from \"./secrets.service.js\";\n\nconst datadogMetricsClient = (async () => {\n  const appSecrets = await getAppSecrets();\n  return new v2.MetricsApi(\n    client.createConfiguration({\n      authMethods: {\n        apiKeyAuth: appSecrets.datadogApiKey,\n        appKeyAuth: appSecrets.datadogAppKey,\n      },\n    }),\n  );\n})();\n\nexport const queryTimeseriesData = async (\n  formulas: {\n    metric: string;\n    aggregator: \"sum\" | \"avg\";\n    tagFilters: Record<string, string>;\n    by: string[] | null;\n  }[],\n  fromMillis: number,\n  toMillis: number,\n): Promise<v2.TimeseriesResponse> => {\n  const request: v2.MetricsApiQueryTimeseriesDataRequest = {\n    body: {\n      data: {\n        type: \"timeseries_request\",\n        attributes: {\n          from: fromMillis,\n          to: toMillis,\n          interval: 60 * 60 * 24 * 1000, // 1 day\n          formulas: formulas.map(({ metric, aggregator, tagFilters, by }) => ({\n            formula: `${aggregator}:${metric}{${\n              isLocalRun\n                ? \"*\"\n                : Object.entries(tagFilters)\n                    .map(([k, v]) => `${k}:\"${v}\"`)\n                    .join(\" AND \")\n            }} ${by ? `by {${by.join(\",\")}}` : \"\"}`,\n          })),\n          queries: [],\n        },\n      },\n    },\n  };\n  const res = await (await datadogMetricsClient).queryTimeseriesData(request);\n  if (!res.data) {\n    throw new Error(`Datadog API request failed: ${JSON.stringify(res)}`);\n  }\n  return res.data;\n};\n", "import { type AnalyticsDataPoint, TimeSeriesData } from \"@agentbridge/api\";\nimport { v2 } from \"@datadog/datadog-api-client\";\nimport { Request, Response } from \"express\";\nimport { Logger } from \"winston\";\nimport { queryTimeseriesData } from \"../services/datadog.service.js\";\nimport { isAppRequest, TypeGuardError } from \"../utils/req-guards.js\";\n\nconst ONE_DAY_IN_MS = 60 * 60 * 24 * 1000;\n\nconst METRICS = {\n  EXECUTION_COUNT: \"agentbridge.tool.execution.count\",\n  EXECUTION_DURATION: \"agentbridge.tool.execution.duration\",\n};\n\nconst TAGS = {\n  TOOL_ID: \"toolid\",\n  SERVER_ID: \"serverid\",\n  FAILED: \"failed\",\n};\n\ntype Analytics = {\n  total: AnalyticsDataPoint;\n  timeSeriesData: TimeSeriesData[];\n};\n\nconst seriesValue = (\n  timeseriesResponse: v2.TimeseriesResponse,\n  seriesIndex: number | null,\n  pointIndex: number,\n): number =>\n  seriesIndex !== null ? ((timeseriesResponse.attributes?.values?.[seriesIndex][pointIndex] || 0) as number) : 0;\n\nconst aggregateResults = (seriesResponse: v2.TimeseriesResponse): Analytics => {\n  const analytics: Analytics = {\n    total: {\n      requests: 0,\n      successCount: 0,\n      failureCount: 0,\n      avgResponseTime: 0,\n    },\n    timeSeriesData: [],\n  };\n\n  let successCountIndex: number | null = null,\n    failureCountIndex: number | null = null,\n    durationIndex: number | null = null;\n\n  seriesResponse.attributes?.series?.forEach((series, index) => {\n    const isCounter = series.queryIndex === 0;\n    if (isCounter) {\n      const isSuccess = series.groupTags?.includes(`${TAGS.FAILED}:false`);\n      if (isSuccess) {\n        successCountIndex = index;\n      } else {\n        failureCountIndex = index;\n      }\n    } else {\n      durationIndex = index;\n    }\n  });\n\n  seriesResponse.attributes?.times?.forEach((ts, index) => {\n    const successValue = seriesValue(seriesResponse, successCountIndex, index);\n    const failureValue = seriesValue(seriesResponse, failureCountIndex, index);\n    const durationValue = seriesValue(seriesResponse, durationIndex, index);\n    analytics.timeSeriesData.push({\n      avgResponseTime: durationValue,\n      failureCount: failureValue,\n      requests: failureValue + successValue,\n      successCount: successValue,\n      date: new Date(ts).toISOString(),\n    });\n    analytics.total.requests += successValue + failureValue;\n    analytics.total.successCount += successValue;\n    analytics.total.failureCount += failureValue;\n    analytics.total.avgResponseTime += durationValue * (successValue + failureValue);\n  });\n\n  analytics.total.avgResponseTime =\n    analytics.total.requests > 0 ? analytics.total.avgResponseTime / analytics.total.requests : 0;\n\n  return analytics;\n};\n\nasync function fetchMetrics(\n  logger: Logger,\n  serverId: string,\n  toolId: string | null,\n  fromTime: number, // epoch time in milliseconds\n  toTime: number, // epoch time in milliseconds\n): Promise<Analytics> {\n  try {\n    const tagFilters: Record<string, string> = {\n      [TAGS.SERVER_ID]: serverId,\n      ...(toolId ? { [TAGS.TOOL_ID]: toolId } : {}),\n    };\n    const timeSeriesResponse = await queryTimeseriesData(\n      [\n        {\n          metric: METRICS.EXECUTION_COUNT,\n          aggregator: \"sum\",\n          tagFilters,\n          by: [TAGS.FAILED],\n        },\n        {\n          metric: METRICS.EXECUTION_DURATION,\n          aggregator: \"avg\",\n          tagFilters,\n          by: null,\n        },\n      ],\n      fromTime,\n      toTime,\n    );\n    return aggregateResults(timeSeriesResponse);\n  } catch (error) {\n    logger.error(\"Error fetching metrics from Datadog\", error);\n  }\n  return {\n    total: {\n      requests: 0,\n      successCount: 0,\n      failureCount: 0,\n      avgResponseTime: 0,\n    },\n    timeSeriesData: [],\n  };\n}\n\nconst getTimeFrame = (req: Request<unknown, object, object, { from: string; to: string }>) => {\n  const fromTime = req.query.from ? new Date(req.query.from).getTime() : Date.now() - 30 * ONE_DAY_IN_MS;\n  const toTime = req.query.to ? new Date(req.query.to).getTime() : Date.now();\n  return { fromTime, toTime };\n};\n\nexport const getServerAnalytics = async (\n  req: Request<{ serverId: string }, object, object, { from: string; to: string }>,\n  res: Response,\n) => {\n  if (!isAppRequest(req)) {\n    throw new TypeGuardError();\n  }\n  req.logger.debug(\"Getting server analytics\", {\n    serverId: req.params.serverId,\n    timeRange: `${req.query.from}-${req.query.to}`,\n  });\n\n  const { fromTime, toTime } = getTimeFrame(req);\n  const analytics = await fetchMetrics(req.logger, req.params.serverId, null, fromTime, toTime);\n  res.json(analytics);\n};\n\nexport const getToolAnalytics = async (\n  req: Request<{ serverId: string; toolId: string }, object, object, { from: string; to: string }>,\n  res: Response,\n) => {\n  if (!isAppRequest(req)) {\n    throw new TypeGuardError();\n  }\n\n  req.logger.debug(\"Getting tool analytics\", {\n    serverId: req.params.serverId,\n    toolId: req.params.toolId,\n    timeRange: `${req.query.from}-${req.query.to}`,\n  });\n\n  const { fromTime, toTime } = getTimeFrame(req);\n  const analytics = await fetchMetrics(req.logger, req.params.serverId, req.params.toolId, fromTime, toTime);\n  res.json(analytics);\n};\n", "import { Router } from \"express\";\nimport { createFolder, deleteFolder, listFolders, updateFolder } from \"../controllers/folders.controller.js\";\n\nconst router: Router = Router();\n\nrouter.get(\"/:serverId/folders\", listFolders);\nrouter.post(\"/:serverId/folders\", createFolder);\nrouter.put(\"/:serverId/folders/:folderId\", updateFolder);\nrouter.delete(\"/:serverId/folders/:folderId\", deleteFolder);\n\nexport default router;\n", "import { Folder } from \"@agentbridge/api\";\nimport { Request, Response } from \"express\";\nimport { StatusCodes } from \"http-status-codes\";\nimport * as foldersService from \"../services/folders.service.js\";\nimport { isAdminRequest, TypeGuardError } from \"../utils/req-guards.js\";\n\nexport const listFolders = async (req: Request<{ serverId: string }>, res: Response) => {\n  if (!isAdminRequest(req)) {\n    throw new TypeGuardError();\n  }\n  req.logger.debug(\"Listing folders\", { serverId: req.params.serverId, tenantId: req.admin.tenantId });\n  try {\n    const folders: Folder[] = await foldersService.listFolders(req.db, req.params.serverId, req.admin.tenantId);\n    res.json(folders);\n  } catch (error) {\n    req.logger.error(\"Failed to list folders\", error);\n    res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({\n      error: \"internal_server_error\",\n      errorDescription: \"Failed to list folders\",\n    });\n  }\n};\n\nexport const createFolder = async (\n  req: Request<{ serverId: string }, object, { name: string; parentFolderId: string }>,\n  res: Response,\n) => {\n  if (!isAdminRequest(req)) {\n    throw new TypeGuardError();\n  }\n\n  req.logger.info(\"Creating folder\", { serverId: req.params.serverId, body: req.body });\n  try {\n    if (!req.admin.tenantId) {\n      return res.status(StatusCodes.UNAUTHORIZED).json({\n        error: \"unauthorized\",\n        errorDescription: \"Tenant ID is required\",\n      });\n    }\n\n    const folder: Folder = await foldersService.createFolder(\n      req.db,\n      req.params.serverId,\n      req.admin.tenantId,\n      req.body.name,\n      req.body.parentFolderId,\n    );\n\n    res.status(StatusCodes.CREATED).json(folder);\n  } catch (error) {\n    req.logger.error(\"Failed to create folder\", error);\n    res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({\n      error: \"internal_server_error\",\n      errorDescription: \"Failed to create folder\",\n    });\n  }\n};\n\nexport const updateFolder = async (\n  req: Request<{ serverId: string; folderId: string }, object, { name: string }>,\n  res: Response,\n) => {\n  if (!isAdminRequest(req)) {\n    throw new TypeGuardError();\n  }\n\n  req.logger.info(\"Updating folder\", {\n    serverId: req.params.serverId,\n    folderId: req.params.folderId,\n    body: req.body,\n    tenantId: req.admin.tenantId,\n  });\n\n  try {\n    const folder: Folder = await foldersService.updateFolder(\n      req.db,\n      req.params.folderId,\n      req.params.serverId,\n      req.admin.tenantId,\n      req.body.name,\n    );\n\n    res.json(folder);\n  } catch (error) {\n    req.logger.error(\"Failed to update folder\", error);\n    res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({\n      error: \"internal_server_error\",\n      errorDescription: \"Failed to update folder\",\n    });\n  }\n};\n\nexport const deleteFolder = async (req: Request<{ serverId: string; folderId: string }>, res: Response) => {\n  if (!isAdminRequest(req)) {\n    throw new TypeGuardError();\n  }\n\n  req.logger.info(\"Deleting folder\", { serverId: req.params.serverId, folderId: req.params.folderId });\n\n  try {\n    await foldersService.deleteFolder(req.db, req.params.folderId, req.params.serverId, req.admin.tenantId);\n\n    res.status(StatusCodes.NO_CONTENT).send();\n  } catch (error) {\n    req.logger.error(\"Failed to delete folder\", error);\n    res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({\n      error: \"internal_server_error\",\n      errorDescription: \"Failed to delete folder\",\n    });\n  }\n};\n", "import { Folder } from \"@agentbridge/api\";\nimport { Folder as FolderPrisma } from \"@prisma/client\";\nimport { Database } from \"../utils/connection.js\";\n\nexport const mapFolder = (folder: FolderPrisma): Folder => ({\n  ...folder,\n  parentFolderId: folder.parentFolderId || undefined,\n  createdAt: folder.createdAt.toISOString(),\n  updatedAt: folder.updatedAt.toISOString(),\n});\n\nexport async function listFolders(db: Database, serverId: string, tenantId: string): Promise<Folder[]> {\n  const folders = await db.folder.findMany({\n    where: {\n      serverId,\n      tenantId,\n    },\n    orderBy: [\n      {\n        name: \"asc\",\n      },\n      {\n        id: \"asc\",\n      },\n    ],\n  });\n  return folders.map(mapFolder);\n}\n\nexport async function createFolder(\n  db: Database,\n  serverId: string,\n  tenantId: string,\n  name: string,\n  parentFolderId?: string,\n): Promise<Folder> {\n  const folder = await db.folder.create({\n    data: {\n      name,\n      parentFolderId,\n      tenantId,\n      serverId,\n    },\n  });\n  return mapFolder(folder);\n}\n\nexport async function updateFolder(\n  db: Database,\n  folderId: string,\n  serverId: string,\n  tenantId: string,\n  name: string,\n): Promise<Folder> {\n  const folder = await db.folder.update({\n    where: {\n      id: folderId,\n      serverId,\n      tenantId,\n    },\n    data: {\n      name,\n    },\n  });\n  return mapFolder(folder);\n}\n\nexport async function deleteFolder(db: Database, folderId: string, serverId: string, tenantId: string): Promise<void> {\n  await db.folder.delete({\n    where: {\n      id: folderId,\n      serverId,\n      tenantId,\n    },\n  });\n}\n", "import express from \"express\";\nimport { getHealth } from \"../controllers/health.controller.js\";\n\nconst router = express.Router();\n\nrouter.get(\"/\", getHealth);\nrouter.get(\"/ready\", getHealth);\n\nexport default router;\n", "import { Request, Response } from \"express\";\nimport { StatusCodes } from \"http-status-codes\";\n\nexport const getHealth = (_req: Request, res: Response) => {\n  res.status(StatusCodes.OK).json({ status: \"success\" });\n};\n", "import { NextFunction, Request, RequestHandler, Response, Router } from \"express\";\nimport { Logger } from \"winston\";\nimport { handleNotAllowed, handleSSE, handleSSEMessage, handleStreamablePost } from \"../controllers/mcp.controller.js\";\nimport { createServerAuthMiddleware } from \"../middleware/server-auth.middleware.js\";\nimport { serverIdMiddleware } from \"../middlewares/serverId.middleware.js\";\nimport { ServerAuthService } from \"../services/server-auth.service.js\";\nimport { AppRequest } from \"../utils/req-guards.js\";\n\nconst router: Router = Router();\n\n// Create server auth middleware instance (will be injected with dependencies in app setup)\nlet serverAuthMiddleware: ReturnType<typeof createServerAuthMiddleware>;\n\nexport function setupServerAuthMiddleware(serverAuthService: ServerAuthService, logger?: Logger) {\n  serverAuthMiddleware = createServerAuthMiddleware(serverAuthService, logger);\n}\n\n// Enhanced server auth middleware that properly handles BASE auth user context\nconst enhancedServerAuth = async (req: Request, res: Response, next: NextFunction) => {\n  const appReq = req as AppRequest;\n\n  // Initialize server auth middleware if needed\n  if (!serverAuthMiddleware) {\n    try {\n      const serverAuthService = new ServerAuthService(appReq.db, appReq.logger);\n      serverAuthMiddleware = createServerAuthMiddleware(serverAuthService, appReq.logger);\n      appReq.logger?.info(\"Server authentication middleware lazy-initialized\");\n    } catch (error) {\n      appReq.logger?.error(\"Failed to initialize server auth middleware:\", error);\n      return res.status(503).json({\n        error: \"Server authentication not configured\",\n        details: \"Failed to initialize server authentication middleware\",\n      });\n    }\n  }\n\n  // Use the server auth middleware (which uses strategy pattern internally)\n  return serverAuthMiddleware(appReq, res, next);\n};\n\nrouter.post(\"/api/mcp\", serverIdMiddleware, enhancedServerAuth, handleStreamablePost as unknown as RequestHandler);\nrouter.get(\"/api/mcp\", serverIdMiddleware, enhancedServerAuth, handleSSE as unknown as RequestHandler);\nrouter.post(\"/api/mcp/messages\", serverIdMiddleware, enhancedServerAuth, handleSSEMessage as unknown as RequestHandler);\nrouter.delete(\"/api/mcp\", handleNotAllowed);\n\nexport default router;\n", "import { SSEServerTransport } from \"@modelcontextprotocol/sdk/server/sse.js\";\nimport { StreamableHTTPServerTransport } from \"@modelcontextprotocol/sdk/server/streamableHttp.js\";\nimport { Request, Response } from \"express\";\nimport { StatusCodes } from \"http-status-codes\";\nimport { getMcpServerUnified } from \"../services/mcp.service.js\";\nimport {\n  APP_BAD_REQUEST,\n  ErrorResponse,\n  JSONRPC_INTERNAL_ERROR,\n  JSONRPC_METHOD_NOT_ALLOWED,\n  JsonRpcErrorResponse,\n} from \"../types/error.types.js\";\nimport { AppRequest, isAppRequest, isWithServerIdRequest, TypeGuardError } from \"../utils/req-guards.js\";\n\nfunction sendMcpError(res: Response, status: number, errorCode: number, message: string, isJsonRpc = true): void {\n  const error = isJsonRpc\n    ? ({ jsonrpc: \"2.0\", error: { code: errorCode, message } } as JsonRpcErrorResponse)\n    : ({ error: { code: errorCode, message } } as ErrorResponse);\n\n  res.status(status).json(error);\n}\n\n/**\n * Validate request params and authentication results from middleware\n * This function is simplified since authentication is now handled by middleware\n */\nasync function validateRequest(req: AppRequest, res: Response): Promise<boolean> {\n  if (!isAppRequest(req)) {\n    throw new TypeGuardError();\n  }\n\n  if (!isWithServerIdRequest(req)) {\n    const message = \"Missing server ID\";\n    req.logger.warn(`${message}. serverId=${req[\"serverId\"]}`);\n    sendMcpError(res, StatusCodes.BAD_REQUEST, APP_BAD_REQUEST, `Bad Request: ${message}`);\n    return false;\n  }\n\n  // Check if authentication was successful (handled by middleware)\n  if (!req.serverAuth?.success) {\n    sendMcpError(\n      res,\n      StatusCodes.UNAUTHORIZED,\n      APP_BAD_REQUEST,\n      req.serverAuth?.error || \"Server authentication failed\",\n    );\n    return false;\n  }\n\n  req.logger.debug(\"Request validation successful\", {\n    serverId: req.serverId,\n    authType: req.serverAuth.userContext?.authType,\n    userId: req.serverAuth.userContext?.userId,\n  });\n\n  return true;\n}\n\nexport async function handleStreamablePost(req: AppRequest, res: Response): Promise<void> {\n  if (!isWithServerIdRequest(req)) {\n    throw new TypeGuardError();\n  }\n\n  try {\n    // Validate request and authentication (simplified since middleware handles auth)\n    if (!(await validateRequest(req, res))) {\n      return;\n    }\n\n    const mcpServer = await getMcpServerUnified(req);\n    const transport: StreamableHTTPServerTransport = new StreamableHTTPServerTransport({\n      sessionIdGenerator: undefined,\n    });\n\n    res.on(\"close\", () => {\n      transport.close();\n      mcpServer.close();\n    });\n    await mcpServer.connect(transport);\n    await transport.handleRequest(req, res, req.body);\n  } catch (error) {\n    req.logger.error(\"Error handling MCP streamable HTTP POST request\", error);\n    if (!res.headersSent) {\n      sendMcpError(res, StatusCodes.INTERNAL_SERVER_ERROR, JSONRPC_INTERNAL_ERROR, \"Internal server error\");\n    }\n  }\n}\n\nconst sseTransports: { [sessionId: string]: SSEServerTransport } = {};\n\nexport async function handleSSE(req: AppRequest, res: Response): Promise<void> {\n  if (!isWithServerIdRequest(req)) {\n    throw new TypeGuardError();\n  }\n\n  // Validate request and authentication (simplified since middleware handles auth)\n  if (!(await validateRequest(req, res))) {\n    return;\n  }\n\n  const transport = new SSEServerTransport(\"/api/mcp/messages\", res);\n  sseTransports[transport.sessionId] = transport;\n\n  res.on(\"close\", () => {\n    // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n    delete sseTransports[transport.sessionId];\n  });\n\n  const server = await getMcpServerUnified(req);\n  await server.connect(transport);\n}\n\nexport async function handleSSEMessage(req: AppRequest, res: Response): Promise<void> {\n  if (!isWithServerIdRequest(req)) {\n    throw new TypeGuardError();\n  }\n  const sessionId = req.query.sessionId as string;\n\n  // Validate request and authentication (simplified since middleware handles auth)\n  if (!(await validateRequest(req, res))) {\n    return;\n  }\n\n  const transport = sessionId ? sseTransports[sessionId] : null;\n  if (!transport) {\n    if (sessionId) {\n      req.logger.error(\"Session specified but not found\", { sessionId });\n    }\n    return sendMcpError(res, StatusCodes.NOT_FOUND, APP_BAD_REQUEST, \"Session not found\");\n  }\n\n  await transport.handlePostMessage(req, res, req.body);\n}\n\nexport async function handleNotAllowed(req: Request, res: Response): Promise<void> {\n  if (!isAppRequest(req)) {\n    throw new TypeGuardError();\n  }\n\n  return sendMcpError(res, StatusCodes.METHOD_NOT_ALLOWED, JSONRPC_METHOD_NOT_ALLOWED, \"Method not allowed\");\n}\n", "import { McpServer } from \"@modelcontextprotocol/sdk/server/mcp.js\";\nimport { ApiKeyProvider, OAuthProvider, Tool } from \"@prisma/client\";\nimport isEmpty from \"lodash/isEmpty.js\";\nimport { OpenAPIV3 } from \"openapi-types\";\nimport { Logger } from \"winston\";\nimport { injectContextParameters } from \"../constants/tool-parameters.js\";\nimport { Database } from \"../utils/connection.js\";\nimport { EndUserRequest, WithServerIdRequest } from \"../utils/req-guards.js\";\nimport { analytics } from \"./analytics.service.js\";\nimport { executeApiRequest } from \"./api-exec/api-tool-executor.js\";\nimport { createZodSchemaFromParameters } from \"./api-exec/parameter-schema.js\";\nimport {\n  getAuthorizeUrl,\n  getUserUseableTokens,\n  markTokenAsUsed,\n  refreshAndPersistAccessToken,\n  TOOL_SCOPE,\n} from \"./oauth.service.js\";\n\n// do not change the phrasing of this message, it is used by mcp-remote to detect browser open needed\nconst authenticateMessage = (url: string) => `Please authenticate before proceeding.\n\nThe following URL should be automatically opened in your browser, but if it doesn't, please open it manually:\n\n${url}\n\nOnce authentication is complete, re-run your original query.`;\n\n// Constants\nconst CONSTANTS = {\n  SYNTHETIC_EMAIL_DOMAIN: \"@jwt.agentpass.ai\",\n  MCP_SERVER_VERSION: \"1.0.0\",\n} as const;\n\n// Error response builders\nconst ERROR_MESSAGES = {\n  AUTH_PROVIDER_MISCONFIGURED:\n    \"Oops! We couldn't complete the request due to an authorization issue. Please get in touch with your MCP server administrator.\",\n  TOOL_EXECUTION_ERROR: (error: unknown) =>\n    `Error executing tool: ${error instanceof Error ? error.message : String(error)}`,\n} as const;\n\nconst createErrorResponse = (message: string, isError = true) => ({\n  content: [{ type: \"text\" as const, text: message }],\n  isError,\n});\n\nconst createAuthResponse = (authUrl: string) => ({\n  content: [{ type: \"text\" as const, text: authenticateMessage(authUrl) }],\n});\n\n/**\n * Parse JWT token and extract claims without verification\n * This is safe since we're only using it for template variables, not security\n */\nfunction parseJwtClaims(jwt: string): Record<string, unknown> {\n  try {\n    // JWT format: header.payload.signature\n    const parts = jwt.split(\".\");\n    if (parts.length !== 3) {\n      return {};\n    }\n\n    // Decode the header (first part)\n    const header = parts[0];\n    const paddedHeader = header + \"=\".repeat((4 - (header.length % 4)) % 4);\n    const decodedHeader = Buffer.from(paddedHeader, \"base64url\").toString(\"utf8\");\n    const headerClaims = JSON.parse(decodedHeader);\n\n    // Decode the payload (second part)\n    const payload = parts[1];\n    const paddedPayload = payload + \"=\".repeat((4 - (payload.length % 4)) % 4);\n    const decodedPayload = Buffer.from(paddedPayload, \"base64url\").toString(\"utf8\");\n    const payloadClaims = JSON.parse(decodedPayload);\n\n    // Combine header and payload claims (payload takes precedence for duplicates)\n    return { ...headerClaims, ...payloadClaims };\n  } catch {\n    // If parsing fails, return empty object\n    return {};\n  }\n}\n\n/**\n * Unified MCP server creation that works with any authentication strategy\n * Uses strategy pattern to determine what authentication features are available\n */\nexport async function getMcpServerUnified(req: WithServerIdRequest): Promise<McpServer> {\n  // Check authentication based on what's available in the request\n  const hasUserAuth = Boolean(\"user\" in req && req.user);\n  const hasServerAuth = Boolean(\"serverAuth\" in req && req.serverAuth?.success);\n\n  if (!hasUserAuth && !hasServerAuth) {\n    throw new Error(\"No valid authentication found\");\n  }\n\n  const serverId = req.serverId;\n\n  const server = new McpServer(\n    {\n      name: serverId,\n      version: CONSTANTS.MCP_SERVER_VERSION,\n    },\n    { capabilities: { logging: {} } },\n  );\n\n  try {\n    const tools = await req.db.tool.findMany({\n      where: {\n        serverId: serverId,\n        enabled: true,\n      },\n      include: {\n        oAuthProvider: true,\n        apiKeyProvider: true,\n        server: {\n          select: {\n            baseUrl: true,\n          },\n        },\n      },\n    });\n    req.logger.debug(`Found ${tools.length} tools for server ${serverId}`);\n\n    for (const tool of tools) {\n      await registerToolUnified(req, server, tool, hasUserAuth, hasServerAuth);\n    }\n  } catch (error) {\n    req.logger.error(`Error loading tools for server ${serverId}:`, error);\n    throw error;\n  }\n\n  return server;\n}\n\nasync function registerToolUnified(\n  req: WithServerIdRequest,\n  server: McpServer,\n  tool: Tool & {\n    oAuthProvider: OAuthProvider | null;\n    apiKeyProvider: ApiKeyProvider | null;\n    server: { baseUrl: string };\n  },\n  hasUserAuth: boolean,\n  hasServerAuth: boolean,\n): Promise<void> {\n  try {\n    const specParameters: Record<string, OpenAPIV3.ParameterObject> = tool.parameters\n      ? JSON.parse(JSON.stringify(tool.parameters))\n      : {};\n    req.logger.debug(`Tool ${tool.method} ${tool.url} parameters: ${JSON.stringify(specParameters)}`);\n    const paramSchema = createZodSchemaFromParameters(req.logger, specParameters);\n\n    // TypeScript has issues with MCP SDK's deep type instantiation\n    // Using any to bypass this limitation\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (server as any).registerTool(\n      tool.name,\n      {\n        description: tool.description,\n        inputSchema: paramSchema,\n      },\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (callParameters: any) =>\n        executeToolWithAuth(req, tool, specParameters, callParameters, hasUserAuth, hasServerAuth),\n    );\n  } catch (error) {\n    req.logger.error(`Failed to register tool ${tool.name}:`, error);\n    throw error;\n  }\n}\n\n/**\n * Executes a tool with proper authentication and logging\n */\nasync function executeToolWithAuth(\n  req: WithServerIdRequest,\n  tool: Tool & {\n    oAuthProvider: OAuthProvider | null;\n    apiKeyProvider: ApiKeyProvider | null;\n    server: { baseUrl: string };\n  },\n  specParameters: Record<string, OpenAPIV3.ParameterObject>,\n  callParameters: Record<string, unknown>,\n  hasUserAuth: boolean,\n  hasServerAuth: boolean,\n) {\n  req.logger.debug(\n    `Tool ${tool.name} (${tool.method} @ ${tool.url}) called with params: ${JSON.stringify(callParameters)}`,\n  );\n\n  try {\n    // Inject context parameters (JWT, user info, etc.) based on request context\n    injectContextParameters(req, callParameters, hasUserAuth);\n\n    // Extract auth context for templates\n    const jwtToken = (!hasUserAuth && \"serverAuth\" in req && req.serverAuth?.userContext?.originalToken) || undefined;\n    const jwtClaims = parseJwtClaims(jwtToken || \"\");\n    const authContext = {\n      jwt: {\n        // Raw JWT string accessible as {{auth.jwt}}\n        toString: () => jwtToken || \"\",\n        valueOf: () => jwtToken || \"\",\n        // JWT claims accessible as {{auth.jwt.propertyName}}\n        ...jwtClaims,\n      },\n    };\n\n    // TODO: remove this backward compatibility in few releases\n    // Add backward compatibility: also inject JWT as toolParams.jwt for existing templates\n    if (jwtToken) {\n      callParameters.jwt = jwtToken;\n    }\n\n    // Handle tool authentication (OAuth/API key) - independent of MCP server auth type\n    const toolAuthResult = await handleToolAuthentication(req, tool, hasUserAuth, hasServerAuth);\n\n    if (toolAuthResult.authProviderMisconfigured) {\n      return createErrorResponse(ERROR_MESSAGES.AUTH_PROVIDER_MISCONFIGURED);\n    }\n\n    if (toolAuthResult.authMissing) {\n      return createAuthResponse(toolAuthResult.authMissing.authUrl);\n    }\n\n    if (toolAuthResult.accessToken) {\n      callParameters[\"Authorization\"] = `Bearer ${toolAuthResult.accessToken.tokenValue}`;\n      const tokenId = toolAuthResult.accessToken.tokenId;\n      setImmediate(() => markTokenAsUsed(req.db, tokenId));\n    }\n\n    const startTime = Date.now();\n    const result = await executeApiRequest(\n      tool,\n      tool.server.baseUrl,\n      specParameters,\n      callParameters,\n      req.logger,\n      false,\n      authContext,\n    );\n\n    // Log execution based on auth type\n    await logToolExecution(req, tool, result, startTime, hasUserAuth, hasServerAuth);\n\n    return result;\n  } catch (error) {\n    req.logger.warn(`Error executing tool ${tool.name}:`, error);\n    return createErrorResponse(ERROR_MESSAGES.TOOL_EXECUTION_ERROR(error));\n  }\n}\n\nasync function logUserToolExecution(\n  req: EndUserRequest & WithServerIdRequest,\n  tool: {\n    id: string;\n    serverId: string;\n    name: string;\n    method: string;\n    oAuthProviderId?: string | null;\n    apiKeyProviderId?: string | null;\n  },\n  result: { isError?: boolean },\n  startTime: number,\n): Promise<void> {\n  // Track tool execution in PostHog\n  analytics.track(req.user.id, \"tool.execute.api_call\", {\n    tool_id: tool.id,\n    server_id: tool.serverId,\n    tenant_id: req.user.tenantId,\n    end_user_id: req.user.id,\n    tool_name: tool.name,\n    http_method: tool.method,\n    has_auth: !!tool.oAuthProviderId || !!tool.apiKeyProviderId,\n    auth_type: tool.oAuthProviderId ? \"oauth\" : tool.apiKeyProviderId ? \"api_key\" : \"none\",\n    execution_time_ms: Date.now() - startTime,\n    success: !result.isError,\n    is_playground: false,\n  });\n\n  req.logger.info(`Tool ${tool.name} executed for user ${req.user.email}`, {\n    tool_id: tool.id,\n    server_id: tool.serverId,\n    tool_name: tool.name,\n    success: !result.isError,\n    duration: Date.now() - startTime,\n    user_id: req.user.id,\n  });\n}\n\n/**\n * Unified logging function that handles both user and server auth contexts\n */\nasync function logToolExecution(\n  req: WithServerIdRequest,\n  tool: {\n    id: string;\n    serverId: string;\n    name: string;\n    method: string;\n    oAuthProviderId?: string | null;\n    apiKeyProviderId?: string | null;\n    oAuthProvider?: OAuthProvider | null;\n  },\n  result: { isError?: boolean },\n  startTime: number,\n  hasUserAuth: boolean,\n  hasServerAuth: boolean,\n): Promise<void> {\n  if (hasUserAuth) {\n    const userReq = req as EndUserRequest & WithServerIdRequest;\n    await logUserToolExecution(userReq, tool, result, startTime);\n    return;\n  }\n\n  if (hasServerAuth) {\n    // Check if we have user context from JWT for enhanced logging\n    const serverAuthReq = req as WithServerIdRequest & { serverAuth: { userContext?: { userId?: string } } };\n    if (serverAuthReq.serverAuth?.userContext?.userId && tool.oAuthProvider) {\n      // Log as user execution for OAuth tools with JWT user context\n      const syntheticUserReq = req as EndUserRequest & WithServerIdRequest;\n      if (syntheticUserReq.user) {\n        await logUserToolExecution(syntheticUserReq, tool, result, startTime);\n        return;\n      }\n    }\n  }\n\n  // Simple logging without user-specific analytics for server auth\n  req.logger.info(`Tool ${tool.name} executed successfully`, {\n    tool_id: tool.id,\n    server_id: tool.serverId,\n    tool_name: tool.name,\n    success: !result.isError,\n    duration: Date.now() - startTime,\n  });\n}\n\n/**\n * Ensure a synthetic EndUser record exists for JWT subject to satisfy foreign key constraints\n * This creates a virtual user record that allows OAuth tokens to be stored for external JWT subjects\n */\nasync function ensureSyntheticEndUser(db: Database, userId: string, tenantId: string, logger?: Logger): Promise<void> {\n  try {\n    // Check if user already exists\n    const existingUser = await db.endUser.findUnique({\n      where: { id: userId },\n    });\n\n    if (existingUser) {\n      logger?.debug(`Synthetic EndUser already exists for JWT sub: ${userId}`);\n      return;\n    }\n\n    // Tenant already exists since it's from the MCP server record\n\n    // Create synthetic EndUser record for JWT subject\n    await db.endUser.create({\n      data: {\n        id: userId, // Use JWT sub as the user ID\n        tenantId: tenantId,\n        email: `${userId}${CONSTANTS.SYNTHETIC_EMAIL_DOMAIN}`, // Synthetic email to satisfy constraint\n        emailVerified: false,\n        name: `JWT Subject ${userId.substring(0, 8)}...`, // Truncated for readability\n        enabled: true,\n      },\n    });\n\n    logger?.info(`Created synthetic EndUser for JWT subject: ${userId}`, { tenantId });\n  } catch (error) {\n    // If creation fails due to race condition, that's okay - another request created it\n    if (error && typeof error === \"object\" && \"code\" in error && error.code === \"P2002\") {\n      logger?.debug(`Synthetic EndUser creation race condition for JWT sub: ${userId}`);\n      return;\n    }\n\n    logger?.error(`Failed to create synthetic EndUser for JWT subject: ${userId}`, error);\n    throw error;\n  }\n}\n\n/**\n * Unified tool authentication that works regardless of MCP server auth type\n * Handles both OAuth and API key tools independently of BASE/JWT MCP auth\n */\nasync function handleToolAuthentication(\n  req: WithServerIdRequest,\n  tool: Tool & {\n    oAuthProvider: OAuthProvider | null;\n    apiKeyProvider: ApiKeyProvider | null;\n  },\n  hasUserAuth: boolean,\n  hasServerAuth: boolean,\n): Promise<{\n  accessToken?: {\n    tokenId: string;\n    tokenValue: string;\n  };\n  authProviderMisconfigured?: boolean;\n  authMissing?: { authUrl: string };\n}> {\n  // API key tools - work the same way regardless of MCP auth type\n  if (tool.apiKeyProvider) {\n    return {\n      accessToken: {\n        tokenId: tool.apiKeyProvider.id,\n        tokenValue: tool.apiKeyProvider.value,\n      },\n    };\n  }\n\n  // OAuth tools - need user context for token storage\n  if (tool.oAuthProvider) {\n    // Check if OAuth provider is properly configured\n    if (isEmpty(tool.oAuthProvider.clientId) || isEmpty(tool.oAuthProvider.clientSecret)) {\n      return { authProviderMisconfigured: true };\n    }\n\n    // Get user ID regardless of MCP auth type\n    const userId = await getUserIdForOAuth(req, hasUserAuth, hasServerAuth, tool.name);\n    if (typeof userId === \"object\") {\n      return userId; // Return error if user ID couldn't be determined\n    }\n\n    // Perform OAuth token lookup and management - same logic for both auth types\n    return await handleOAuthAuthentication(req, tool.oAuthProvider, userId);\n  }\n\n  // No authentication needed for this tool\n  return {};\n}\n\n/**\n * Gets user ID for OAuth token lookup - works for both MCP auth types\n */\nasync function getUserIdForOAuth(\n  req: WithServerIdRequest,\n  hasUserAuth: boolean,\n  hasServerAuth: boolean,\n  toolName: string,\n): Promise<string | { authProviderMisconfigured: true }> {\n  if (hasUserAuth) {\n    // BASE auth - use actual user ID\n    const userReq = req as EndUserRequest & WithServerIdRequest;\n    return userReq.user.id;\n  }\n\n  if (hasServerAuth) {\n    // JWT auth - extract user ID from JWT token\n    const serverAuthReq = req as WithServerIdRequest & {\n      serverAuth?: { userContext?: { userId?: string; tenantId?: string } };\n    };\n    const jwtUserId = serverAuthReq.serverAuth?.userContext?.userId;\n\n    if (!jwtUserId) {\n      req.logger.warn(`OAuth tool ${toolName} requires user context in JWT token`);\n      return { authProviderMisconfigured: true };\n    }\n\n    // Get tenantId from the MCP server record\n    const server = await req.db.mcpServer.findUnique({\n      where: { id: req.serverId },\n      select: { tenantId: true },\n    });\n\n    if (!server) {\n      req.logger.error(`MCP server not found: ${req.serverId}`);\n      return { authProviderMisconfigured: true };\n    }\n\n    // Ensure synthetic EndUser exists for JWT sub\n    await ensureSyntheticEndUser(req.db, jwtUserId, server.tenantId, req.logger);\n\n    return jwtUserId;\n  }\n\n  req.logger.error(`No authentication context available for OAuth tool ${toolName}`);\n  return { authProviderMisconfigured: true };\n}\n\n/**\n * Unified OAuth authentication that works the same for both MCP auth types\n */\nasync function handleOAuthAuthentication(\n  req: WithServerIdRequest,\n  oAuthProvider: OAuthProvider,\n  userId: string,\n): Promise<{\n  accessToken?: {\n    tokenId: string;\n    tokenValue: string;\n  };\n  authProviderMisconfigured?: boolean;\n  authMissing?: { authUrl: string };\n}> {\n  const originAddress = req.ip || null;\n  const tokens = await getUserUseableTokens(req.db, userId, oAuthProvider.id);\n\n  if (tokens.length > 0) {\n    const validTokens = tokens.filter((t) => !t.expiresAt || t.expiresAt > new Date());\n    if (validTokens.length > 0) {\n      req.logger.debug(`Found valid token for provider ${oAuthProvider.name} (has ${tokens.length} tokens)`);\n      return {\n        accessToken: {\n          tokenId: validTokens[0].id,\n          tokenValue: validTokens[0].accessToken,\n        },\n      };\n    }\n\n    const tokensWithRefresh = tokens.filter((t) => !!t.refreshToken);\n    if (tokensWithRefresh.length > 0) {\n      try {\n        const tokenData = await refreshAndPersistAccessToken(\n          req.db,\n          req.logger,\n          userId,\n          oAuthProvider,\n          tokensWithRefresh[0].refreshToken!,\n          originAddress,\n        );\n        return {\n          accessToken: {\n            tokenId: tokenData.id,\n            tokenValue: tokenData.accessToken,\n          },\n        };\n      } catch (error) {\n        req.logger.warn(`Failed to refresh token for provider ${oAuthProvider.name}`, error);\n        return {\n          authMissing: {\n            authUrl: getAuthorizeUrl(req, oAuthProvider, \"\", req.serverId, userId, TOOL_SCOPE, originAddress),\n          },\n        };\n      }\n    }\n\n    // All tokens are expired/invalid and no refresh tokens available - prompt for re-authentication\n    const authUrl = getAuthorizeUrl(req, oAuthProvider, \"\", req.serverId, userId, TOOL_SCOPE, originAddress);\n    req.logger.warn(\n      `Found ${tokens.length} expired/invalid tokens for provider ${oAuthProvider.name}, prompting user to re-authenticate at '${authUrl}'`,\n    );\n    return { authMissing: { authUrl } };\n  }\n\n  const authUrl = getAuthorizeUrl(req, oAuthProvider, \"\", req.serverId, userId, TOOL_SCOPE, originAddress);\n  req.logger.warn(\n    `No valid token found for provider ${oAuthProvider.name}, prompting user to authenticate at '${authUrl}'`,\n  );\n  return { authMissing: { authUrl } };\n}\n", "import { WithServerIdRequest } from \"../utils/req-guards.js\";\n\n/**\n * Request context for parameter extraction\n */\ninterface RequestContext {\n  hasUserAuth: boolean;\n  serverAuth?: {\n    userContext?: {\n      originalToken?: string;\n    };\n  };\n}\n\n/**\n * Configuration for context parameters that are automatically injected into tool calls\n */\nexport interface ContextParameter {\n  readonly key: string;\n  readonly description: string;\n  readonly source: \"request\" | \"user\" | \"server\";\n  readonly condition?: (context: RequestContext) => boolean;\n}\n\n/**\n * Available context parameters that can be injected into tool calls\n */\nexport const CONTEXT_PARAMETERS: Record<string, ContextParameter> = {\n  JWT: {\n    key: \"jwt\",\n    description: \"JWT token from request Authorization header\",\n    source: \"request\",\n    condition: (context) => !context.hasUserAuth && !!context.serverAuth?.userContext?.originalToken,\n  },\n} as const;\n\n/**\n * Extract context parameters from request and add to call parameters\n */\nexport function injectContextParameters(\n  req: WithServerIdRequest,\n  callParameters: Record<string, unknown>,\n  hasUserAuth: boolean,\n): void {\n  const context: RequestContext = {\n    hasUserAuth,\n    serverAuth: \"serverAuth\" in req ? req.serverAuth : undefined,\n  };\n\n  Object.values(CONTEXT_PARAMETERS).forEach((param) => {\n    if (!param.condition || param.condition(context)) {\n      const value = extractParameterValue(req, param, hasUserAuth);\n      if (value !== undefined) {\n        callParameters[param.key] = value;\n      }\n    }\n  });\n}\n\nfunction extractParameterValue(req: WithServerIdRequest, param: ContextParameter, hasUserAuth: boolean): unknown {\n  switch (param.key) {\n    case \"jwt\":\n      return !hasUserAuth && \"serverAuth\" in req && req.serverAuth?.userContext?.originalToken;\n    default:\n      return undefined;\n  }\n}\n", "import { FormattingConfig, RequestParamConfig } from \"@agentbridge/api\";\nimport { CallToolResult } from \"@modelcontextprotocol/sdk/types.js\";\nimport { Tool } from \"@prisma/client\";\nimport axios, { AxiosError, AxiosResponse, isAxiosError } from \"axios\";\nimport Handlebars from \"handlebars\";\nimport { OpenAPIV3 } from \"openapi-types\";\nimport { Logger } from \"winston\";\nimport { HttpRequestOverrides } from \"../../utils/generateRequestOverrides.js\";\nimport { jsonValueToRecord } from \"../../utils/json.js\";\nimport { buildRequestConfig } from \"./parameter-schema.js\";\n\n// Register Handlebars helpers\nHandlebars.registerHelper(\"json\", function (context) {\n  return JSON.stringify(context);\n});\n\nconst logApiCall = (\n  logger: Logger,\n  tool: Tool,\n  baseUrl: string,\n  startTime: number,\n  isPlayground: boolean,\n  response: AxiosResponse | null,\n) => {\n  // Do not change the phrasing of this log message, it is used for metric extractions:\n  //  https://github.com/OwnID/datadog-terraform/blob/develop/monitors/metric_agentbridge.tf\n  logger.info(\"Analytics: API call completed\", {\n    toolId: tool.id,\n    baseUrl,\n    url: tool.url,\n    method: tool.method,\n    statusCode: response?.status || 0,\n    bodyLen: response?.data ? String(response.data).length : 0,\n    durationMS: Date.now() - startTime,\n    failed: !response || response?.status >= 300 || response?.status < 200,\n    isPlayground,\n  });\n};\n\nexport async function executeApiRequest(\n  tool: Tool,\n  baseUrl: string,\n  specParameters: Record<string, OpenAPIV3.ParameterObject>,\n  callParameters: Record<string, unknown>,\n  logger: Logger,\n  isPlayground = false,\n  authContext?: Record<string, unknown>,\n): Promise<CallToolResult> {\n  const responseFormatting: FormattingConfig = tool.responseFormatting\n    ? JSON.parse(JSON.stringify(tool.responseFormatting))\n    : {};\n\n  const startTime = Date.now();\n\n  // Capture request data for templating if enabled (declare outside try block for error handling)\n  let requestData: Record<string, unknown> | null = null;\n\n  try {\n    // Process request parameter overrides if configured\n    let finalParameters = callParameters;\n    let finalSpecParameters = specParameters;\n\n    if (tool.requestParameterOverrides) {\n      const overrides = tool.requestParameterOverrides as Record<string, RequestParamConfig> | HttpRequestOverrides;\n\n      // Check if this is the new format (has query/headers/path/body properties)\n      const isNewFormat = \"query\" in overrides || \"headers\" in overrides || \"path\" in overrides || \"body\" in overrides;\n\n      if (isNewFormat) {\n        logger.debug(`Using new HTTP request override format`);\n\n        // Build parameters from the new format\n        finalParameters = {};\n        const newSpecParameters: Record<string, OpenAPIV3.ParameterObject> = {};\n\n        // Process query parameters\n        if (overrides.query) {\n          for (const [key, value] of Object.entries(overrides.query)) {\n            const processedValue = processHandlebarsTemplate(logger, value as string, { toolParams: callParameters });\n            // Only add non-empty query parameters\n            if (processedValue !== \"\" && processedValue !== null && processedValue !== undefined) {\n              finalParameters[key] = processedValue;\n              newSpecParameters[key] = {\n                name: key,\n                in: \"query\",\n                required: specParameters[key]?.required || false,\n                schema: specParameters[key]?.schema || { type: \"string\" },\n              };\n            } else {\n              logger.debug(`Skipping empty query parameter: ${key}`);\n            }\n          }\n        }\n\n        // Process headers\n        if (overrides.headers) {\n          for (const [key, value] of Object.entries(overrides.headers)) {\n            const processedValue = processHandlebarsTemplate(logger, value as string, { toolParams: callParameters });\n            // Only add non-empty headers\n            if (processedValue !== \"\" && processedValue !== null && processedValue !== undefined) {\n              finalParameters[key] = processedValue;\n              newSpecParameters[key] = {\n                name: key,\n                in: \"header\",\n                required: specParameters[key]?.required || false,\n                schema: specParameters[key]?.schema || { type: \"string\" },\n              };\n            } else {\n              logger.debug(`Skipping empty header parameter: ${key}`);\n            }\n          }\n        }\n\n        // Process path parameters\n        if (overrides.path) {\n          for (const [key, value] of Object.entries(overrides.path)) {\n            const processedValue = processHandlebarsTemplate(logger, value as string, { toolParams: callParameters });\n            // Path parameters should typically always have a value, but we'll check anyway\n            if (processedValue !== \"\" && processedValue !== null && processedValue !== undefined) {\n              finalParameters[key] = processedValue;\n              newSpecParameters[key] = {\n                name: key,\n                in: \"path\",\n                required: specParameters[key]?.required || true, // Path params are usually required\n                schema: specParameters[key]?.schema || { type: \"string\" },\n              };\n            } else {\n              logger.warn(`Empty path parameter: ${key} - this may cause request to fail`);\n            }\n          }\n        }\n\n        // Process body\n        if (overrides.body !== undefined) {\n          // Handle body as a single parameter\n          let bodyValue = overrides.body;\n\n          // If body is an object/array, process any template strings within it\n          if (typeof bodyValue === \"object\" && bodyValue !== null) {\n            bodyValue = JSON.parse(\n              processHandlebarsTemplate(logger, JSON.stringify(bodyValue), { toolParams: callParameters }),\n            );\n          } else if (typeof bodyValue === \"string\") {\n            bodyValue = processHandlebarsTemplate(logger, bodyValue, { toolParams: callParameters });\n          }\n\n          finalParameters.body = bodyValue;\n          newSpecParameters.body = {\n            name: \"body\",\n            in: \"body\",\n            required: specParameters.body?.required || false,\n            schema: specParameters.body?.schema || { type: \"object\" },\n          };\n        }\n\n        finalSpecParameters = newSpecParameters;\n      } else {\n        // Old format - existing logic\n        logger.debug(`Using old request parameter override format`);\n        // const oldOverrides = overrides as Record<string, RequestParamConfig>;\n\n        // Build a new parameters object based on overrides\n        finalParameters = {};\n        const newSpecParameters: Record<string, OpenAPIV3.ParameterObject> = {};\n\n        // Process each override\n        for (const [paramName, override] of Object.entries(overrides)) {\n          // Process the template value\n          const processedValue = processHandlebarsTemplate(logger, override.value, {\n            toolParams: callParameters,\n            auth: authContext || {},\n          });\n          finalParameters[paramName] = processedValue;\n\n          // Create or update the parameter spec\n          newSpecParameters[paramName] = {\n            name: paramName,\n            in: override.location as OpenAPIV3.ParameterObject[\"in\"],\n            required: specParameters[paramName]?.required || false,\n            schema: specParameters[paramName]?.schema || { type: \"string\" },\n          };\n        }\n\n        // Use the new parameter specifications\n        finalSpecParameters = newSpecParameters;\n      }\n\n      logger.debug(`Applied request parameter overrides`, {\n        original: callParameters,\n        overrides,\n        final: finalParameters,\n        specs: finalSpecParameters,\n        format: isNewFormat ? \"new\" : \"old\",\n      });\n    }\n\n    const { config, missingRequiredParam } = buildRequestConfig(\n      logger,\n      tool.method,\n      tool.url,\n      baseUrl,\n      finalSpecParameters,\n      finalParameters,\n      tool.name,\n    );\n\n    if (missingRequiredParam) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Required parameter ${missingRequiredParam} is missing`,\n          },\n        ],\n        isError: true,\n      };\n    }\n\n    logger.debug(\n      `Executing API call with config: ${JSON.stringify({\n        method: config.method,\n        url: config.url,\n        headers: config.headers,\n        params: config.params,\n        data: config.data ? \"[DATA]\" : null,\n      })}`,\n    );\n\n    // Capture request data for templating if enabled\n    requestData = responseFormatting.includeRequestData\n      ? {\n          schema: specParameters,\n          data: {\n            parameters: {\n              headers: config.headers || {},\n              query: config.params || {},\n              path: extractPathParams(tool.url, finalParameters, finalSpecParameters),\n            },\n            payload: config.data || {},\n          },\n        }\n      : null;\n\n    const response = await axios(config);\n\n    logger.debug(`API call completed, status: ${response.status}`);\n\n    const result = {\n      schema: getResponseSchema(jsonValueToRecord(tool.responses), response.status, response.headers[\"content-type\"]),\n      data: {\n        headers: response.headers,\n        body: response.data,\n      },\n    };\n\n    logger.debug(`API call result:`, { result });\n\n    let formattedResponse: string;\n\n    if (responseFormatting.template) {\n      logger.debug(`Formatting response with template`);\n      const templateData = {\n        request: requestData,\n        response: result,\n        toolParams: callParameters,\n        auth: authContext || {},\n      };\n      formattedResponse = processHandlebarsTemplate(logger, responseFormatting.template, templateData);\n    } else if (responseFormatting.itemTemplate && Array.isArray(result.data.body)) {\n      logger.debug(`Formatting response as array with itemTemplate`);\n      const header = responseFormatting.header\n        ? processHandlebarsTemplate(logger, responseFormatting.header, { count: result.data.body.length })\n        : \"\";\n\n      if (result.data.body.length === 0 && responseFormatting.emptyResult) {\n        formattedResponse = `${header}${responseFormatting.emptyResult}`;\n      } else {\n        const separator = responseFormatting.separator || \"\\n\\n\";\n        const items = result.data.body.map((item) =>\n          processHandlebarsTemplate(logger, responseFormatting.itemTemplate!, {\n            item,\n            request: requestData,\n            response: result,\n            toolParams: callParameters,\n            auth: authContext || {},\n          }),\n        );\n        formattedResponse = `${header}${items.join(separator)}`;\n      }\n    } else {\n      logger.debug(`No formatting configuration, returning JSON string`);\n      formattedResponse = typeof result === \"string\" ? result : JSON.stringify(result, null, 2);\n    }\n\n    logger.debug(`Returning tool response (${formattedResponse.length} chars)`);\n\n    logApiCall(logger, tool, baseUrl, startTime, isPlayground, response);\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: formattedResponse,\n        },\n      ],\n    };\n  } catch (error) {\n    if (isAxiosError(error)) {\n      const axiosError = error as AxiosError;\n      logApiCall(logger, tool, baseUrl, startTime, isPlayground, axiosError.response || null);\n      logger.debug(\n        `API call failed: ${axiosError.config?.method} ${axiosError.config?.url} - ${axiosError.response?.status}`,\n        {\n          status: axiosError.response?.status,\n          method: axiosError.config?.method,\n          url: axiosError.config?.url,\n        },\n      );\n    } else {\n      logApiCall(logger, tool, baseUrl, startTime, isPlayground, null);\n      logger.debug(`API call failed: ${error instanceof Error ? error.message : String(error)}`);\n    }\n\n    if (responseFormatting.errorTemplate) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      const templateData = {\n        error: errorMessage,\n        message: errorMessage,\n        request: requestData,\n        response: {\n          schema: getResponseSchema(jsonValueToRecord(tool.responses), 0, \"application/json\"),\n          data: {\n            headers: {},\n            body: { error: errorMessage },\n          },\n        },\n        toolParams: callParameters,\n        auth: authContext || {},\n      };\n      const formattedError = processHandlebarsTemplate(\n        logger,\n        responseFormatting.errorTemplate as string,\n        templateData,\n      );\n\n      logger.debug(`Returning formatted error: ${formattedError}`);\n\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: formattedError,\n          },\n        ],\n        isError: true,\n      };\n    }\n\n    let formattedResponse: string;\n\n    if (isAxiosError(error) && error.response) {\n      const errorResponse = {\n        data: {\n          content: {\n            status: error.response.status,\n            statusText: error.response.statusText,\n            data: error.response.data,\n          },\n          headers: error.response.headers,\n        },\n        schema:\n          getResponseSchema(\n            jsonValueToRecord(tool.responses),\n            error.response.status,\n            error.response.headers[\"content-type\"],\n          ) || \"no schema found for response\",\n      };\n      formattedResponse = typeof errorResponse === \"string\" ? errorResponse : JSON.stringify(errorResponse, null, 2);\n    } else {\n      formattedResponse = `API call failed: ${error instanceof Error ? error.message : String(error)}`;\n    }\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: formattedResponse,\n        },\n      ],\n      isError: true,\n    };\n  }\n}\n\nfunction getResponseSchema(\n  responses: Record<string, unknown>,\n  status: string | number,\n  contentType = \"application/json\",\n) {\n  const statusKey = String(status);\n\n  const response = responses[statusKey] || responses[\"default\"];\n  if (!response) return undefined;\n\n  if (\n    typeof response === \"object\" &&\n    response !== null &&\n    \"content\" in response &&\n    typeof (response as Record<string, unknown>).content === \"object\" &&\n    (response as Record<string, unknown>).content !== null\n  ) {\n    const content = (response as { content: Record<string, { schema?: unknown }> }).content;\n    if (content[contentType]?.schema) {\n      return {\n        ...response,\n        content: content[contentType].schema,\n      };\n    }\n    // Fallback: return the first available schema\n    const firstContent = Object.values(content)[0];\n    if (firstContent && typeof firstContent === \"object\" && \"schema\" in firstContent) {\n      return (firstContent as { schema?: unknown }).schema;\n    }\n  }\n\n  return undefined;\n}\n\nfunction extractPathParams(\n  url: string,\n  callParameters: Record<string, unknown>,\n  specParameters: Record<string, OpenAPIV3.ParameterObject>,\n): Record<string, unknown> {\n  const pathParams: Record<string, unknown> = {};\n\n  for (const [key, param] of Object.entries(specParameters)) {\n    if (param.in === \"path\" && callParameters[key] !== undefined) {\n      pathParams[key] = callParameters[key];\n    }\n  }\n\n  return pathParams;\n}\n\nfunction processHandlebarsTemplate(logger: Logger, template: string, data: Record<string, unknown>): string {\n  logger.debug(`Processing Handlebars template with data keys: ${Object.keys(data).join(\", \")}`);\n\n  if (!template) {\n    return \"\";\n  }\n\n  try {\n    const compiledTemplate = Handlebars.compile(template);\n    return compiledTemplate(data);\n  } catch (error) {\n    logger.warn(`Error processing Handlebars template`, error);\n    return `Template processing error: ${error instanceof Error ? error.message : String(error)}`;\n  }\n}\n", "export const jsonValueToRecord = (value: unknown): Record<string, unknown> => {\n  if (typeof value === \"object\" && value !== null && !Array.isArray(value)) {\n    return value as Record<string, unknown>;\n  }\n  return {};\n};\n", "import { AxiosRequestConfig } from \"axios\";\nimport { OpenAPIV3 } from \"openapi-types\";\nimport { Logger } from \"winston\";\nimport { z } from \"zod\";\n\ntype SchemaObject = OpenAPIV3.SchemaObject;\ntype ParameterObject = OpenAPIV3.ParameterObject;\n\nexport function createZodSchemaFromParameters(\n  logger: Logger,\n  parameters: Record<string, ParameterObject>,\n): Record<string, z.ZodType<unknown>> {\n  logger.debug(`Converting parameters to Zod schema`);\n  const paramSchema: Record<string, z.ZodType<unknown>> = {};\n\n  for (const [key, param] of Object.entries(parameters)) {\n    logger.debug(`Processing parameter: ${key}`);\n\n    if (!param || typeof param !== \"object\") {\n      logger.debug(`Invalid parameter ${key}, defaulting to any`);\n      paramSchema[key] = z.any();\n      continue;\n    }\n\n    const isRequired = !!param.required;\n\n    // Special handling for body parameters\n    if (param.in === \"body\") {\n      logger.debug(`Found body parameter: ${key}`);\n      if (!param.schema) {\n        paramSchema[key] = isRequired ? z.any() : z.any().optional();\n        continue;\n      }\n      if (\"$ref\" in param.schema) {\n        paramSchema[key] = isRequired ? z.any() : z.any().optional();\n        continue;\n      }\n      const schema = param.schema as SchemaObject;\n      if (schema.type === \"object\" && schema.properties) {\n        // Create a schema based on the properties\n        const bodySchema = z.object(\n          Object.entries(schema.properties).reduce(\n            (acc, [propName, propSchema]) => {\n              const propType = (propSchema as SchemaObject).type;\n              let zodType: z.ZodType = z.any();\n\n              if (propType === \"string\") {\n                zodType = z.string();\n              } else if (propType === \"number\" || propType === \"integer\") {\n                zodType = z.number();\n              } else if (propType === \"boolean\") {\n                zodType = z.boolean();\n              } else if (propType === \"array\") {\n                zodType = z.array(z.any());\n              } else if (propType === \"object\") {\n                zodType = z.record(z.any());\n              }\n\n              if (\"description\" in propSchema && propSchema.description) {\n                zodType = zodType.describe(propSchema.description);\n              }\n\n              // Check if property is required in schema\n              const isPropRequired = schema.required?.includes(propName) === true;\n              acc[propName] = isPropRequired ? zodType : zodType.optional();\n              return acc;\n            },\n            {} as Record<string, z.ZodType>,\n          ),\n        );\n\n        paramSchema[key] = isRequired ? bodySchema : bodySchema.optional();\n      } else {\n        paramSchema[key] = isRequired ? z.any() : z.any().optional();\n      }\n      continue;\n    }\n\n    if (!param.schema) {\n      logger.debug(`No schema found for parameter ${key}, defaulting to any`);\n      paramSchema[key] = isRequired ? z.any() : z.any().optional();\n      continue;\n    }\n\n    if (\"$ref\" in param.schema) {\n      logger.debug(`Reference schema found for parameter ${key}, defaulting to any`);\n      paramSchema[key] = isRequired ? z.any() : z.any().optional();\n      continue;\n    }\n\n    const schema = param.schema as SchemaObject;\n    const schemaType = schema.type;\n\n    switch (schemaType) {\n      case \"string\":\n        const stringSchema = z.string();\n\n        if (schema.format === \"date-time\") {\n          paramSchema[key] = isRequired ? z.string().datetime() : z.string().datetime().optional();\n        } else if (schema.format === \"email\") {\n          paramSchema[key] = isRequired ? z.string().email() : z.string().email().optional();\n        } else if (schema.format === \"uri\") {\n          paramSchema[key] = isRequired ? z.string().url() : z.string().url().optional();\n        } else if (schema.enum) {\n          if (Array.isArray(schema.enum) && schema.enum.length > 0) {\n            paramSchema[key] = isRequired\n              ? z.enum(schema.enum as [string, ...string[]])\n              : z.enum(schema.enum as [string, ...string[]]).optional();\n          } else {\n            paramSchema[key] = isRequired ? stringSchema : stringSchema.optional();\n          }\n        } else {\n          paramSchema[key] = isRequired ? stringSchema : stringSchema.optional();\n        }\n        break;\n\n      case \"number\":\n      case \"integer\":\n        let numberSchema = z.number();\n\n        if (typeof schema.minimum === \"number\") {\n          numberSchema = numberSchema.min(schema.minimum);\n        }\n        if (typeof schema.maximum === \"number\") {\n          numberSchema = numberSchema.max(schema.maximum);\n        }\n\n        paramSchema[key] = isRequired ? numberSchema : numberSchema.optional();\n        break;\n\n      case \"boolean\":\n        paramSchema[key] = isRequired ? z.boolean() : z.boolean().optional();\n        break;\n\n      case \"array\":\n        if (schema.items) {\n          if (\"$ref\" in schema.items) {\n            paramSchema[key] = isRequired ? z.array(z.any()) : z.array(z.any()).optional();\n          } else {\n            const itemSchema = schema.items as SchemaObject;\n            const itemType = itemSchema.type;\n\n            if (itemType === \"string\") {\n              paramSchema[key] = isRequired ? z.array(z.string()) : z.array(z.string()).optional();\n            } else if (itemType === \"number\" || itemType === \"integer\") {\n              paramSchema[key] = isRequired ? z.array(z.number()) : z.array(z.number()).optional();\n            } else if (itemType === \"boolean\") {\n              paramSchema[key] = isRequired ? z.array(z.boolean()) : z.array(z.boolean()).optional();\n            } else {\n              paramSchema[key] = isRequired ? z.array(z.any()) : z.array(z.any()).optional();\n            }\n          }\n        } else {\n          paramSchema[key] = isRequired ? z.array(z.any()) : z.array(z.any()).optional();\n        }\n        break;\n\n      case \"object\":\n        paramSchema[key] = isRequired ? z.record(z.any()) : z.record(z.any()).optional();\n        break;\n\n      default:\n        logger.debug(`Unknown parameter type ${schemaType} for ${key}, defaulting to any`);\n        paramSchema[key] = isRequired ? z.any() : z.any().optional();\n    }\n    if (schema.description && paramSchema[key]) {\n      paramSchema[key] = (paramSchema[key] as z.ZodType).describe(schema.description);\n    }\n  }\n\n  return paramSchema;\n}\n\nexport function buildRequestConfig(\n  logger: Logger,\n  apiCallMethod: string,\n  apiCallUrl: string,\n  baseUrl: string,\n  specParameters: Record<string, ParameterObject>,\n  callParameters: Record<string, unknown>,\n  toolName: string,\n): { config: AxiosRequestConfig; missingRequiredParam?: string } {\n  const config: AxiosRequestConfig = {\n    method: apiCallMethod.toLowerCase(),\n    url: apiCallUrl.startsWith(\"http\") ? apiCallUrl : baseUrl ? `${baseUrl}${apiCallUrl}` : apiCallUrl,\n    headers: {},\n    params: {},\n    data: null,\n  };\n\n  for (const [key, param] of Object.entries(specParameters)) {\n    if (!param || typeof param !== \"object\") {\n      continue;\n    }\n\n    let value = callParameters[key];\n    if (value === undefined) {\n      if (param.schema && \"default\" in param.schema) {\n        value = param.schema.default;\n        logger.debug(`Using default value for parameter ${key}: ${value}`);\n      } else if (param.required) {\n        logger.debug(`Required parameter ${key} missing for tool ${toolName}`);\n        return { config, missingRequiredParam: key };\n      } else {\n        logger.debug(`Optional parameter ${key} not provided`);\n        continue;\n      }\n    }\n\n    if (!param.in) {\n      continue;\n    }\n\n    switch (param.in) {\n      case \"query\":\n        logger.debug(`Adding query parameter ${key}=${value}`);\n        config.params = config.params || {};\n        if (Array.isArray(value)) {\n          config.params[key] = param.explode\n            ? value\n                .map(String)\n                .map((v) => encodeURIComponent(v))\n                .join(\"&\")\n            : value.map(String).map(encodeURIComponent).join(\",\");\n        } else {\n          config.params[key] = value;\n        }\n        break;\n\n      case \"path\":\n        logger.debug(`Replacing path parameter ${key}=${value}`);\n        const pathValue = typeof value === \"number\" ? Math.floor(value).toString() : String(value);\n        config.url = config.url?.replace(`{${key}}`, encodeURIComponent(pathValue));\n        break;\n\n      case \"header\":\n        logger.debug(`Adding header ${key}=${value}`);\n        config.headers = config.headers || {};\n        config.headers[key] = String(value);\n        break;\n\n      case \"cookie\":\n        logger.debug(`Adding cookie ${key}=${value}`);\n        const cookieValue = `${key}=${encodeURIComponent(String(value))}`;\n        if (config.headers?.Cookie) {\n          config.headers.Cookie += `; ${cookieValue}`;\n        } else {\n          config.headers = config.headers || {};\n          config.headers.Cookie = cookieValue;\n        }\n        break;\n\n      default:\n        if ([\"POST\", \"PUT\", \"PATCH\"].includes(apiCallMethod)) {\n          logger.debug(`Adding ${key} to request body`);\n          config.data = config.data || {};\n          (config.data as Record<string, unknown>)[key] = value;\n        }\n    }\n  }\n\n  config.headers = config.headers || {};\n\n  if ([\"POST\", \"PUT\", \"PATCH\"].includes(apiCallMethod)) {\n    const bodyParams: Record<string, unknown> = {};\n    let hasBodyParameter = false;\n\n    for (const [key, param] of Object.entries(specParameters)) {\n      if (param.in === \"body\" && callParameters[key] !== undefined) {\n        logger.debug(`Found body parameter: ${key}`);\n        config.data = callParameters[key];\n        config.headers[\"Content-Type\"] = \"application/json\";\n        hasBodyParameter = true;\n        break;\n      }\n    }\n\n    if (!hasBodyParameter) {\n      for (const [key, value] of Object.entries(callParameters)) {\n        const param = specParameters[key];\n        if (!param || (param.in !== \"query\" && param.in !== \"path\" && param.in !== \"header\" && param.in !== \"cookie\")) {\n          bodyParams[key] = value;\n        }\n      }\n\n      if (Object.keys(bodyParams).length > 0) {\n        logger.debug(`Building request body from non-path/query/header parameters`);\n        config.data = bodyParams;\n        config.headers[\"Content-Type\"] = \"application/json\";\n      }\n    }\n  }\n\n  if (callParameters[\"Authorization\"]) {\n    config.headers[\"Authorization\"] = callParameters[\"Authorization\"];\n  }\n\n  return { config };\n}\n", "import { NextFunction, Response } from \"express\";\nimport { Logger } from \"winston\";\nimport { ServerAuthService } from \"../services/server-auth.service.js\";\nimport { AppRequest } from \"../utils/req-guards.js\";\n\nexport function createServerAuthMiddleware(serverAuthService: ServerAuthService, logger?: Logger) {\n  return async (req: AppRequest, res: Response, next: NextFunction) => {\n    try {\n      // Extract server ID from request (set by serverIdMiddleware) or fallback to params/headers\n      const serverId = (req as AppRequest).serverId || req.params.serverId || (req.headers[\"x-server-id\"] as string);\n\n      if (!serverId) {\n        logger?.warn(\"Server authentication failed: missing server ID\", {\n          path: req.path,\n          method: req.method,\n          headers: req.headers,\n        });\n        return res.status(400).json({\n          error: \"Server ID is required for authentication\",\n        });\n      }\n\n      // Authenticate the request for this specific server using strategy pattern\n      const authResult = await serverAuthService.authenticateServerRequest(req, serverId);\n\n      if (!authResult.success) {\n        logger?.warn(\"Server authentication failed\", {\n          serverId,\n          error: authResult.error,\n          path: req.path,\n          method: req.method,\n          authType: authResult.userContext?.authType,\n        });\n        return res.status(401).json({\n          error: \"Authentication failed\",\n          details: authResult.error,\n        });\n      }\n\n      // Log successful authentication\n      logger?.info(\"Server authentication successful\", {\n        serverId,\n        authType: authResult.userContext?.authType,\n        userId: authResult.userContext?.userId,\n        tenantId: authResult.userContext?.tenantId,\n        path: req.path,\n        method: req.method,\n      });\n\n      // Attach authentication result to request for downstream handlers\n      req.serverAuth = authResult;\n      req.serverId = serverId;\n\n      next();\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      logger?.error(\"Internal authentication error\", {\n        serverId: req.params.serverId || req.headers[\"x-server-id\"],\n        error: errorMessage,\n        path: req.path,\n        method: req.method,\n      });\n      res.status(500).json({\n        error: \"Internal authentication error\",\n        details: errorMessage,\n      });\n    }\n  };\n}\n\n/**\n * Optional middleware for routes that need authentication but want to handle failures gracefully\n * This middleware will attempt authentication but never block the request, making auth data\n * available to downstream handlers for conditional logic\n */\nexport function createOptionalServerAuthMiddleware(serverAuthService: ServerAuthService, logger?: Logger) {\n  return async (req: AppRequest, res: Response, next: NextFunction) => {\n    try {\n      const serverId = req.params.serverId || (req.headers[\"x-server-id\"] as string);\n\n      if (serverId) {\n        logger?.debug(\"Attempting optional server authentication\", {\n          serverId,\n          path: req.path,\n          method: req.method,\n        });\n\n        const authResult = await serverAuthService.authenticateServerRequest(req, serverId);\n        req.serverAuth = authResult;\n        req.serverId = serverId;\n\n        if (authResult.success) {\n          logger?.debug(\"Optional server authentication successful\", {\n            serverId,\n            authType: authResult.userContext?.authType,\n            userId: authResult.userContext?.userId,\n          });\n        } else {\n          logger?.debug(\"Optional server authentication failed\", {\n            serverId,\n            error: authResult.error,\n          });\n        }\n      } else {\n        logger?.debug(\"No server ID provided for optional authentication\", {\n          path: req.path,\n          method: req.method,\n        });\n      }\n\n      // Always continue regardless of authentication result\n      next();\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      logger?.warn(\"Optional authentication encountered error\", {\n        serverId: req.params.serverId || req.headers[\"x-server-id\"],\n        error: errorMessage,\n        path: req.path,\n        method: req.method,\n      });\n      // Don't block the request even on error\n      next();\n    }\n  };\n}\n", "import { NextFunction, Request, Response } from \"express\";\nimport { isAppRequest } from \"../utils/req-guards.js\";\n\nexport const serverIdMiddleware = (req: Request, _res: Response, next: NextFunction): void => {\n  if (!isAppRequest(req)) {\n    throw new Error(\"Request does not have logger or db\");\n  }\n\n  const serverIdOverride: string | undefined = process.env.LOCAL_SERVER_ID;\n\n  if (serverIdOverride) {\n    req.logger.debug(`Using local server ID: ${serverIdOverride}`);\n    req.serverId = serverIdOverride;\n  } else {\n    // Check for serverId in query parameters first (for local development)\n    const queryServerId = req.query.serverId as string;\n    if (queryServerId) {\n      req.logger.debug(`Using server ID from query parameter: ${queryServerId}`);\n      req.serverId = queryServerId;\n      req.logger = req.logger.child({\n        serverId: queryServerId,\n      });\n    } else {\n      // when deployed, we expected hostname to be in the format <serverId>.something.agentpass.ai\n      const serverId: string | undefined = req.hostname.split(\".\")[0];\n      if (serverId === \"app\") {\n        throw new Error(`Wrong hostname was used for the mcp server request: ${req.hostname}`);\n      }\n      req.logger.debug(`Using server ID from hostname: ${serverId}`);\n      req.serverId = serverId;\n      req.logger = req.logger.child({\n        serverId,\n      });\n    }\n  }\n\n  next();\n};\n", "import { createPublicKey } from \"crypto\";\nimport jwt from \"jsonwebtoken\";\nimport { Logger } from \"winston\";\n\nexport interface JwtValidationResult {\n  valid: boolean;\n  error?: string;\n  payload?: unknown;\n}\n\ninterface JwtKey {\n  kid: string;\n  kty: string;\n  use?: string;\n  n: string;\n  e: string;\n  x5c?: string[];\n}\n\ninterface CachedJwtKeys {\n  keys: JwtKey[];\n  expiry: number;\n  lastFetch: number;\n  failureCount: number;\n}\n\ninterface CircuitBreakerState {\n  state: \"CLOSED\" | \"OPEN\" | \"HALF_OPEN\";\n  failureCount: number;\n  lastFailureTime: number;\n  nextAttemptTime: number;\n}\n\ninterface CacheStats {\n  keyCount: number;\n  lastFetch: string;\n  expiry: string;\n  expired: boolean;\n  failureCount: number;\n  circuitBreakerState: string;\n  rateLimitCount: number;\n}\n\ninterface RateLimitState {\n  count: number;\n  windowStart: number;\n}\n\n/**\n * Production-ready JWT Authentication Service\n *\n * Features:\n * - JWT signature-only verification (no payload validation)\n * - RSA key support with key rotation (RS256, RS384, RS512 only)\n * - Intelligent caching with 1-hour TTL and early refresh\n * - Circuit breaker for unreachable JWKS endpoints\n * - Rate limiting for abuse prevention\n * - Comprehensive error handling and logging\n */\nexport class JwtAuthService {\n  private keyCache: Map<string, CachedJwtKeys> = new Map();\n  private circuitBreakers: Map<string, CircuitBreakerState> = new Map();\n  private rateLimits: Map<string, RateLimitState> = new Map();\n\n  // Configuration constants\n  private readonly CACHE_TTL = 3600000; // 1 hour\n  private readonly CACHE_REFRESH_THRESHOLD = 300000; // 5 minutes before expiry\n  private readonly CIRCUIT_BREAKER_FAILURE_THRESHOLD = 5;\n  private readonly CIRCUIT_BREAKER_TIMEOUT = 60000; // 1 minute\n  private readonly RATE_LIMIT_WINDOW = 60000; // 1 minute\n  private readonly RATE_LIMIT_MAX_REQUESTS = 10; // per window\n  private readonly REQUEST_TIMEOUT = 15000; // 15 seconds\n\n  constructor(private logger?: Logger) {}\n\n  /**\n   * Validate JWT signature using JWKS endpoint\n   * Implements comprehensive error handling and caching\n   */\n  async validateJwtSignature(token: string, jwksUrl: string): Promise<JwtValidationResult> {\n    try {\n      // Rate limiting check\n      if (!this.checkRateLimit(jwksUrl)) {\n        this.logger?.warn(\"Rate limit exceeded for JWKS endpoint\", { jwksUrl });\n        return { valid: false, error: \"Rate limit exceeded for JWKS endpoint\" };\n      }\n\n      // Decode the token header to get the key ID\n      const decoded = jwt.decode(token, { complete: true });\n      if (!decoded || typeof decoded === \"string\") {\n        return { valid: false, error: \"Invalid JWT format\" };\n      }\n\n      const kid = decoded.header.kid;\n      if (!kid) {\n        return { valid: false, error: \"Missing key ID in JWT header\" };\n      }\n\n      // Get algorithm from header\n      const algorithm = decoded.header.alg;\n      if (!algorithm || ![\"RS256\", \"RS384\", \"RS512\"].includes(algorithm)) {\n        return {\n          valid: false,\n          error: `Unsupported or missing algorithm: ${algorithm}. Only RS256, RS384, RS512 are supported.`,\n        };\n      }\n\n      // Get the JWKS keys (with caching and circuit breaker)\n      const keys = await this.fetchJwksKeysWithCircuitBreaker(jwksUrl);\n\n      // Find the key with matching kid\n      const jwksKey = keys.find((key) => key.kid === kid);\n      if (!jwksKey) {\n        // Try to refresh keys in case of key rotation\n        await this.refreshJwksKeys(jwksUrl);\n        const refreshedKeys = await this.fetchJwksKeysWithCircuitBreaker(jwksUrl);\n        const refreshedKey = refreshedKeys.find((key) => key.kid === kid);\n\n        if (!refreshedKey) {\n          return { valid: false, error: `Key ID ${kid} not found in JWKS after refresh` };\n        }\n\n        // Use the refreshed key\n        const publicKey = this.jwksKeyToPem(refreshedKey);\n        return this.verifySignature(token, publicKey, algorithm);\n      }\n\n      // Convert JWKS key to PEM format and verify\n      const publicKey = this.jwksKeyToPem(jwksKey);\n      return this.verifySignature(token, publicKey, algorithm);\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      this.logger?.error(\"JWT signature validation failed\", {\n        jwksUrl,\n        error: errorMessage,\n      });\n      return { valid: false, error: `JWT validation error: ${errorMessage}` };\n    }\n  }\n\n  /**\n   * Verify JWT signature with specific algorithm\n   */\n  private verifySignature(token: string, publicKey: string, algorithm: string): JwtValidationResult {\n    try {\n      // Signature-only verification - no payload validation\n      const payload = jwt.verify(token, publicKey, {\n        algorithms: [algorithm as jwt.Algorithm],\n        ignoreExpiration: true, // We only verify signature, not expiration\n      });\n\n      return { valid: true, payload };\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      this.logger?.warn(\"JWT signature verification failed\", { error: errorMessage });\n      return { valid: false, error: `Signature verification failed: ${errorMessage}` };\n    }\n  }\n\n  /**\n   * Fetch JWKS keys with circuit breaker pattern\n   */\n  async fetchJwksKeysWithCircuitBreaker(jwksUrl: string): Promise<JwtKey[]> {\n    const circuitState = this.getCircuitBreakerState(jwksUrl);\n\n    // Check circuit breaker state\n    if (circuitState.state === \"OPEN\") {\n      if (Date.now() < circuitState.nextAttemptTime) {\n        throw new Error(\n          `Circuit breaker OPEN for ${jwksUrl}. Next attempt at ${new Date(circuitState.nextAttemptTime).toISOString()}`,\n        );\n      } else {\n        // Move to half-open state\n        circuitState.state = \"HALF_OPEN\";\n      }\n    }\n\n    try {\n      const keys = await this.fetchJwksKeys(jwksUrl);\n\n      // Success - reset circuit breaker\n      if (circuitState.state !== \"CLOSED\") {\n        circuitState.state = \"CLOSED\";\n        circuitState.failureCount = 0;\n      }\n\n      return keys;\n    } catch (error) {\n      // Handle failure\n      circuitState.failureCount++;\n      circuitState.lastFailureTime = Date.now();\n\n      if (circuitState.failureCount >= this.CIRCUIT_BREAKER_FAILURE_THRESHOLD) {\n        circuitState.state = \"OPEN\";\n        circuitState.nextAttemptTime = Date.now() + this.CIRCUIT_BREAKER_TIMEOUT;\n        this.logger?.error(\"Circuit breaker OPEN due to failures\", {\n          jwksUrl,\n          failureCount: circuitState.failureCount,\n        });\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Fetch JWKS keys with intelligent caching\n   */\n  async fetchJwksKeys(jwksUrl: string): Promise<JwtKey[]> {\n    try {\n      // Check cache first\n      const cached = this.keyCache.get(jwksUrl);\n      if (cached) {\n        const now = Date.now();\n\n        // If not expired, return cached keys\n        if (now < cached.expiry) {\n          // Check if we should refresh early (intelligent refresh)\n          if (now > cached.expiry - this.CACHE_REFRESH_THRESHOLD) {\n            // Refresh in background without blocking\n            this.refreshJwksKeysInBackground(jwksUrl);\n          }\n          return cached.keys;\n        }\n      }\n\n      // Fetch fresh keys\n      return await this.fetchFreshJwksKeys(jwksUrl);\n    } catch (error) {\n      // If fetch fails and we have stale cached keys, use them\n      const cached = this.keyCache.get(jwksUrl);\n      if (cached && cached.keys.length > 0) {\n        this.logger?.warn(\"Using stale cached JWKS keys due to fetch failure\", {\n          jwksUrl,\n          cacheAge: Date.now() - cached.lastFetch,\n        });\n        return cached.keys;\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Fetch fresh JWKS keys from endpoint\n   */\n  private async fetchFreshJwksKeys(jwksUrl: string): Promise<JwtKey[]> {\n    const response = await fetch(jwksUrl, {\n      method: \"GET\",\n      headers: {\n        Accept: \"application/json\",\n        \"User-Agent\": \"AgentBridge/1.0\",\n        \"Cache-Control\": \"no-cache\",\n      },\n      signal: AbortSignal.timeout(this.REQUEST_TIMEOUT),\n    });\n\n    if (!response.ok) {\n      throw new Error(`JWKS endpoint error: HTTP ${response.status} ${response.statusText}`);\n    }\n\n    const jwks = (await response.json()) as Record<string, unknown>;\n\n    if (!jwks.keys || !Array.isArray(jwks.keys)) {\n      throw new Error(\"Invalid JWKS format: missing or invalid keys array\");\n    }\n\n    // Filter for RSA signature keys only\n    const rsaKeys = jwks.keys\n      .filter((key: unknown) => {\n        if (typeof key === \"object\" && key !== null) {\n          const jwksKey = key as Record<string, unknown>;\n          return (\n            jwksKey.kty === \"RSA\" &&\n            (jwksKey.use === \"sig\" || !jwksKey.use) && // use is optional, default to sig\n            jwksKey.n &&\n            jwksKey.e &&\n            jwksKey.kid\n          );\n        }\n        return false;\n      })\n      .map((key) => key as JwtKey);\n\n    if (rsaKeys.length === 0) {\n      throw new Error(\"No valid RSA signature keys found in JWKS\");\n    }\n\n    // Update cache\n    const now = Date.now();\n    this.keyCache.set(jwksUrl, {\n      keys: rsaKeys,\n      expiry: now + this.CACHE_TTL,\n      lastFetch: now,\n      failureCount: 0,\n    });\n\n    return rsaKeys;\n  }\n\n  /**\n   * Refresh JWKS keys in background\n   */\n  private async refreshJwksKeysInBackground(jwksUrl: string): Promise<void> {\n    try {\n      await this.fetchFreshJwksKeys(jwksUrl);\n    } catch (error) {\n      this.logger?.warn(\"Background JWKS refresh failed\", {\n        jwksUrl,\n        error: error instanceof Error ? error.message : String(error),\n      });\n    }\n  }\n\n  /**\n   * Force refresh JWKS keys (for key rotation)\n   */\n  private async refreshJwksKeys(jwksUrl: string): Promise<void> {\n    await this.fetchFreshJwksKeys(jwksUrl);\n  }\n\n  /**\n   * Check rate limiting for JWKS endpoint\n   */\n  private checkRateLimit(jwksUrl: string): boolean {\n    const now = Date.now();\n    const rateLimit = this.rateLimits.get(jwksUrl) || { count: 0, windowStart: now };\n\n    // Reset window if expired\n    if (now - rateLimit.windowStart > this.RATE_LIMIT_WINDOW) {\n      rateLimit.count = 0;\n      rateLimit.windowStart = now;\n    }\n\n    // Check if limit exceeded\n    if (rateLimit.count >= this.RATE_LIMIT_MAX_REQUESTS) {\n      return false;\n    }\n\n    // Increment count\n    rateLimit.count++;\n    this.rateLimits.set(jwksUrl, rateLimit);\n    return true;\n  }\n\n  /**\n   * Get circuit breaker state for endpoint\n   */\n  private getCircuitBreakerState(jwksUrl: string): CircuitBreakerState {\n    if (!this.circuitBreakers.has(jwksUrl)) {\n      this.circuitBreakers.set(jwksUrl, {\n        state: \"CLOSED\",\n        failureCount: 0,\n        lastFailureTime: 0,\n        nextAttemptTime: 0,\n      });\n    }\n    return this.circuitBreakers.get(jwksUrl)!;\n  }\n\n  /**\n   * Convert JWKS key to proper format for verification using Node.js crypto\n   */\n  private jwksKeyToPem(jwksKey: JwtKey): string {\n    try {\n      // Create RSA public key from JWKS components using Node.js crypto\n      const publicKey = createPublicKey({\n        key: {\n          kty: jwksKey.kty,\n          n: jwksKey.n,\n          e: jwksKey.e,\n        },\n        format: \"jwk\",\n      });\n\n      // Export as PEM format\n      return publicKey.export({ type: \"spki\", format: \"pem\" }) as string;\n    } catch (error) {\n      throw new Error(`Failed to convert JWKS key to PEM: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  }\n\n  /**\n   * Get cache statistics for monitoring\n   */\n  getCacheStats(): Record<string, CacheStats> {\n    const stats: Record<string, CacheStats> = {};\n\n    for (const [url, cached] of this.keyCache.entries()) {\n      const circuitState = this.circuitBreakers.get(url);\n      const rateLimit = this.rateLimits.get(url);\n\n      stats[url] = {\n        keyCount: cached.keys.length,\n        lastFetch: new Date(cached.lastFetch).toISOString(),\n        expiry: new Date(cached.expiry).toISOString(),\n        expired: Date.now() > cached.expiry,\n        failureCount: cached.failureCount,\n        circuitBreakerState: circuitState?.state || \"UNKNOWN\",\n        rateLimitCount: rateLimit?.count || 0,\n      };\n    }\n\n    return stats;\n  }\n}\n", "import { McpServer } from \"@prisma/client\";\nimport { Logger } from \"winston\";\nimport { APP_INSUFFICIENT_PERMISSIONS, APP_INVALID_SERVER } from \"../types/error.types.js\";\nimport { Database } from \"../utils/connection.js\";\nimport { CacheItemType, cacheGetOrAdd } from \"./cache.service.js\";\n\ninterface ServerAccessResult {\n  userNotFound?: boolean;\n  error?: {\n    code: number;\n    message: string;\n  };\n}\n\nexport async function validateServerAccess(\n  db: Database,\n  logger: Logger,\n  serverId: string,\n  userEmail: string,\n): Promise<ServerAccessResult> {\n  logger.debug(`Validating server access for user ${userEmail} and server ${serverId}`);\n\n  return await cacheGetOrAdd<ServerAccessResult>(\n    { type: CacheItemType.SERVER_ACCESS, ids: [serverId, userEmail] },\n    async () => {\n      const server = await cacheGetOrAdd<McpServer | null>(\n        { type: CacheItemType.SERVER, ids: [serverId] },\n        async () => {\n          return await db.mcpServer.findFirst({\n            where: {\n              id: serverId,\n            },\n          });\n        },\n      );\n\n      if (!server) {\n        return {\n          error: {\n            code: APP_INVALID_SERVER,\n            message: `Server not found: ${serverId}`,\n          },\n        };\n      }\n\n      if (!server.enabled) {\n        return {\n          error: {\n            code: APP_INVALID_SERVER,\n            message: `Server is not enabled: ${serverId}`,\n          },\n        };\n      }\n\n      logger.debug(`Looking for user with email: ${userEmail} and tenantId: ${server.tenantId}`);\n      const user = await db.endUser.findFirst({\n        where: {\n          email: userEmail,\n          tenantId: server.tenantId,\n        },\n        select: {\n          id: true,\n          enabled: true,\n        },\n      });\n      if (!user) {\n        return { userNotFound: true };\n      }\n\n      if (!user.enabled) {\n        return {\n          error: {\n            code: APP_INSUFFICIENT_PERMISSIONS,\n            message: `User ${userEmail} does not have access to server: ${serverId}`,\n          },\n        };\n      }\n\n      return {};\n    },\n  );\n}\n", "import { ServerAuthType } from \"@agentbridge/api\";\nimport { Request } from \"express\";\nimport { isAppRequest } from \"../../utils/req-guards.js\";\nimport {\n  AuthProvider,\n  CreateProviderRequest,\n  IServerAuthStrategy,\n  ServerAuthConfig,\n  ServerAuthResult,\n  UpdateProviderRequest,\n  ValidationResult,\n} from \"../interfaces/auth-strategy.interface.js\";\nimport { validateServerAccess } from \"../mcp-access.service.js\";\n\n/**\n * BaseAuthStrategy implements the existing AgentBridge authentication logic\n * This wraps the current user/tenant validation that was already in place\n */\nexport class BaseAuthStrategy implements IServerAuthStrategy {\n  async authenticate(req: Request, config: ServerAuthConfig): Promise<ServerAuthResult> {\n    try {\n      // Ensure we have proper request context\n      if (!isAppRequest(req)) {\n        return {\n          success: false,\n          error: \"Invalid request context for authentication\",\n        };\n      }\n\n      // Extract and verify user token from Authorization header\n      const authHeader = req.headers.authorization;\n      if (!authHeader || !authHeader.startsWith(\"Bearer \")) {\n        return {\n          success: false,\n          error: \"No authorization header provided for BASE authentication\",\n        };\n      }\n\n      const token = authHeader.split(\" \")[1];\n\n      // Import JWT service for token verification\n      const { verifyEndUserToken } = await import(\"../jwt.service.js\");\n\n      // Verify the user token\n      const decoded = await verifyEndUserToken(token);\n      if (!decoded) {\n        return {\n          success: false,\n          error: \"Invalid or expired user token\",\n        };\n      }\n\n      const userEmail = decoded.email;\n      if (!userEmail) {\n        return {\n          success: false,\n          error: \"No user email found in token\",\n        };\n      }\n\n      // Use existing AgentBridge validation logic\n      const accessResult = await validateServerAccess(req.db, req.logger, config.serverId, userEmail);\n\n      // Handle validation results\n      if (accessResult.error) {\n        return {\n          success: false,\n          error: accessResult.error.message,\n        };\n      }\n\n      if (accessResult.userNotFound) {\n        return {\n          success: false,\n          error: `User ${userEmail} not found or does not have access to server`,\n        };\n      }\n\n      // Success - get user and tenant info for context\n      const user = await req.db.endUser.findFirst({\n        where: {\n          email: userEmail,\n        },\n        select: {\n          id: true,\n          tenantId: true,\n        },\n      });\n\n      return {\n        success: true,\n        userContext: {\n          userId: user?.id,\n          tenantId: user?.tenantId,\n          authType: ServerAuthType.BASE,\n        },\n        metadata: {\n          validatedAt: new Date(),\n        },\n      };\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      return {\n        success: false,\n        error: `Base authentication failed: ${errorMessage}`,\n      };\n    }\n  }\n\n  async validateConfiguration(config: ServerAuthConfig): Promise<ValidationResult> {\n    // BASE authentication doesn't require any special configuration\n    // It uses the existing AgentBridge user/tenant validation\n    return {\n      valid: true,\n    };\n  }\n\n  /**\n   * Get providers for BASE auth (returns empty array as BASE auth doesn't use providers)\n   */\n  async getProviders(serverId: string): Promise<AuthProvider[]> {\n    // BASE authentication doesn't use providers\n    return [];\n  }\n\n  /**\n   * Create provider for BASE auth (not applicable)\n   */\n  async createProvider(serverId: string, providerData: CreateProviderRequest): Promise<AuthProvider> {\n    throw new Error(\"BASE authentication does not support providers\");\n  }\n\n  /**\n   * Update provider for BASE auth (not applicable)\n   */\n  async updateProvider(\n    serverId: string,\n    providerId: string,\n    providerData: UpdateProviderRequest,\n  ): Promise<AuthProvider> {\n    throw new Error(\"BASE authentication does not support providers\");\n  }\n\n  /**\n   * Delete provider for BASE auth (not applicable)\n   */\n  async deleteProvider(serverId: string, providerId: string): Promise<void> {\n    throw new Error(\"BASE authentication does not support providers\");\n  }\n\n  /**\n   * Handle BASE configuration update (no special config needed)\n   */\n  async handleConfigUpdate(\n    serverId: string,\n    config: { authType: ServerAuthType; jwtProviderId?: string },\n  ): Promise<string | null> {\n    // BASE authentication doesn't require auth config\n    return null;\n  }\n}\n", "import { ServerAuthType } from \"@agentbridge/api\";\nimport { PrismaClient } from \"@prisma/client\";\nimport { Request } from \"express\";\nimport { Logger } from \"winston\";\nimport {\n  CreateJwtProviderRequest,\n  IServerAuthStrategy,\n  JwtProvider,\n  ServerAuthConfig,\n  ServerAuthResult,\n  UpdateJwtProviderRequest,\n  ValidationResult,\n} from \"../interfaces/auth-strategy.interface.js\";\nimport { JwtAuthService } from \"../jwt-auth.service.js\";\n\n/**\n * JwtAuthStrategy implements JWT signature verification using JWT endpoints\n * This validates JWT tokens using the configured JWT provider\n */\nexport class JwtAuthStrategy implements IServerAuthStrategy {\n  constructor(\n    private jwtService: JwtAuthService,\n    private db: PrismaClient,\n    private logger?: Logger,\n  ) {}\n\n  async authenticate(req: Request, config: ServerAuthConfig): Promise<ServerAuthResult> {\n    try {\n      // Validate configuration\n      if (!config.jwtProvider) {\n        return {\n          success: false,\n          error: \"JWT provider not configured for this server\",\n        };\n      }\n\n      if (!config.jwtProvider.enabled) {\n        return {\n          success: false,\n          error: \"JWT provider is disabled\",\n        };\n      }\n\n      // Extract JWT token from request\n      const token = this.extractJwtToken(req);\n      if (!token) {\n        return {\n          success: false,\n          error: \"No JWT token found in request. Expected Authorization header with Bearer token.\",\n        };\n      }\n\n      // Validate JWT signature using JWKS\n      const validationResult = await this.jwtService.validateJwtSignature(token, config.jwtProvider.jwksUrl);\n\n      if (!validationResult.valid) {\n        return {\n          success: false,\n          error: validationResult.error || \"JWT signature validation failed\",\n        };\n      }\n\n      // Extract user information from validated JWT token\n      let userId: string | undefined;\n      let tenantId: string | undefined;\n\n      if (validationResult.payload && typeof validationResult.payload === \"object\") {\n        const payload = validationResult.payload as Record<string, unknown>;\n        userId = (payload.id as string) || (payload.sub as string);\n        tenantId = payload.tenantId as string;\n\n        this.logger?.debug(\"JWT authentication extracted user context\", {\n          userId,\n          tenantId,\n          providerId: config.jwtProvider.id,\n        });\n      }\n\n      // Success: return auth result with JWT context\n      return {\n        success: true,\n        userContext: {\n          userId,\n          tenantId,\n          authType: ServerAuthType.JWT,\n          originalToken: token,\n        },\n        metadata: {\n          providerId: config.jwtProvider.id,\n          validatedAt: new Date(),\n        },\n      };\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      this.logger?.error(\"JWT authentication failed\", { error: errorMessage });\n      return {\n        success: false,\n        error: `JWT authentication failed: ${errorMessage}`,\n      };\n    }\n  }\n\n  async validateConfiguration(config: ServerAuthConfig): Promise<ValidationResult> {\n    const errors: string[] = [];\n\n    // Check if JWT provider is configured\n    if (!config.jwtProvider) {\n      errors.push(\"JWT provider is required for JWT authentication\");\n    } else {\n      // Validate JWT provider configuration\n      if (!config.jwtProvider.jwksUrl) {\n        errors.push(\"JWKS URL is required\");\n      } else {\n        // Validate URL format\n        try {\n          new URL(config.jwtProvider.jwksUrl);\n        } catch {\n          errors.push(\"Invalid JWKS URL format\");\n        }\n      }\n\n      if (!config.jwtProvider.enabled) {\n        errors.push(\"JWT provider is disabled\");\n      }\n\n      // Test JWKS endpoint accessibility (optional validation)\n      if (config.jwtProvider.jwksUrl && config.jwtProvider.enabled) {\n        try {\n          await this.jwtService.fetchJwksKeys(config.jwtProvider.jwksUrl);\n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : String(error);\n          errors.push(`JWKS endpoint test failed: ${errorMessage}`);\n        }\n      }\n    }\n\n    return {\n      valid: errors.length === 0,\n      errors: errors.length > 0 ? errors : undefined,\n    };\n  }\n\n  /**\n   * Get JWT providers for a server\n   */\n  async getProviders(serverId: string): Promise<JwtProvider[]> {\n    try {\n      const providers = await this.db.serverJwtProvider.findMany({\n        where: { serverId },\n        orderBy: { createdAt: \"desc\" },\n      });\n      return providers as JwtProvider[];\n    } catch (error) {\n      this.logger?.error(\"Failed to get JWT providers\", { serverId, error });\n      throw error;\n    }\n  }\n\n  /**\n   * Create JWT provider for a server\n   */\n  async createProvider(serverId: string, providerData: CreateJwtProviderRequest): Promise<JwtProvider> {\n    const { name, jwksUrl, enabled = true } = providerData;\n\n    try {\n      // Get server to extract tenantId\n      const server = await this.db.mcpServer.findUnique({\n        where: { id: serverId },\n        select: { tenantId: true },\n      });\n\n      if (!server) {\n        throw new Error(`Server ${serverId} not found`);\n      }\n\n      const provider = await this.db.serverJwtProvider.create({\n        data: {\n          serverId,\n          tenantId: server.tenantId,\n          name,\n          jwksUrl,\n          enabled,\n        },\n      });\n\n      return provider as JwtProvider;\n    } catch (error) {\n      this.logger?.error(\"Failed to create JWT provider\", { serverId, error });\n      throw error;\n    }\n  }\n\n  /**\n   * Update JWT provider for a server\n   */\n  async updateProvider(\n    serverId: string,\n    providerId: string,\n    providerData: UpdateJwtProviderRequest,\n  ): Promise<JwtProvider> {\n    const { name, jwksUrl, enabled } = providerData;\n\n    try {\n      const provider = await this.db.serverJwtProvider.update({\n        where: {\n          id: providerId,\n          serverId, // Ensure provider belongs to the server\n        },\n        data: {\n          ...(name !== undefined && { name }),\n          ...(jwksUrl !== undefined && { jwksUrl }),\n          ...(enabled !== undefined && { enabled }),\n        },\n      });\n\n      return provider as JwtProvider;\n    } catch (error) {\n      this.logger?.error(\"Failed to update JWT provider\", { serverId, providerId, error });\n      throw error;\n    }\n  }\n\n  /**\n   * Delete JWT provider for a server\n   */\n  async deleteProvider(serverId: string, providerId: string): Promise<void> {\n    try {\n      await this.db.serverJwtProvider.delete({\n        where: {\n          id: providerId,\n          serverId, // Ensure provider belongs to the server\n        },\n      });\n    } catch (error) {\n      this.logger?.error(\"Failed to delete JWT provider\", { serverId, providerId, error });\n      throw error;\n    }\n  }\n\n  /**\n   * Handle JWT configuration update\n   */\n  async handleConfigUpdate(\n    serverId: string,\n    config: { authType: ServerAuthType; jwtProviderId?: string },\n  ): Promise<string | null> {\n    if (!config.jwtProviderId) {\n      return null;\n    }\n\n    try {\n      const existingAuthConfig = await this.db.serverAuthConfig.findUnique({\n        where: { serverId },\n      });\n\n      if (existingAuthConfig) {\n        // Update existing auth config\n        await this.db.serverAuthConfig.update({\n          where: { id: existingAuthConfig.id },\n          data: {\n            authType: config.authType,\n            jwtProviderId: config.jwtProviderId,\n          },\n        });\n        return existingAuthConfig.id;\n      } else {\n        // Create new auth config\n        const newAuthConfig = await this.db.serverAuthConfig.create({\n          data: {\n            serverId,\n            authType: config.authType,\n            jwtProviderId: config.jwtProviderId,\n          },\n        });\n        return newAuthConfig.id;\n      }\n    } catch (error) {\n      this.logger?.error(\"Failed to handle JWT config update\", { serverId, error });\n      throw error;\n    }\n  }\n\n  /**\n   * Extract JWT token from various request locations\n   * Supports: Authorization header (Bearer), query parameter, custom headers\n   */\n  private extractJwtToken(req: Request): string | null {\n    // 1. Check Authorization header (Bearer token)\n    const authHeader = req.headers.authorization;\n    if (authHeader && authHeader.startsWith(\"Bearer \")) {\n      return authHeader.substring(7); // Remove \"Bearer \" prefix\n    }\n\n    // 2. Check for token in query parameters\n    const queryToken = req.query.token;\n    if (typeof queryToken === \"string\") {\n      return queryToken;\n    }\n\n    // 3. Check custom header (x-auth-token)\n    const customHeader = req.headers[\"x-auth-token\"];\n    if (typeof customHeader === \"string\") {\n      return customHeader;\n    }\n\n    // 4. Check body for token (for POST requests)\n    const bodyToken = req.body?.token;\n    if (typeof bodyToken === \"string\") {\n      return bodyToken;\n    }\n\n    return null;\n  }\n}\n", "import { ServerAuthType } from \"@agentbridge/api\";\nimport { PrismaClient } from \"@prisma/client\";\nimport { Logger } from \"winston\";\nimport { IServerAuthStrategy } from \"../interfaces/auth-strategy.interface.js\";\nimport { JwtAuthService } from \"../jwt-auth.service.js\";\nimport { BaseAuthStrategy } from \"../strategies/base-auth.strategy.js\";\nimport { JwtAuthStrategy } from \"../strategies/jwt-auth.strategy.js\";\n\n/**\n * Factory for creating authentication strategies based on server configuration\n * Implements strategy pattern to avoid hardcoded if/else authentication logic\n */\nexport class AuthStrategyFactory {\n  private strategies: Map<ServerAuthType, IServerAuthStrategy> = new Map();\n\n  constructor(db: PrismaClient, logger?: Logger) {\n    // Initialize available strategies\n    this.strategies.set(ServerAuthType.BASE, new BaseAuthStrategy());\n    this.strategies.set(ServerAuthType.JWT, new JwtAuthStrategy(new JwtAuthService(logger), db, logger));\n  }\n\n  /**\n   * Get authentication strategy for the given auth type\n   * @throws Error if auth type is not supported\n   */\n  getStrategy(authType: ServerAuthType): IServerAuthStrategy {\n    const strategy = this.strategies.get(authType);\n    if (!strategy) {\n      throw new Error(`Unsupported authentication strategy: ${authType}`);\n    }\n    return strategy;\n  }\n\n  /**\n   * Check if an auth type is supported\n   */\n  isSupported(authType: ServerAuthType): boolean {\n    return this.strategies.has(authType);\n  }\n\n  /**\n   * Get all supported auth types\n   */\n  getSupportedAuthTypes(): ServerAuthType[] {\n    return Array.from(this.strategies.keys());\n  }\n}\n", "import { ParameterLocation, ServerAuthType, UpdateServerAuthConfigRequest } from \"@agentbridge/api\";\nimport { PrismaClient } from \"@prisma/client\";\nimport { Request } from \"express\";\nimport { Logger } from \"winston\";\nimport { AuthStrategyFactory } from \"./factories/auth-strategy.factory.js\";\nimport {\n  AuthProvider,\n  CreateProviderRequest,\n  ServerAuthConfig,\n  ServerAuthResult,\n  UpdateProviderRequest,\n} from \"./interfaces/auth-strategy.interface.js\";\n\ninterface JwtKey {\n  kty: string;\n  use?: string;\n  alg?: string;\n  kid?: string;\n  n?: string;\n  e?: string;\n  x?: string;\n  y?: string;\n  crv?: string;\n  k?: string;\n  d?: string;\n  p?: string;\n  q?: string;\n  dp?: string;\n  dq?: string;\n  qi?: string;\n  x5c?: string[];\n  x5t?: string;\n  \"x5t#S256\"?: string;\n}\n\ninterface JwtResponse {\n  keys: JwtKey[];\n}\n\nexport interface ServerAuthConfigResponse {\n  serverId: string;\n  authType: ServerAuthType;\n  authConfig?: {\n    id: string;\n    authType: ServerAuthType;\n    jwtProvider?: {\n      id: string;\n      name: string;\n      jwksUrl: string;\n      enabled: boolean;\n    };\n  };\n}\n\n/**\n * ServerAuthService implements strategy-based server authentication\n *\n * This service uses the Strategy Pattern to handle different authentication types\n * NO HARDCODED IF/ELSE STATEMENTS - authentication method selection is configuration-driven\n */\nexport class ServerAuthService {\n  private strategyFactory: AuthStrategyFactory;\n\n  constructor(\n    private db: PrismaClient,\n    private logger?: Logger,\n  ) {\n    // Initialize strategy factory with all available authentication strategies\n    this.strategyFactory = new AuthStrategyFactory(db, logger);\n  }\n\n  /**\n   * Authenticate a server request using the configured authentication strategy\n   * This method uses the Strategy Pattern to avoid hardcoded authentication logic\n   */\n  async authenticateServerRequest(req: Request, serverId: string): Promise<ServerAuthResult> {\n    try {\n      this.logger?.debug(\"Authenticating server request\", { serverId });\n\n      // Get server auth configuration from database\n      const config = await this.getServerAuthConfig(serverId);\n      if (!config) {\n        return {\n          success: false,\n          error: `No authentication configuration found for server: ${serverId}`,\n        };\n      }\n\n      // Get appropriate strategy based on stored config (NO HARDCODED IF STATEMENTS)\n      const strategy = this.strategyFactory.getStrategy(config.authType);\n\n      // Execute authentication using strategy\n      const result = await strategy.authenticate(req, config);\n\n      this.logger?.debug(\"Authentication result\", {\n        serverId,\n        authType: config.authType,\n        success: result.success,\n      });\n\n      return result;\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      this.logger?.error(\"Failed to authenticate server request\", {\n        serverId,\n        error: errorMessage,\n      });\n      return {\n        success: false,\n        error: `Authentication failed: ${errorMessage}`,\n      };\n    }\n  }\n\n  /**\n   * Get server authentication configuration\n   */\n  async getServerAuthConfig(serverId: string): Promise<ServerAuthConfig | null> {\n    try {\n      this.logger?.debug(\"Getting server auth config\", { serverId });\n\n      const server = await this.db.mcpServer.findFirst({\n        where: { id: serverId },\n        include: {\n          authConfig: {\n            include: {\n              jwtProvider: true,\n            },\n          },\n        },\n      });\n\n      if (!server) {\n        throw new Error(`Server not found: ${serverId}`);\n      }\n\n      // If no explicit auth config exists, create default BASE auth config\n      if (!server.authConfig) {\n        return {\n          id: `default-${serverId}`,\n          serverId: server.id,\n          authType: (server.authType as ServerAuthType) || ServerAuthType.BASE,\n        };\n      }\n\n      return {\n        id: server.authConfig.id,\n        serverId: server.id,\n        authType: server.authConfig.authType as ServerAuthType,\n        jwtProviderId: server.authConfig.jwtProviderId || undefined,\n        jwtProvider: server.authConfig.jwtProvider || undefined,\n      };\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      this.logger?.error(\"Failed to get server auth config\", {\n        serverId,\n        error: errorMessage,\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Update server authentication configuration\n   */\n  async updateServerAuthConfig(\n    serverId: string,\n    config: UpdateServerAuthConfigRequest,\n  ): Promise<ServerAuthConfigResponse> {\n    try {\n      this.logger?.debug(\"Updating server auth config\", { serverId, config });\n\n      // Validate that the auth type is supported\n      if (!this.strategyFactory.isSupported(config.authType)) {\n        throw new Error(`Unsupported authentication type: ${config.authType}`);\n      }\n\n      // Handle auth config creation/update using strategy pattern\n      const strategy = this.strategyFactory.getStrategy(config.authType);\n      const authConfigId = await strategy.handleConfigUpdate(serverId, {\n        authType: config.authType,\n        jwtProviderId: config.jwtProviderId || undefined,\n      });\n\n      // Update server auth type and config\n      const server = await this.db.mcpServer.update({\n        where: { id: serverId },\n        data: {\n          authType: config.authType,\n          authConfigId,\n        },\n        include: {\n          authConfig: {\n            include: {\n              jwtProvider: true,\n            },\n          },\n        },\n      });\n\n      // Automatically add JWT headers to all tools when JWT auth type is set\n      if (config.authType === ServerAuthType.JWT) {\n        try {\n          await this.addJwtHeadersToAllTools(serverId);\n          this.logger?.info(\"Automatically added JWT headers to all tools after setting JWT auth type\", { serverId });\n        } catch (error) {\n          this.logger?.warn(\"Failed to automatically add JWT headers to tools\", { serverId, error });\n          // Don't fail the auth config update if header addition fails\n        }\n      }\n\n      return {\n        serverId: server.id,\n        authType: server.authType as ServerAuthType,\n        authConfig: server.authConfig\n          ? {\n              id: server.authConfig.id,\n              authType: server.authConfig.authType as ServerAuthType,\n              jwtProvider: server.authConfig.jwtProvider\n                ? {\n                    id: server.authConfig.jwtProvider.id,\n                    name: server.authConfig.jwtProvider.name,\n                    jwksUrl: server.authConfig.jwtProvider.jwksUrl,\n                    enabled: server.authConfig.jwtProvider.enabled,\n                  }\n                : undefined,\n            }\n          : undefined,\n      };\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      this.logger?.error(\"Failed to update server auth config\", {\n        serverId,\n        config,\n        error: errorMessage,\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Get supported authentication types\n   * Returns all authentication types supported by the current strategy factory\n   */\n  getSupportedAuthTypes(): ServerAuthType[] {\n    return this.strategyFactory.getSupportedAuthTypes();\n  }\n\n  /**\n   * Get auth providers for a server (strategy-based)\n   */\n  async getAuthProviders(serverId: string): Promise<AuthProvider[]> {\n    try {\n      const config = await this.getServerAuthConfig(serverId);\n      if (!config) {\n        return [];\n      }\n\n      const strategy = this.strategyFactory.getStrategy(config.authType);\n      return await strategy.getProviders(serverId);\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      this.logger?.error(\"Failed to get auth providers\", {\n        serverId,\n        error: errorMessage,\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Create auth provider for a server (strategy-based)\n   */\n  async createAuthProvider(serverId: string, providerData: CreateProviderRequest): Promise<AuthProvider> {\n    try {\n      const config = await this.getServerAuthConfig(serverId);\n      if (!config) {\n        throw new Error(\"No authentication configuration found\");\n      }\n\n      const strategy = this.strategyFactory.getStrategy(config.authType);\n      return await strategy.createProvider(serverId, providerData);\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      this.logger?.error(\"Failed to create auth provider\", {\n        serverId,\n        error: errorMessage,\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Update auth provider for a server (strategy-based)\n   */\n  async updateAuthProvider(\n    serverId: string,\n    providerId: string,\n    providerData: UpdateProviderRequest,\n  ): Promise<AuthProvider> {\n    try {\n      const config = await this.getServerAuthConfig(serverId);\n      if (!config) {\n        throw new Error(\"No authentication configuration found\");\n      }\n\n      const strategy = this.strategyFactory.getStrategy(config.authType);\n      return await strategy.updateProvider(serverId, providerId, providerData);\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      this.logger?.error(\"Failed to update auth provider\", {\n        serverId,\n        providerId,\n        error: errorMessage,\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Delete auth provider for a server (strategy-based)\n   */\n  async deleteAuthProvider(serverId: string, providerId: string): Promise<void> {\n    try {\n      const config = await this.getServerAuthConfig(serverId);\n      if (!config) {\n        throw new Error(\"No authentication configuration found\");\n      }\n\n      const strategy = this.strategyFactory.getStrategy(config.authType);\n      await strategy.deleteProvider(serverId, providerId);\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      this.logger?.error(\"Failed to delete auth provider\", {\n        serverId,\n        providerId,\n        error: errorMessage,\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Get JWT providers for a server\n   */\n  async getJwtProviders(serverId: string) {\n    try {\n      this.logger?.debug(\"Getting JWT providers\", { serverId });\n\n      return await this.db.serverJwtProvider.findMany({\n        where: { serverId },\n        orderBy: { createdAt: \"desc\" },\n      });\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      this.logger?.error(\"Failed to get JWT providers\", {\n        serverId,\n        error: errorMessage,\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Create a new JWT provider for a server\n   */\n  async createJwtProvider(serverId: string, data: { name: string; jwksUrl: string; enabled?: boolean }) {\n    try {\n      this.logger?.debug(\"Creating JWT provider\", { serverId, data });\n\n      // Get server to validate it exists and get tenantId\n      const server = await this.db.mcpServer.findUnique({\n        where: { id: serverId },\n        select: { tenantId: true },\n      });\n\n      if (!server) {\n        throw new Error(`Server not found: ${serverId}`);\n      }\n\n      return await this.db.serverJwtProvider.create({\n        data: {\n          serverId,\n          tenantId: server.tenantId,\n          name: data.name,\n          jwksUrl: data.jwksUrl,\n          enabled: data.enabled ?? true,\n        },\n      });\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      this.logger?.error(\"Failed to create JWT provider\", {\n        serverId,\n        data,\n        error: errorMessage,\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Update a JWT provider\n   */\n  async updateJwtProvider(\n    serverId: string,\n    providerId: string,\n    data: { name?: string; jwksUrl?: string; enabled?: boolean },\n  ) {\n    try {\n      this.logger?.debug(\"Updating JWT provider\", { serverId, providerId, data });\n\n      return await this.db.serverJwtProvider.update({\n        where: {\n          id: providerId,\n          serverId, // Ensure the provider belongs to the specified server\n        },\n        data: {\n          ...(data.name && { name: data.name }),\n          ...(data.jwksUrl && { jwksUrl: data.jwksUrl }),\n          ...(data.enabled !== undefined && { enabled: data.enabled }),\n        },\n      });\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      this.logger?.error(\"Failed to update JWT provider\", {\n        serverId,\n        providerId,\n        data,\n        error: errorMessage,\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Delete a JWT provider\n   */\n  async deleteJwtProvider(serverId: string, providerId: string): Promise<void> {\n    try {\n      this.logger?.debug(\"Deleting JWT provider\", { serverId, providerId });\n\n      await this.db.serverJwtProvider.delete({\n        where: {\n          id: providerId,\n          serverId, // Ensure the provider belongs to the specified server\n        },\n      });\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      this.logger?.error(\"Failed to delete JWT provider\", {\n        serverId,\n        providerId,\n        error: errorMessage,\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Add JWT headers to all tools for a server\n   * This updates the requestParameterOverrides of all tools to include Authorization header with JWT token\n   */\n  async addJwtHeadersToAllTools(serverId: string): Promise<{ updatedToolsCount: number }> {\n    try {\n      this.logger?.debug(\"Adding JWT headers to all tools for server\", { serverId });\n\n      // Verify server exists and uses JWKS authentication\n      const server = await this.db.mcpServer.findUnique({\n        where: { id: serverId },\n        include: {\n          authConfig: {\n            include: {\n              jwtProvider: true,\n            },\n          },\n        },\n      });\n\n      if (!server) {\n        throw new Error(`Server not found: ${serverId}`);\n      }\n\n      if (server.authType !== ServerAuthType.JWT) {\n        throw new Error(`Server ${serverId} does not use JWT authentication. Current auth type: ${server.authType}`);\n      }\n\n      // Get all tools for the server\n      const tools = await this.db.tool.findMany({\n        where: { serverId },\n        select: { id: true, requestParameterOverrides: true },\n      });\n\n      if (tools.length === 0) {\n        this.logger?.info(\"No tools found for server\", { serverId });\n        return { updatedToolsCount: 0 };\n      }\n\n      // Update each tool's requestParameterOverrides to include JWT header\n      const updatePromises = tools.map(async (tool) => {\n        // Parse existing overrides or start with empty object\n        const existingOverrides = tool.requestParameterOverrides\n          ? (JSON.parse(JSON.stringify(tool.requestParameterOverrides)) as Record<string, unknown>)\n          : {};\n\n        // Add or update Authorization header with JWT template\n        // UI expects RequestParamConfig object with value and location properties\n        const updatedOverrides = {\n          ...existingOverrides,\n          Authorization: {\n            value: \"Bearer {{auth.jwt}}\",\n            location: ParameterLocation.HEADER,\n          },\n        };\n\n        return this.db.tool.update({\n          where: { id: tool.id },\n          data: {\n            requestParameterOverrides: updatedOverrides,\n          },\n        });\n      });\n\n      // Execute all updates\n      await Promise.all(updatePromises);\n\n      this.logger?.info(\"Successfully added JWT headers to all tools\", {\n        serverId,\n        updatedToolsCount: tools.length,\n      });\n\n      return { updatedToolsCount: tools.length };\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      this.logger?.error(\"Failed to add JWT headers to all tools\", {\n        serverId,\n        error: errorMessage,\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Validate a JWKS URL by fetching and parsing it\n   */\n  async validateJwksUrl(jwksUrl: string): Promise<{ valid: boolean; error?: string; keyCount?: number }> {\n    try {\n      this.logger?.debug(\"Validating JWKS URL\", { jwksUrl });\n\n      // Validate URL format\n      try {\n        new URL(jwksUrl);\n      } catch {\n        return {\n          valid: false,\n          error: \"Invalid URL format\",\n        };\n      }\n\n      // Fetch JWKS from the URL\n      this.logger?.debug(\"Fetching JWKS from URL\", { jwksUrl });\n      const response = await fetch(jwksUrl, {\n        method: \"GET\",\n        headers: {\n          Accept: \"application/json\",\n        },\n        // Add timeout to prevent hanging requests\n        signal: AbortSignal.timeout(10000), // 10 second timeout\n      });\n\n      this.logger?.debug(\"JWKS fetch response\", {\n        jwksUrl,\n        status: response.status,\n        statusText: response.statusText,\n        headers: Object.fromEntries(response.headers.entries()),\n      });\n\n      if (!response.ok) {\n        this.logger?.warn(\"JWKS URL fetch failed\", {\n          jwksUrl,\n          status: response.status,\n          statusText: response.statusText,\n        });\n        return {\n          valid: false,\n          error: `Failed to fetch JWKS: ${response.status} ${response.statusText}`,\n        };\n      }\n\n      // Parse the response as JSON\n      let jwks: JwtResponse;\n      try {\n        jwks = (await response.json()) as JwtResponse;\n      } catch {\n        return {\n          valid: false,\n          error: \"Response is not valid JSON\",\n        };\n      }\n\n      // Validate JWKS structure\n      if (!jwks || typeof jwks !== \"object\") {\n        return {\n          valid: false,\n          error: \"JWKS response is not a valid object\",\n        };\n      }\n\n      if (!Array.isArray(jwks.keys)) {\n        return {\n          valid: false,\n          error: \"JWKS does not contain a 'keys' array\",\n        };\n      }\n\n      if (jwks.keys.length === 0) {\n        return {\n          valid: false,\n          error: \"JWKS contains no keys\",\n        };\n      }\n\n      // Validate each key has required properties\n      for (let i = 0; i < jwks.keys.length; i++) {\n        const key = jwks.keys[i];\n        if (!key.kty) {\n          return {\n            valid: false,\n            error: `Key at index ${i} is missing required 'kty' property`,\n          };\n        }\n      }\n\n      return {\n        valid: true,\n        keyCount: jwks.keys.length,\n      };\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      this.logger?.error(\"Failed to validate JWKS URL\", {\n        jwksUrl,\n        error: errorMessage,\n      });\n\n      // Handle specific error types\n      if (error instanceof TypeError && error.message.includes(\"fetch\")) {\n        return {\n          valid: false,\n          error: \"Network error: Unable to fetch JWKS URL\",\n        };\n      }\n\n      if (error instanceof Error && error.name === \"TimeoutError\") {\n        return {\n          valid: false,\n          error: \"Timeout: JWKS URL did not respond within 10 seconds\",\n        };\n      }\n\n      return {\n        valid: false,\n        error: `Validation failed: ${errorMessage}`,\n      };\n    }\n  }\n}\n", "import express from \"express\";\nimport { mirrorRequest } from \"../controllers/mirror.controller.js\";\nimport { adminSessionMiddleware } from \"../middlewares/session.middleware.js\";\n\nconst router = express.Router();\n\nrouter.get(\"/\", adminSessionMiddleware, mirrorRequest);\n\nexport default router;\n", "import axios from \"axios\";\nimport { NextFunction, Request, Response } from \"express\";\nimport { StatusCodes } from \"http-status-codes\";\nimport { URL } from \"url\";\nimport { isAppRequest, TypeGuardError } from \"../utils/req-guards.js\";\nexport async function mirrorRequest(req: Request, res: Response, next: NextFunction): Promise<void> {\n  if (!isAppRequest(req)) {\n    throw new TypeGuardError();\n  }\n  try {\n    const url = req.query.url as string;\n    if (!url) {\n      res.status(StatusCodes.BAD_REQUEST).json({ error: \"Invalid URL provided\", url });\n      return;\n    }\n    try {\n      new URL(url);\n    } catch {\n      res.status(StatusCodes.BAD_REQUEST).json({ error: \"Invalid URL provided\", url });\n      return;\n    }\n\n    const response = await axios.get(url, {\n      headers: {\n        Accept: \"application/yaml,application/json\",\n      },\n    });\n\n    // Set the same content type as the original response\n    res.set(\"Content-Type\", response.headers[\"content-type\"] || \"application/yaml\");\n    res.status(200).send(response.data);\n  } catch (error) {\n    req.logger.debug(error);\n    next(error);\n  }\n}\n", "import { Router } from \"express\";\nimport {\n  authorize,\n  dynamicClientRegister,\n  exchangeToken,\n  getOAuthServerInfo,\n  handleCallback,\n} from \"../controllers/oauth.controller.js\";\nimport { serverIdMiddleware } from \"../middlewares/serverId.middleware.js\";\n\nconst router: Router = Router();\n\nrouter.get(\"/.well-known/oauth-authorization-server\", getOAuthServerInfo);\nrouter.get(\"/api/oauth/authorize\", serverIdMiddleware, authorize);\nrouter.post(\"/api/oauth/token\", exchangeToken);\nrouter.get(\"/api/oauth/callback\", handleCallback);\nrouter.post(\"/api/oauth/register\", dynamicClientRegister);\n\nexport default router;\n", "import axios from \"axios\";\nimport * as crypto from \"crypto\";\nimport { Request, Response } from \"express\";\nimport { StatusCodes } from \"http-status-codes\";\nimport { CacheItemType, clearCacheByPartialKey } from \"../services/cache.service.js\";\nimport { createEndUserIfNotExists, getEndUserByEmailAndServerId } from \"../services/enduser.service.js\";\nimport { generateEndUserToken, verifyAdminToken } from \"../services/jwt.service.js\";\nimport {\n  callbackUrl,\n  decodeData,\n  encodeData,\n  ENDUSER_SCOPE,\n  exchangeCodeForToken,\n  getAuthorizeUrl,\n  getHostUrl,\n  persistToken,\n  StateData,\n  TOOL_SCOPE,\n} from \"../services/oauth.service.js\";\nimport { enduserSharedSecret, SIGNATURE_EXPIRATION_MSEC, signData } from \"../services/ownid.secret.service.js\";\nimport { OAuthError } from \"../types/error.types.js\";\nimport { isAppRequest, isWithServerIdRequest, TypeGuardError } from \"../utils/req-guards.js\";\nimport { EndUserShortSession } from \"./ownid.controller.js\";\n\nconst CONSOLE_URL = process.env.CONSOLE_URL || \"http://localhost:4200\";\nconst CONSOLE_AUTH_PATH = \"/login\";\nconst CONSOLE_SUCCESS_PATH = \"/oauth/success\";\nconst CONSOLE_FAILURE_PATH = \"/oauth/callback\";\n\nconst STUDIO_REDIRECT_ORIGINS = [\"agentpass.ai\", \"agentpass.studio\"];\nconst ALLOWED_REDIRECT_ORIGINS = [\"https://claude.ai\", \"http://localhost\", \"http://127.0.0.1\", \"cursor://\"];\n\n/**\n > OAuth 2.0 Authorization Code Flow Implementation\n * Discovery: `getOAuthServerInfo`\n * [Optional] dynamic client registration: `dynamicClientRegister`\n * Initiate authorization: `authorize` -> Only applicable to `enduser` flow. Redirects to console app with state describing the request (client_id, redirect_uri, etc.)\n * Console app redirects back to: `handleCallback` which then redirects back to the original redirect uri with the code.\n * * NOTE: in case of \"tool\" auth, the request isn't redirected from console, but from external provider. The code is exchanged for a token and stored in the database and auth is considered completed.\n * Exchange code for token: `exchangeToken` doesn't actually exchange, as it was done in previous step, so its a no-op.\n */\n\ninterface EndUserTokenResponse {\n  access_token: string;\n  original_redirect_uri: string | null;\n  token_type: \"Bearer\";\n}\n\nconst isRedirectUriAllowed = (req: Request, uris: string[]) =>\n  uris.every(\n    (uri: string) =>\n      [...ALLOWED_REDIRECT_ORIGINS, getHostUrl(req, true), getHostUrl(req, false)].some((allowed) =>\n        uri.toLowerCase().startsWith(allowed.toLowerCase()),\n      ) || STUDIO_REDIRECT_ORIGINS.some((url) => new URL(uri).hostname.endsWith(url)),\n  );\n\nexport const getOAuthServerInfo = async (req: Request, res: Response) => {\n  const baseUrl = getHostUrl(req, true);\n  const issuer = new URL(baseUrl).origin;\n\n  res.json({\n    issuer,\n    authorization_endpoint: `${issuer}/api/oauth/authorize`,\n    token_endpoint: `${issuer}/api/oauth/token`,\n    registration_endpoint: `${issuer}/api/oauth/register`,\n    scopes_supported: [\"profile\", \"email\", \"openid\"],\n    response_types_supported: [\"code\"],\n    grant_types_supported: [\"authorization_code\", \"refresh_token\"],\n    token_endpoint_auth_methods_supported: [\"client_secret_post\"],\n    code_challenge_methods_supported: [\"S256\"],\n  });\n};\n\nexport const authorize = async (req: Request, res: Response) => {\n  if (!isWithServerIdRequest(req)) {\n    throw new TypeGuardError();\n  }\n\n  try {\n    const { serverId } = req;\n    const { redirect_uri, state: clientState, response_type, client_id, provider_id, admin_auth } = req.query;\n    req.logger.debug(\"OAuth authorization request received\", {\n      serverId,\n      redirect_uri,\n      clientState,\n      response_type,\n      client_id,\n      provider_id,\n      scope: req.query.scope,\n    });\n    const scope = req.query.scope === TOOL_SCOPE ? TOOL_SCOPE : ENDUSER_SCOPE;\n\n    if (!serverId) {\n      req.logger.warn(\"Server ID not provided in the request\");\n      return res.status(StatusCodes.BAD_REQUEST).json({ error: \"Server ID is required\" });\n    }\n    const server = await req.db.mcpServer.findUnique({\n      where: {\n        id: serverId,\n      },\n    });\n    if (!server) {\n      return res.status(StatusCodes.NOT_FOUND).json({ error: `Server '${serverId}' not found` });\n    }\n\n    if (!redirect_uri) {\n      req.logger.warn(\"Missing redirect_uri in authorization request\");\n      return res.status(StatusCodes.BAD_REQUEST).json({ error: \"redirect_uri is required\" });\n    }\n    if (!isRedirectUriAllowed(req, [redirect_uri as string])) {\n      return res.status(StatusCodes.BAD_REQUEST).json({\n        error: \"invalid_redirect_uri\",\n        error_description: \"Redirect URI must be one of the allowed origins\",\n      });\n    }\n\n    let userId: string | null = null;\n    if (admin_auth) {\n      const adminClaims = await verifyAdminToken(admin_auth as string);\n      if (!adminClaims) {\n        req.logger.warn(\"Invalid admin token provided\");\n        return res.status(StatusCodes.UNAUTHORIZED).json({ error: \"Invalid admin token\" });\n      }\n      userId = (await createEndUserIfNotExists(req.db, server.tenantId, adminClaims.email)).id;\n    }\n\n    if (provider_id) {\n      const provider = await req.db.oAuthProvider.findFirstOrThrow({\n        where: {\n          id: provider_id as string,\n        },\n      });\n\n      const authUrl = getAuthorizeUrl(\n        req,\n        provider,\n        (clientState as string) || \"\",\n        serverId!,\n        userId,\n        scope as string,\n        req.ip || null,\n        redirect_uri as string,\n        client_id as string,\n        response_type as string,\n      );\n\n      req.logger.debug(\"Redirecting to OAuth provider\", {\n        provider: provider.name,\n        redirectUri: authUrl.toString(),\n        originalRedirectUri: redirect_uri,\n        clientId: client_id,\n      });\n\n      return res.redirect(authUrl.toString());\n    }\n\n    const stateData: StateData = {\n      redirectUri: redirect_uri as string,\n      clientState: (clientState as string) || \"\",\n      clientId: client_id as string,\n      serverId: serverId!,\n      scope: scope as string,\n      providerId: null,\n      originAddress: req.ip || null,\n      userId,\n    };\n    const stateParam = encodeData(stateData);\n\n    const consoleUrl = new URL(`${CONSOLE_URL}${CONSOLE_AUTH_PATH}`);\n\n    consoleUrl.searchParams.append(\"scope\", ENDUSER_SCOPE);\n    consoleUrl.searchParams.append(\"state\", stateParam);\n    consoleUrl.searchParams.append(\"redirect_uri\", callbackUrl(req));\n    consoleUrl.searchParams.append(\"server_id\", serverId || \"\");\n    consoleUrl.searchParams.append(\"server_name\", server.name);\n\n    req.logger.debug(\"Redirecting to console to choose provider\", {\n      redirectUri: consoleUrl.toString(),\n      originalRedirectUri: redirect_uri,\n      clientId: client_id,\n    });\n\n    return res.redirect(consoleUrl.toString());\n  } catch (error) {\n    req.logger.error(\"Error in OAuth authorize endpoint\", error);\n    const message = error instanceof OAuthError ? error.message : \"Failed to process authorization request\";\n    return res.redirect(`${CONSOLE_URL}${CONSOLE_FAILURE_PATH}?error=${encodeURIComponent(message)}`);\n  }\n};\n\nexport const handleCallback = async (req: Request, res: Response) => {\n  if (!isAppRequest(req)) {\n    throw new TypeGuardError();\n  }\n\n  try {\n    const { code, state, error } = req.query;\n\n    if (error) {\n      req.logger.error(\"OAuth callback received with error\", error);\n      return res.status(StatusCodes.BAD_REQUEST).json({ error: error });\n    }\n\n    if (!code) {\n      req.logger.error(\"OAuth callback received without code\");\n      return res.status(StatusCodes.BAD_REQUEST).json({ error: \"No code received from OAuth provider\" });\n    }\n\n    if (!state) {\n      req.logger.error(\"OAuth callback received without state\");\n      return res.status(StatusCodes.BAD_REQUEST).json({ error: \"No state received from OAuth provider\" });\n    }\n\n    let stateData: StateData;\n    try {\n      stateData = decodeData(state as string);\n    } catch (e) {\n      req.logger.error(\"Failed to parse state parameter\", e);\n      return res.status(StatusCodes.BAD_REQUEST).json({ error: \"Invalid state parameter\" });\n    }\n\n    const { redirectUri, clientState, clientId, serverId, scope, providerId } = stateData;\n\n    if (stateData.scope === TOOL_SCOPE && providerId) {\n      req.logger.debug(\"Exchanging code for token with provider for tool scope\");\n      const provider = await req.db.oAuthProvider.findFirstOrThrow({\n        where: {\n          id: providerId,\n        },\n      });\n      const tokenData = await exchangeCodeForToken(req.logger, provider, code as string, callbackUrl(req));\n      const userId = stateData.userId!;\n      await persistToken(req.db, req.logger, userId, providerId, tokenData, stateData.originAddress);\n      if (stateData.redirectUri) {\n        const redirectUrl = new URL(stateData.redirectUri);\n        redirectUrl.searchParams.append(\"state\", stateData.clientState);\n        return res.redirect(redirectUrl.toString());\n      }\n      return res.redirect(`${CONSOLE_URL}${CONSOLE_SUCCESS_PATH}`);\n    }\n\n    if (!redirectUri) {\n      req.logger.error(\"State parameter missing redirectUri\");\n      return res.status(StatusCodes.BAD_REQUEST).json({ error: \"Invalid state parameter structure\" });\n    }\n\n    const redirectUrl = new URL(redirectUri);\n    redirectUrl.searchParams.append(\"postAuthRedirectUri\", `${CONSOLE_URL}${CONSOLE_SUCCESS_PATH}`);\n\n    if (scope === ENDUSER_SCOPE) {\n      const shortSession = decodeData<EndUserShortSession>(code as string);\n      const sharedSecret = await enduserSharedSecret();\n      if (\n        Math.abs(Date.now() - shortSession.timestamp) > SIGNATURE_EXPIRATION_MSEC ||\n        signData(sharedSecret, `${shortSession.email}.${shortSession.timestamp}`) !== shortSession.signature\n      ) {\n        return res.status(StatusCodes.UNAUTHORIZED).json({ error: \"Invalid or expired short session signature\" });\n      }\n\n      const jti = crypto.randomUUID();\n      const user = await getEndUserByEmailAndServerId(req.db, shortSession.email, stateData.serverId!);\n      if (!user) {\n        return res.status(StatusCodes.NOT_FOUND).json({ error: \"User not found\" });\n      }\n      const token = await generateEndUserToken(user, jti);\n\n      await persistToken(\n        req.db,\n        req.logger,\n        user.id,\n        null,\n        {\n          accessToken: token,\n          scope: ENDUSER_SCOPE,\n          expiresIn: null,\n        },\n        stateData.originAddress,\n        jti,\n      );\n      clearCacheByPartialKey(CacheItemType.ENDUSER_TOKEN, user.email);\n\n      const responseData: EndUserTokenResponse = {\n        access_token: token,\n        original_redirect_uri: stateData.redirectUri,\n        token_type: \"Bearer\",\n      };\n      const tokenAsCode = encodeData(responseData);\n      redirectUrl.searchParams.append(\"code\", tokenAsCode);\n    } else {\n      if (!serverId) {\n        req.logger.error(\"State parameter missing serverId\");\n        return res.status(StatusCodes.BAD_REQUEST).json({ error: \"Invalid state parameter structure\" });\n      }\n\n      req.logger.debug(\"OAuth callback received\", {\n        redirectUri,\n        clientState,\n        clientId,\n        serverId,\n        codeReceived: !!code,\n      });\n\n      redirectUrl.searchParams.append(\"code\", code as string);\n    }\n\n    if (clientState) {\n      redirectUrl.searchParams.append(\"state\", clientState as string);\n    }\n\n    if (clientId) {\n      redirectUrl.searchParams.append(\"client_id\", clientId);\n    }\n\n    return res.redirect(redirectUrl.toString());\n  } catch (error) {\n    req.logger.error(\"Error in OAuth callback handling\", error);\n    const message = error instanceof OAuthError ? error.message : \"Failed to process OAuth callback\";\n    return res.redirect(`${CONSOLE_URL}${CONSOLE_FAILURE_PATH}?error=${encodeURIComponent(message)}`);\n  }\n};\n\nexport const exchangeToken = async (req: Request, res: Response) => {\n  if (!isAppRequest(req)) {\n    throw new TypeGuardError();\n  }\n  try {\n    const { code } = req.body;\n    if (!code) {\n      throw new OAuthError(\"Missing code\", StatusCodes.BAD_REQUEST, \"invalid_request\");\n    }\n\n    const decodedResponse = decodeData(code as string);\n    return res.json(decodedResponse);\n  } catch (error) {\n    req.logger.error(\"Error in token exchange\", error);\n    if (axios.isAxiosError(error) && error.response) {\n      return res.status(error.response.status).json(error.response.data);\n    }\n    return res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({ error: \"Failed to exchange token\" });\n  }\n};\n\nexport const dynamicClientRegister = async (req: Request, res: Response) => {\n  if (!isAppRequest(req)) {\n    throw new TypeGuardError();\n  }\n  try {\n    req.logger.debug(\"OAuth client registration request received\", {\n      body: req.body,\n    });\n\n    const {\n      client_id,\n      client_name = \"Dynamically Registered Client\",\n      redirect_uris = [],\n      grant_types = [\"authorization_code\"],\n      response_types = [\"code\"],\n      token_endpoint_auth_method = \"none\",\n      software_id,\n    } = req.body;\n\n    if (!redirect_uris.length) {\n      return res.status(StatusCodes.BAD_REQUEST).json({\n        error: \"invalid_redirect_uri\",\n        error_description: \"At least one redirect_uri must be provided\",\n      });\n    }\n    if (!isRedirectUriAllowed(req, redirect_uris)) {\n      return res.status(StatusCodes.BAD_REQUEST).json({\n        error: \"invalid_redirect_uri\",\n        error_description: \"Redirect URI must be one of the allowed origins\",\n      });\n    }\n\n    const registrationTime = Date.now();\n    const clientId = client_id || crypto.randomBytes(16).toString(\"hex\");\n\n    const client = {\n      client_id: clientId,\n      client_secret: \"\", // No client secret for public clients\n      client_name,\n      redirect_uris: Array.isArray(redirect_uris) ? redirect_uris : [redirect_uris],\n      grant_types: Array.isArray(grant_types) ? grant_types : [grant_types],\n      response_types: Array.isArray(response_types) ? response_types : [response_types],\n      token_endpoint_auth_method,\n      registration_time: registrationTime,\n    };\n    const response = {\n      ...client,\n      client_id_issued_at: Math.floor(registrationTime / 1000),\n    };\n\n    req.logger.debug(\"New OAuth client registered\", {\n      clientId,\n      clientName: client_name,\n      softwareId: software_id,\n    });\n\n    return res.status(StatusCodes.CREATED).json(response);\n  } catch (error) {\n    req.logger.error(\"Error in registration endpoint\", error);\n    return res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({ error: \"Failed to process registration request\" });\n  }\n};\n", "import { Database } from \"../utils/connection.js\";\n\nconst getServerById = async (db: Database, serverId: string) =>\n  await db.mcpServer.findUnique({\n    where: {\n      id: serverId,\n    },\n  });\n\nexport async function createEndUserIfNotExists(db: Database, tenantId: string, email: string) {\n  return db.endUser.upsert({\n    where: {\n      email_tenantId: {\n        email: email.toLowerCase(),\n        tenantId: tenantId,\n      },\n    },\n    update: {},\n    create: {\n      email: email.toLowerCase(),\n      tenantId: tenantId,\n      enabled: true,\n    },\n  });\n}\n\nexport async function setEndUserOwnIdData(db: Database, serverId: string, email: string, ownIdData: string) {\n  const server = await getServerById(db, serverId);\n\n  if (!server) {\n    return { status: \"NOT_FOUND\", error: \"Server not found\" };\n  }\n\n  await db.endUser.upsert({\n    where: {\n      email_tenantId: {\n        email: email.toLowerCase(),\n        tenantId: server.tenantId,\n      },\n    },\n    update: {\n      ownidData: ownIdData,\n    },\n    create: {\n      email: email.toLowerCase(),\n      tenantId: server.tenantId,\n      ownidData: ownIdData,\n      enabled: true,\n    },\n  });\n\n  return { status: \"NO_CONTENT\" };\n}\n\nexport async function getEndUserOwnIdData(db: Database, serverId: string, email: string) {\n  const server = await getServerById(db, serverId);\n\n  if (!server) {\n    return { status: \"NOT_FOUND\", error: \"Server not found\" };\n  }\n\n  const user = await db.endUser.findUnique({\n    where: {\n      email_tenantId: {\n        email: email.toLowerCase(),\n        tenantId: server.tenantId,\n      },\n    },\n  });\n\n  if (!user) {\n    return { status: \"NO_CONTENT\" };\n  }\n\n  if (!user.enabled) {\n    return { status: \"LOCKED\", error: \"User not enabled\" };\n  }\n\n  if (user.ownidData) {\n    return { status: \"OK\", data: { ownIdData: user.ownidData } };\n  }\n\n  return { status: \"NO_CONTENT\" };\n}\n\nexport async function createEndUserSession(\n  db: Database,\n  serverId: string,\n  email: string,\n  createToken: () => Promise<string>,\n) {\n  const server = await getServerById(db, serverId);\n\n  if (!server) {\n    return { status: \"NOT_FOUND\", error: \"Server not found\" };\n  }\n\n  await db.endUser.upsert({\n    where: {\n      email_tenantId: {\n        email: email.toLowerCase(),\n        tenantId: server.tenantId,\n      },\n    },\n    update: {},\n    create: {\n      email: email.toLowerCase(),\n      emailVerified: true,\n      tenantId: server.tenantId,\n      enabled: true,\n    },\n  });\n\n  return { status: \"OK\", data: { token: await createToken() } };\n}\n\nexport const getEndUserByEmailAndServerId = async (db: Database, email: string, serverId: string) => {\n  const server = await getServerById(db, serverId);\n  if (!server) {\n    return null;\n  }\n  return await db.endUser.findUnique({\n    where: {\n      email_tenantId: {\n        email: email.toLowerCase(),\n        tenantId: server.tenantId,\n      },\n    },\n  });\n};\n", "import * as crypto from \"crypto\";\nimport { getAppSecrets } from \"./secrets.service.js\";\n\nexport const SIGNATURE_EXPIRATION_MSEC = 60 * 1000; // 1 minute\n\nexport const adminSharedSecret = async () =>\n  process.env.OWNID_ADMIN_SHARED_SECRET || (await getAppSecrets()).ownidAdminSharedSecret;\nexport const enduserSharedSecret = async () =>\n  process.env.OWNID_ENDUSER_SHARED_SECRET || (await getAppSecrets()).ownidEnduserSharedSecret;\nexport const anthropicApiKey = async () => process.env.ANTHROPIC_API_KEY || (await getAppSecrets()).anthropicApiKey;\nexport const openaiApiKey = async () => process.env.OPENAI_API_KEY || (await getAppSecrets()).openaiApiKey;\n\nexport const signData = (sharedSecret: string, data: string) => {\n  const hmac = crypto.createHmac(\"sha256\", Buffer.from(sharedSecret, \"base64\"));\n  hmac.update(data);\n  return hmac.digest(\"base64\");\n};\n", "import express from \"express\";\nimport { config, createSession, getData, setData } from \"../controllers/ownid.controller.js\";\nimport { ownidAdminMiddleware, ownidEndUserMiddleware } from \"../middlewares/ownid.middleware.js\";\n\nconst router = express.Router();\n\nrouter.get(\"/config\", config);\n\nrouter.post(\"/admin/setOwnIDDataByLoginId\", ownidAdminMiddleware, setData);\nrouter.post(\"/admin/getOwnIDDataByLoginId\", ownidAdminMiddleware, getData);\nrouter.post(\"/admin/getSessionByLoginId\", ownidAdminMiddleware, createSession);\n\nrouter.post(\"/enduser/setOwnIDDataByLoginId\", ownidEndUserMiddleware, setData);\nrouter.post(\"/enduser/getOwnIDDataByLoginId\", ownidEndUserMiddleware, getData);\nrouter.post(\"/enduser/getSessionByLoginId\", ownidEndUserMiddleware, createSession);\n\nexport default router;\n", "import { OwnIdConfig } from \"@agentbridge/api\";\nimport { Request, Response } from \"express\";\nimport { StatusCodes } from \"http-status-codes\";\nimport { createAdminSession, getAdminOwnIdData, setAdminOwnIdData } from \"../services/admins.service.js\";\nimport { createEndUserSession, getEndUserOwnIdData, setEndUserOwnIdData } from \"../services/enduser.service.js\";\nimport { encodeData } from \"../services/oauth.service.js\";\nimport { enduserSharedSecret, signData } from \"../services/ownid.secret.service.js\";\nimport { isAppRequest, TypeGuardError } from \"../utils/req-guards.js\";\n\nexport type EndUserShortSession = {\n  email: string;\n  signature: string;\n  timestamp: number;\n};\n\nexport const config = (req: Request, res: Response) => {\n  const serverId = req.query.server_id as string | null;\n  const config: OwnIdConfig = serverId\n    ? {\n        appId: process.env.OWNID_ENDUSER_APP_ID as string,\n        env: process.env.OWNID_ENDUSER_ENV as OwnIdConfig.env,\n      }\n    : {\n        appId: process.env.OWNID_ADMIN_APP_ID as string,\n        env: process.env.OWNID_ADMIN_ENV as OwnIdConfig.env,\n      };\n  res.status(StatusCodes.OK).json(config);\n};\n\nconst getServerId = (req: Request) => {\n  return req.headers[\"x-ownid-scope\"] as string | null;\n};\n\nexport const setData = async (req: Request, res: Response) => {\n  if (!isAppRequest(req)) {\n    throw new TypeGuardError();\n  }\n  const email = req.body.loginId.toLowerCase() as string;\n  const ownIdData = req.body.ownIdData as string;\n  const serverId = getServerId(req);\n\n  req.logger.debug(\"Setting ownid data\", {\n    email: email,\n    ownIdData: ownIdData,\n    serverId,\n  });\n\n  const result = serverId\n    ? await setEndUserOwnIdData(req.db, serverId, email, ownIdData)\n    : await setAdminOwnIdData(req.db, email, ownIdData);\n  if (result.status === \"NOT_FOUND\") {\n    return res.status(StatusCodes.NOT_FOUND).json({ error: result.error });\n  }\n  return res.sendStatus(StatusCodes.NO_CONTENT);\n};\n\nexport const getData = async (req: Request, res: Response) => {\n  if (!isAppRequest(req)) {\n    throw new TypeGuardError();\n  }\n  const email = req.body.loginId.toLowerCase() as string;\n  const serverId = getServerId(req);\n\n  req.logger.debug(\"Getting ownid data\", {\n    email,\n    serverId,\n  });\n\n  const result = serverId\n    ? await getEndUserOwnIdData(req.db, serverId, email)\n    : await getAdminOwnIdData(req.db, req.logger, email);\n\n  switch (result.status) {\n    case \"NOT_FOUND\":\n      return res.status(StatusCodes.NOT_FOUND).json({ error: result.error });\n    case \"LOCKED\":\n      return res.status(StatusCodes.LOCKED).json({ error: result.error });\n    case \"OK\":\n      return res.status(StatusCodes.OK).json(result.data);\n    case \"NO_CONTENT\":\n      return res.status(StatusCodes.NO_CONTENT).send();\n    default:\n      throw new Error(`Unexpected status: ${result.status}`);\n  }\n};\n\nconst createEndUserSessionSignature = async (email: string) => {\n  const sharedSecret = await enduserSharedSecret();\n  const timestamp = Date.now();\n  const data: EndUserShortSession = {\n    timestamp: timestamp,\n    email,\n    signature: signData(sharedSecret, `${email}.${timestamp}`),\n  };\n  return encodeData(data);\n};\n\nexport const createSession = async (req: Request, res: Response) => {\n  if (!isAppRequest(req)) {\n    throw new TypeGuardError();\n  }\n  const email = req.body.loginId.toLowerCase() as string;\n  const serverId = getServerId(req);\n\n  req.logger.debug(\"Creating session\", {\n    email,\n    serverId,\n  });\n\n  const result = serverId\n    ? await createEndUserSession(req.db, serverId, email, () => createEndUserSessionSignature(email))\n    : await createAdminSession(req.db, req.logger, email);\n\n  if (result.status === \"NOT_FOUND\") {\n    return res.status(StatusCodes.NOT_FOUND).json({ error: result.error });\n  }\n\n  return res.json(result.data);\n};\n", "import { NextFunction, Request, Response } from \"express\";\nimport { StatusCodes } from \"http-status-codes\";\nimport {\n  adminSharedSecret,\n  enduserSharedSecret,\n  SIGNATURE_EXPIRATION_MSEC,\n  signData,\n} from \"../services/ownid.secret.service.js\";\n\nconst ownidMiddleware = (req: Request, res: Response, next: NextFunction, sharedSecret: string) => {\n  const body = JSON.stringify(req.body);\n  const ownIdSignature = req.headers[\"ownid-signature\"] as string;\n  const ownIdTimestamp = req.headers[\"ownid-timestamp\"] as string;\n  if (!ownIdSignature || !ownIdTimestamp) {\n    res.status(StatusCodes.BAD_REQUEST).json({ error: \"Missing OwnID signature or timestamp\" });\n    return;\n  }\n  const dataToSign = `${body}.${ownIdTimestamp}`;\n\n  const currentTime = Date.now();\n\n  const ownIdTimestampMs = parseInt(ownIdTimestamp);\n\n  if (Math.abs(currentTime - ownIdTimestampMs) > SIGNATURE_EXPIRATION_MSEC) {\n    res.status(StatusCodes.BAD_REQUEST).json({ error: \"Signature has expired\" });\n    return;\n  }\n\n  const actualSignature = signData(sharedSecret, dataToSign);\n  if (actualSignature !== ownIdSignature) {\n    res.status(StatusCodes.BAD_REQUEST).json({ error: \"Invalid signature\" });\n    return;\n  }\n\n  next();\n};\n\nexport const ownidAdminMiddleware = async (req: Request, res: Response, next: NextFunction) => {\n  const sharedSecret = await adminSharedSecret();\n  return ownidMiddleware(req, res, next, sharedSecret);\n};\n\nexport const ownidEndUserMiddleware = async (req: Request, res: Response, next: NextFunction) => {\n  const sharedSecret = await enduserSharedSecret();\n  return ownidMiddleware(req, res, next, sharedSecret);\n};\n", "import { Router } from \"express\";\nimport {\n  createProvider,\n  deleteProvider,\n  getProvider,\n  getProviders,\n  updateProvider,\n} from \"../controllers/oauth-providers.controller.js\";\n\nconst router: Router = Router();\n\nrouter.get(\"/\", getProviders);\nrouter.post(\"/\", createProvider);\nrouter.get(\"/:providerId\", getProvider);\nrouter.put(\"/:providerId\", updateProvider);\nrouter.delete(\"/:providerId\", deleteProvider);\n\nexport default router;\n", "import { CreateProviderRequest, OAuthProvider, UpdateProviderRequest } from \"@agentbridge/api\";\nimport { OAuthProvider as PrismaOAuthProvider } from \"@prisma/client\";\nimport { Request, Response } from \"express\";\nimport { StatusCodes } from \"http-status-codes\";\nimport omit from \"lodash/omit.js\";\nimport { DEFAULT_PAGE_SIZE } from \"../utils/config.js\";\nimport { isAdminRequest, TypeGuardError } from \"../utils/req-guards.js\";\n\nconst mapProvider = (provider: PrismaOAuthProvider): OAuthProvider => ({\n  ...omit(provider, [\"clientSecret\"]),\n  contentType: provider.contentType || undefined,\n  refreshUrl: provider.refreshUrl || undefined,\n  createdAt: provider.createdAt.toISOString(),\n  updatedAt: provider.updatedAt.toISOString(),\n});\n\nexport const getProviders = async (\n  req: Request<Record<string, string>, object, object, { page?: string; limit?: string }>,\n  res: Response,\n) => {\n  if (!isAdminRequest(req)) {\n    throw new TypeGuardError();\n  }\n\n  const page = req.query.page ? parseInt(req.query.page as string) : 1;\n  const limit = req.query.limit ? parseInt(req.query.limit as string) : DEFAULT_PAGE_SIZE;\n  req.logger.debug(\"Getting all providers\", { query: req.query, tenantId: req.admin.tenantId });\n\n  try {\n    const providers: OAuthProvider[] = (\n      await req.db.oAuthProvider.findMany({\n        skip: (page - 1) * limit,\n        take: limit,\n        where: {\n          tenantId: req.admin.tenantId,\n        },\n      })\n    ).map(mapProvider);\n    res.json({ data: providers });\n  } catch (error) {\n    req.logger.error(\"Failed to get providers\", error);\n    res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({ error: \"Failed to get providers\" });\n  }\n};\n\nexport const createProvider = async (\n  req: Request<Record<string, string>, object, CreateProviderRequest>,\n  res: Response,\n) => {\n  if (!isAdminRequest(req)) {\n    throw new TypeGuardError();\n  }\n\n  req.logger.info(\"Creating new provider\", { body: req.body });\n  try {\n    if (!req.admin.tenantId) {\n      return res.status(StatusCodes.UNAUTHORIZED).json({\n        error: \"unauthorized\",\n        errorDescription: \"Tenant ID is required\",\n      });\n    }\n\n    const provider: OAuthProvider = mapProvider(\n      await req.db.oAuthProvider.create({\n        data: {\n          ...req.body,\n          clientSecret: req.body.clientSecret || \"\",\n          tenant: { connect: { id: req.admin.tenantId } },\n        },\n      }),\n    );\n    res.status(StatusCodes.CREATED).json(provider);\n  } catch (error) {\n    req.logger.error(\"Failed to create provider\", error);\n    res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({ error: \"Failed to create provider\" });\n  }\n};\n\nexport const getProvider = async (req: Request<{ providerId: string }>, res: Response) => {\n  if (!isAdminRequest(req)) {\n    throw new TypeGuardError();\n  }\n\n  req.logger.debug(\"Getting provider\", { providerId: req.params.providerId, tenantId: req.admin.tenantId });\n  try {\n    const dbProvider = await req.db.oAuthProvider.findUnique({\n      where: { id: req.params.providerId, tenantId: req.admin.tenantId },\n    });\n    const provider: OAuthProvider | null = dbProvider ? mapProvider(dbProvider) : null;\n    res.json(provider);\n  } catch (error) {\n    req.logger.error(\"Failed to get provider\", error);\n    res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({ error: \"Failed to get provider\" });\n  }\n};\n\nexport const updateProvider = async (\n  req: Request<{ providerId: string }, object, UpdateProviderRequest>,\n  res: Response,\n) => {\n  if (!isAdminRequest(req)) {\n    throw new TypeGuardError();\n  }\n\n  req.logger.info(\"Updating provider\", {\n    providerId: req.params.providerId,\n    body: req.body,\n    tenantId: req.admin.tenantId,\n  });\n  try {\n    const provider: OAuthProvider = mapProvider(\n      await req.db.oAuthProvider.update({\n        where: { id: req.params.providerId, tenantId: req.admin.tenantId },\n        data: req.body,\n      }),\n    );\n\n    res.json(provider);\n  } catch (error) {\n    req.logger.error(\"Failed to update provider\", error);\n    res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({ error: \"Failed to update provider\" });\n  }\n};\n\nexport const deleteProvider = async (req: Request<{ providerId: string }>, res: Response) => {\n  if (!isAdminRequest(req)) {\n    throw new TypeGuardError();\n  }\n\n  req.logger.info(\"Deleting provider\", { providerId: req.params.providerId, tenantId: req.admin.tenantId });\n  try {\n    const connectedToolsCount = await req.db.tool.count({\n      where: { oAuthProviderId: req.params.providerId },\n    });\n\n    if (connectedToolsCount > 0) {\n      return res.status(StatusCodes.BAD_REQUEST).json({\n        error: \"Cannot delete provider that is connected to tools\",\n      });\n    }\n\n    await req.db.oAuthProvider.delete({\n      where: { id: req.params.providerId, tenantId: req.admin.tenantId },\n    });\n    res.status(StatusCodes.NO_CONTENT).send();\n  } catch (error) {\n    req.logger.error(\"Failed to delete provider\", error);\n    res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({ error: \"Failed to delete provider\" });\n  }\n};\n", "import { Router } from \"express\";\nimport {\n  createAuthProvider,\n  deleteAuthProvider,\n  getAuthProviders,\n  getServerAuthConfig,\n  updateAuthProvider,\n  updateServerAuthConfig,\n  validateJwksUrl,\n} from \"../controllers/server-auth.controller.js\";\n\nconst router = Router();\n\n// Server auth configuration routes\nrouter.get(\"/:serverId/auth\", getServerAuthConfig);\nrouter.put(\"/:serverId/auth\", updateServerAuthConfig);\n\n// Auth provider routes (strategy-based)\nrouter.get(\"/:serverId/auth-providers\", getAuthProviders);\nrouter.post(\"/:serverId/auth-providers\", createAuthProvider);\nrouter.put(\"/:serverId/auth-providers/:providerId\", updateAuthProvider);\nrouter.delete(\"/:serverId/auth-providers/:providerId\", deleteAuthProvider);\n\n// JWKS validation route (not server-specific)\nrouter.post(\"/validate-jwks\", validateJwksUrl);\n\nexport default router;\n", "import { UpdateServerAuthConfigRequest } from \"@agentbridge/api\";\nimport { Request, Response } from \"express\";\nimport { StatusCodes } from \"http-status-codes\";\nimport { ServerAuthService } from \"../services/server-auth.service.js\";\nimport { isAdminRequest, TypeGuardError } from \"../utils/req-guards.js\";\n\nexport const getServerAuthConfig = async (req: Request, res: Response) => {\n  if (!isAdminRequest(req)) {\n    throw new TypeGuardError();\n  }\n\n  try {\n    const { serverId } = req.params;\n    const serverAuthService = new ServerAuthService(req.db, req.logger);\n    const config = await serverAuthService.getServerAuthConfig(serverId);\n    res.json(config);\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    req.logger.error(\"Failed to get server auth config\", { error: errorMessage });\n    res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({ error: \"Internal server error\" });\n  }\n};\n\nexport const updateServerAuthConfig = async (req: Request, res: Response) => {\n  if (!isAdminRequest(req)) {\n    throw new TypeGuardError();\n  }\n\n  try {\n    const { serverId } = req.params;\n    const updateRequest: UpdateServerAuthConfigRequest = req.body;\n    const serverAuthService = new ServerAuthService(req.db, req.logger);\n    const config = await serverAuthService.updateServerAuthConfig(serverId, updateRequest);\n    res.json(config);\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    req.logger.error(\"Failed to update server auth config\", { error: errorMessage });\n    res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({ error: \"Internal server error\" });\n  }\n};\n\nexport const getAuthProviders = async (req: Request, res: Response) => {\n  if (!isAdminRequest(req)) {\n    throw new TypeGuardError();\n  }\n\n  try {\n    const { serverId } = req.params;\n    const serverAuthService = new ServerAuthService(req.db, req.logger);\n    const providers = await serverAuthService.getAuthProviders(serverId);\n    res.json(providers);\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    req.logger.error(\"Failed to get auth providers\", { error: errorMessage });\n    res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({ error: \"Internal server error\" });\n  }\n};\n\nexport const createAuthProvider = async (req: Request, res: Response) => {\n  if (!isAdminRequest(req)) {\n    throw new TypeGuardError();\n  }\n\n  try {\n    const { serverId } = req.params;\n    const providerData = req.body;\n    const serverAuthService = new ServerAuthService(req.db, req.logger);\n    const provider = await serverAuthService.createAuthProvider(serverId, providerData);\n    res.status(StatusCodes.CREATED).json(provider);\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    req.logger.error(\"Failed to create auth provider\", { error: errorMessage });\n    res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({ error: \"Internal server error\" });\n  }\n};\n\nexport const updateAuthProvider = async (req: Request, res: Response) => {\n  if (!isAdminRequest(req)) {\n    throw new TypeGuardError();\n  }\n\n  try {\n    const { serverId, providerId } = req.params;\n    const providerData = req.body;\n    const serverAuthService = new ServerAuthService(req.db, req.logger);\n    const provider = await serverAuthService.updateAuthProvider(serverId, providerId, providerData);\n    res.json(provider);\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    req.logger.error(\"Failed to update auth provider\", { error: errorMessage });\n    res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({ error: \"Internal server error\" });\n  }\n};\n\nexport const deleteAuthProvider = async (req: Request, res: Response) => {\n  if (!isAdminRequest(req)) {\n    throw new TypeGuardError();\n  }\n\n  try {\n    const { serverId, providerId } = req.params;\n    const serverAuthService = new ServerAuthService(req.db, req.logger);\n    await serverAuthService.deleteAuthProvider(serverId, providerId);\n    res.status(StatusCodes.NO_CONTENT).send();\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    req.logger.error(\"Failed to delete auth provider\", { error: errorMessage });\n    res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({ error: \"Internal server error\" });\n  }\n};\n\nexport const validateJwksUrl = async (req: Request, res: Response) => {\n  if (!isAdminRequest(req)) {\n    throw new TypeGuardError();\n  }\n\n  try {\n    const { jwksUrl } = req.body;\n\n    if (!jwksUrl || typeof jwksUrl !== \"string\") {\n      res.status(StatusCodes.BAD_REQUEST).json({\n        valid: false,\n        error: \"JWKS URL is required\",\n      });\n      return;\n    }\n\n    const serverAuthService = new ServerAuthService(req.db, req.logger);\n    const result = await serverAuthService.validateJwksUrl(jwksUrl);\n    res.json(result);\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    req.logger.error(\"Failed to validate JWKS URL\", { error: errorMessage });\n    res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({\n      valid: false,\n      error: \"Internal server error\",\n    });\n  }\n};\n", "import { Router } from \"express\";\nimport {\n  createExampleServer,\n  createServer,\n  createServerFromOpenApi,\n  createTool,\n  createToolsFromOpenApi,\n  deleteServer,\n  deleteTool,\n  disableTool,\n  enableTool,\n  getServer,\n  getServers,\n  getTool,\n  listTools,\n  runTool,\n  updateServer,\n  updateTool,\n} from \"../controllers/servers.controller.js\";\n\nconst router: Router = Router();\n\n// Server Management\nrouter.get(\"/\", getServers);\nrouter.post(\"/\", createServer);\nrouter.get(\"/:serverId\", getServer);\nrouter.put(\"/:serverId\", updateServer);\nrouter.delete(\"/:serverId\", deleteServer);\n\n// Tools Management\nrouter.get(\"/:serverId/tools\", listTools);\nrouter.post(\"/:serverId/tools\", createTool);\nrouter.post(\"/:serverId/tools/import/openapi\", createToolsFromOpenApi);\nrouter.get(\"/:serverId/tools/:toolId\", getTool);\nrouter.put(\"/:serverId/tools/:toolId\", updateTool);\nrouter.delete(\"/:serverId/tools/:toolId\", deleteTool);\nrouter.post(\"/:serverId/tools/:toolId/run\", runTool);\nrouter.put(\"/:serverId/tools/:toolId/enable\", enableTool);\nrouter.put(\"/:serverId/tools/:toolId/disable\", disableTool);\n\n// Import Management\nrouter.post(\"/import/openapi\", createServerFromOpenApi);\nrouter.post(\"/example\", createExampleServer);\n\nexport default router;\n", "import { CreateServerRequest, CreateToolRequest, ToolRunRequest, UpdateServerRequest } from \"@agentbridge/api\";\nimport { Request, Response } from \"express\";\nimport { StatusCodes } from \"http-status-codes\";\nimport yaml from \"js-yaml\";\nimport { executeApiRequest } from \"../services/api-exec/api-tool-executor.js\";\nimport { CacheItemType } from \"../services/cache.service.js\";\nimport { getUserUseableTokens, refreshAndPersistAccessToken } from \"../services/oauth.service.js\";\nimport * as serversService from \"../services/servers.service.js\";\nimport { OpenApiDocument, validateOpenApiContent } from \"../utils/openapi.js\";\nimport { isAdminRequest, TypeGuardError } from \"../utils/req-guards.js\";\n\nexport const getServers = async (req: Request, res: Response) => {\n  if (!isAdminRequest(req)) {\n    throw new TypeGuardError();\n  }\n\n  req.logger.debug(\"Getting all servers for tenant\", { tenantId: req.admin.tenantId });\n\n  try {\n    const servers = await serversService.getServersForTenant(req.db, req.admin.tenantId as string);\n    res.json(servers);\n  } catch (error) {\n    req.logger.error(\"Failed to get servers\", error);\n    res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({\n      error: \"server_list_failed\",\n      errorDescription: \"Failed to get servers\",\n    });\n  }\n};\n\nexport const createServer = async (\n  req: Request<Record<string, string>, object, CreateServerRequest>,\n  res: Response,\n) => {\n  if (!isAdminRequest(req)) {\n    throw new TypeGuardError();\n  }\n  try {\n    req.logger.info(\"Creating new server\", { body: req.body });\n    const server = await serversService.createServer(req.db, req.admin.tenantId, {\n      name: req.body.name,\n      description: req.body.description,\n      enabled: req.body.enabled ?? true,\n      baseUrl: req.body.baseUrl,\n    });\n\n    res.status(StatusCodes.CREATED).json(server);\n  } catch (error) {\n    req.logger.error(\"Failed to create server\", error);\n    res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({\n      error: \"internal_server_error\",\n      errorDescription: \"Failed to create server\",\n    });\n  }\n};\n\nexport const getServer = async (req: Request<{ serverId: string }>, res: Response) => {\n  if (!isAdminRequest(req)) {\n    throw new TypeGuardError();\n  }\n  try {\n    req.logger.debug(\"Getting server\", { serverId: req.params.serverId });\n    const server = await serversService.getServerById(req.db, req.admin.tenantId, req.params.serverId);\n    if (!server) {\n      return res.status(StatusCodes.NOT_FOUND).json({\n        error: \"server_not_found\",\n        errorDescription: `Server not found: ${req.params.serverId}`,\n      });\n    }\n\n    res.json(server);\n  } catch (error) {\n    req.logger.error(\"Failed to get server\", error);\n    res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({\n      error: \"internal_server_error\",\n      errorDescription: \"Failed to get server\",\n    });\n  }\n};\n\nexport const updateServer = async (req: Request<{ serverId: string }, object, UpdateServerRequest>, res: Response) => {\n  if (!isAdminRequest(req)) {\n    throw new TypeGuardError();\n  }\n  req.logger.info(\"Updating server\", { serverId: req.params.serverId, body: req.body });\n  try {\n    const server = await serversService.updateServerById(req.db, req.admin.tenantId, req.params.serverId, req.body);\n\n    const { clearCache, clearCacheByPartialKey } = await import(\"../services/cache.service.js\");\n    clearCache({ type: CacheItemType.SERVER, ids: [server.id] });\n    clearCacheByPartialKey(CacheItemType.SERVER_ACCESS, server.id);\n\n    res.json(server);\n  } catch (error) {\n    req.logger.error(\"Failed to update server\", error);\n    res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({\n      error: \"internal_server_error\",\n      errorDescription: \"Failed to update server\",\n    });\n  }\n};\n\nexport const deleteServer = async (req: Request<{ serverId: string }>, res: Response) => {\n  if (!isAdminRequest(req)) {\n    throw new TypeGuardError();\n  }\n  req.logger.info(\"Deleting server\", { serverId: req.params.serverId });\n\n  // Get server data before deleting to access the tenantId\n  const server = await serversService.getServerSlim(req.db, req.admin.tenantId, req.params.serverId);\n\n  if (server) {\n    await serversService.deleteServerById(req.db, req.admin.tenantId, req.params.serverId);\n\n    const { clearCache, clearCacheByPartialKey } = await import(\"../services/cache.service.js\");\n    clearCache({ type: CacheItemType.SERVER, ids: [server.id] });\n    clearCacheByPartialKey(CacheItemType.SERVER_ACCESS, server.id);\n\n    req.logger.debug(\"Server deleted and caches cleared\", { serverId: req.params.serverId });\n  }\n\n  res.status(StatusCodes.NO_CONTENT).send();\n};\n\nexport const createServerFromOpenApi = async (req: Request, res: Response) => {\n  if (!isAdminRequest(req)) {\n    throw new TypeGuardError();\n  }\n  req.logger.info(\"Creating server from OpenAPI specification\");\n\n  try {\n    const fileContent = req.body;\n    if (!fileContent || !Buffer.isBuffer(fileContent)) {\n      req.logger.warn(\"OpenAPI specification file is required and must be sent as octet-stream\");\n      return res.status(StatusCodes.BAD_REQUEST).json({\n        error: \"invalid_request\",\n        errorDescription: \"OpenAPI specification file is required and must be sent as octet-stream\",\n      });\n    }\n\n    let openApiContent: OpenApiDocument;\n    try {\n      const yamlContent = fileContent.toString(\"utf8\");\n\n      if (!yamlContent.trim()) {\n        req.logger.warn(\"OpenAPI content is empty\");\n        return res.status(StatusCodes.BAD_REQUEST).json({\n          error: \"invalid_openapi\",\n          errorDescription: \"OpenAPI content is empty\",\n        });\n      }\n\n      openApiContent = yaml.load(yamlContent);\n\n      if (!(\"openapi\" in openApiContent) || !openApiContent.openapi.startsWith(\"3\")) {\n        throw new Error(\"OpenAPI version is not supported\");\n      }\n    } catch (error) {\n      req.logger.error(\"Failed to parse OpenAPI content\", error);\n      return res.status(StatusCodes.BAD_REQUEST).json({\n        error: \"invalid_openapi\",\n        errorDescription: \"Invalid OpenAPI format\",\n      });\n    }\n\n    const validationError = await validateOpenApiContent(openApiContent);\n    if (validationError) {\n      req.logger.warn(validationError.errorDescription);\n      return res.status(StatusCodes.BAD_REQUEST).json(validationError);\n    }\n\n    req.logger.debug(\"Parsed OpenAPI content:\", openApiContent);\n    const tenantId = req.admin.tenantId!;\n\n    const selectedTools = req.query.selectedTools\n      ? Array.isArray(req.query.selectedTools)\n        ? (req.query.selectedTools as string[])\n        : [req.query.selectedTools as string]\n      : undefined;\n\n    const result = await serversService.createServerFromOpenApiSpec(\n      req.db,\n      tenantId,\n      req.query.name as string | null,\n      req.query.description as string | null,\n      openApiContent,\n      selectedTools,\n    );\n\n    return res.status(StatusCodes.CREATED).json(result);\n  } catch (error) {\n    req.logger.error(\"Failed to create server from OpenAPI\", error);\n    return res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({\n      error: \"server_creation_failed\",\n      errorDescription: error instanceof Error ? error.message : \"Failed to create server from OpenAPI\",\n    });\n  }\n};\n\nexport const createToolsFromOpenApi = async (req: Request<{ serverId: string }>, res: Response) => {\n  if (!isAdminRequest(req)) {\n    throw new TypeGuardError();\n  }\n  req.logger.info(\"Creating tools from OpenAPI specification\", { serverId: req.params.serverId });\n\n  try {\n    const fileContent = req.body;\n    if (!fileContent || !Buffer.isBuffer(fileContent)) {\n      req.logger.warn(\"OpenAPI specification file is required and must be sent as octet-stream\");\n      return res.status(StatusCodes.BAD_REQUEST).json({\n        error: \"invalid_request\",\n        errorDescription: \"OpenAPI specification file is required and must be sent as octet-stream\",\n      });\n    }\n\n    let openApiContent: OpenApiDocument;\n    try {\n      const yamlContent = fileContent.toString(\"utf8\");\n\n      if (!yamlContent.trim()) {\n        req.logger.warn(\"OpenAPI content is empty\");\n        return res.status(StatusCodes.BAD_REQUEST).json({\n          error: \"invalid_openapi\",\n          errorDescription: \"OpenAPI content is empty\",\n        });\n      }\n\n      openApiContent = yaml.load(yamlContent);\n\n      if (!(\"openapi\" in openApiContent) || !openApiContent.openapi.startsWith(\"3\")) {\n        throw new Error(\"OpenAPI version is not supported\");\n      }\n    } catch (error) {\n      req.logger.error(\"Failed to parse OpenAPI content\", error);\n      return res.status(StatusCodes.BAD_REQUEST).json({\n        error: \"invalid_openapi\",\n        errorDescription: \"Invalid OpenAPI format\",\n      });\n    }\n\n    const validationError = await validateOpenApiContent(openApiContent);\n    if (validationError) {\n      req.logger.warn(validationError.errorDescription);\n      return res.status(StatusCodes.BAD_REQUEST).json(validationError);\n    }\n\n    req.logger.debug(\"Parsed OpenAPI content:\", openApiContent);\n    const tenantId = req.admin.tenantId!;\n    const serverId = req.params.serverId;\n\n    const selectedTools = req.query.selectedTools\n      ? Array.isArray(req.query.selectedTools)\n        ? (req.query.selectedTools as string[])\n        : [req.query.selectedTools as string]\n      : undefined;\n\n    const result = await serversService.createToolsFromOpenApiSpec(\n      req.db,\n      tenantId,\n      serverId,\n      openApiContent,\n      selectedTools,\n    );\n\n    return res.status(StatusCodes.CREATED).json(result);\n  } catch (error) {\n    req.logger.error(\"Failed to create tools from OpenAPI\", error);\n    return res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({\n      error: \"tools_creation_failed\",\n      errorDescription: error instanceof Error ? error.message : \"Failed to create tools from OpenAPI\",\n    });\n  }\n};\n\nexport const listTools = async (req: Request<{ serverId: string }>, res: Response) => {\n  if (!isAdminRequest(req)) {\n    throw new TypeGuardError();\n  }\n  req.logger.debug(\"Listing tools\", { serverId: req.params.serverId });\n  try {\n    const tools = await serversService.getToolsForServer(\n      req.db,\n      req.admin.tenantId,\n      req.params.serverId,\n      req.admin.email,\n    );\n    res.json({ data: tools });\n  } catch (error) {\n    req.logger.error(\"Failed to list tools\", error);\n    res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({\n      error: \"internal_server_error\",\n      errorDescription: \"Failed to list tools\",\n    });\n  }\n};\n\nexport const createTool = async (req: Request<{ serverId: string }, object, CreateToolRequest>, res: Response) => {\n  if (!isAdminRequest(req)) {\n    throw new TypeGuardError();\n  }\n  req.logger.info(\"Creating tool\", { serverId: req.params.serverId, body: req.body });\n\n  try {\n    const tool = await serversService.createTool(req.db, req.params.serverId, req.admin.tenantId!, req.body);\n\n    res.status(StatusCodes.CREATED).json(tool);\n  } catch (error) {\n    req.logger.error(\"Error creating tool\", error);\n    res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({\n      error: \"internal_server_error\",\n      errorDescription: \"Failed to create tool\",\n    });\n  }\n};\n\nexport const getTool = async (req: Request<{ serverId: string; toolId: string }>, res: Response) => {\n  if (!isAdminRequest(req)) {\n    throw new TypeGuardError();\n  }\n  req.logger.debug(\"Getting tool\", { serverId: req.params.serverId, toolId: req.params.toolId });\n  try {\n    const tool = await serversService.getToolById(req.db, req.admin.tenantId, req.params.toolId, req.admin.email);\n    res.json(tool);\n  } catch (error) {\n    req.logger.error(\"Failed to get tool\", error);\n    res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({\n      error: \"internal_server_error\",\n      errorDescription: \"Failed to get tool\",\n    });\n  }\n};\n\nexport const updateTool = async (req: Request<{ serverId: string; toolId: string }>, res: Response) => {\n  if (!isAdminRequest(req)) {\n    throw new TypeGuardError();\n  }\n  req.logger.info(\"Updating tool\", { serverId: req.params.serverId, toolId: req.params.toolId, body: req.body });\n  try {\n    const tool = await serversService.updateToolById(req.db, req.admin.tenantId, req.params.toolId, req.body);\n\n    res.json(tool);\n  } catch (error) {\n    req.logger.error(\"Failed to update tool\", error);\n    res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({\n      error: \"internal_server_error\",\n      errorDescription: \"Failed to update tool\",\n    });\n  }\n};\n\nexport const deleteTool = async (req: Request<{ serverId: string; toolId: string }>, res: Response) => {\n  if (!isAdminRequest(req)) {\n    throw new TypeGuardError();\n  }\n  req.logger.info(\"Deleting tool\", { serverId: req.params.serverId, toolId: req.params.toolId });\n  try {\n    await serversService.deleteToolById(req.db, req.admin.tenantId, req.params.toolId);\n    res.status(StatusCodes.NO_CONTENT).send();\n  } catch (error) {\n    req.logger.error(\"Failed to delete tool\", error);\n    res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({\n      error: \"internal_server_error\",\n      errorDescription: \"Failed to delete tool\",\n    });\n  }\n};\n\nexport const runTool = async (\n  req: Request<{ serverId: string; toolId: string }, object, ToolRunRequest>,\n  res: Response,\n) => {\n  if (!isAdminRequest(req)) {\n    throw new TypeGuardError();\n  }\n\n  const { serverId, toolId } = req.params;\n  const { parameters, authorization } = req.body;\n\n  req.logger.info(\"Running tool in playground\", {\n    serverId,\n    toolId,\n    hasParameters: !!parameters,\n    hasAuth: !!authorization,\n  });\n\n  try {\n    const startTime = Date.now();\n\n    const tool = await req.db.tool.findUnique({\n      where: {\n        id: toolId,\n        tenantId: req.admin.tenantId,\n        serverId: serverId,\n      },\n      include: {\n        oAuthProvider: true,\n        server: {\n          select: {\n            baseUrl: true,\n          },\n        },\n      },\n    });\n    if (!tool) {\n      return res.status(StatusCodes.NOT_FOUND).json({\n        error: \"tool_not_found\",\n        errorDescription: `Tool not found: ${toolId}`,\n      });\n    }\n\n    const specParameters = tool.parameters ? JSON.parse(JSON.stringify(tool.parameters)) : {};\n    const callParameters = { ...parameters };\n\n    if (tool.oAuthProvider) {\n      const endUser = await req.db.endUser.findUnique({\n        where: {\n          email_tenantId: {\n            email: req.admin.email,\n            tenantId: req.admin.tenantId,\n          },\n        },\n      });\n      if (!endUser) {\n        return res.status(StatusCodes.UNAUTHORIZED).json({\n          error: \"unauthorized\",\n          errorDescription: `No sufficient authorization to run tool: ${toolId}`,\n        });\n      }\n      const tokens = await getUserUseableTokens(req.db, endUser.id, tool.oAuthProvider.id);\n      const validTokens = tokens.filter((t) => !t.expiresAt || t.expiresAt > new Date());\n      if (validTokens.length > 0) {\n        callParameters[\"Authorization\"] = `Bearer ${validTokens[0].accessToken}`;\n      }\n      if (validTokens.length === 0) {\n        const tokensWithRefresh = tokens.filter((t) => !!t.refreshToken);\n        if (tokensWithRefresh.length > 0) {\n          try {\n            const tokenData = await refreshAndPersistAccessToken(\n              req.db,\n              req.logger,\n              endUser.id,\n              tool.oAuthProvider,\n              tokensWithRefresh[0].refreshToken!,\n              req.ip || null,\n            );\n            callParameters[\"Authorization\"] = `Bearer ${tokenData.accessToken}`;\n          } catch (error) {\n            req.logger.warn(`Failed to refresh token for provider ${tool.oAuthProvider.name}`, error);\n            return res.status(StatusCodes.UNAUTHORIZED).json({\n              error: \"oauth_authentication_required\",\n              errorDescription: `OAuth authentication required for ${tool.name}. Please authenticate via the MCP client.`,\n            });\n          }\n        } else {\n          // No valid tokens and no refresh tokens - require authentication\n          return res.status(StatusCodes.UNAUTHORIZED).json({\n            error: \"oauth_authentication_required\",\n            errorDescription: `OAuth authentication required for ${tool.name}. Please authenticate via the MCP client.`,\n          });\n        }\n      }\n    }\n\n    const result = await executeApiRequest(\n      tool,\n      tool.server.baseUrl,\n      specParameters,\n      callParameters,\n      req.logger,\n      true,\n      {},\n    );\n\n    const runtimeMs = Date.now() - startTime;\n\n    return res.status(StatusCodes.OK).json({\n      isError: result.isError,\n      runtimeMs,\n      content:\n        result.content\n          ?.filter((res) => res.type === \"text\")\n          .map((res) => res.text)\n          .join(\"\\n\") || \"<empty>\",\n    });\n  } catch (error) {\n    req.logger.error(\"Failed to run tool\", error);\n    return res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({\n      isError: true,\n      runtimeMs: 0,\n      content: \"Failed to run tool: \" + (error instanceof Error ? error.message : \"Unknown error\"),\n    });\n  }\n};\n\nexport const createExampleServer = async (req: Request, res: Response) => {\n  if (!isAdminRequest(req)) {\n    throw new TypeGuardError();\n  }\n\n  req.logger.info(\"Creating example todos server\", { tenantId: req.admin.tenantId });\n\n  try {\n    const result = await serversService.createExampleTodosServer(req.db, req.admin.tenantId);\n    return res.status(StatusCodes.CREATED).json(result);\n  } catch (error) {\n    req.logger.error(\"Failed to create example server\", error);\n    return res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({\n      error: \"server_creation_failed\",\n      errorDescription: error instanceof Error ? error.message : \"Failed to create example server\",\n    });\n  }\n};\n\nexport const enableTool = async (req: Request<{ serverId: string; toolId: string }>, res: Response) => {\n  if (!isAdminRequest(req)) {\n    throw new TypeGuardError();\n  }\n  req.logger.info(\"Enabling tool\", { serverId: req.params.serverId, toolId: req.params.toolId });\n  try {\n    const tool = await serversService.updateToolById(req.db, req.admin.tenantId, req.params.toolId, { enabled: true });\n    res.json(tool);\n  } catch (error) {\n    req.logger.error(\"Failed to enable tool\", error);\n    res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({\n      error: \"internal_server_error\",\n      errorDescription: \"Failed to enable tool\",\n    });\n  }\n};\n\nexport const disableTool = async (req: Request<{ serverId: string; toolId: string }>, res: Response) => {\n  if (!isAdminRequest(req)) {\n    throw new TypeGuardError();\n  }\n  req.logger.info(\"Disabling tool\", { serverId: req.params.serverId, toolId: req.params.toolId });\n  try {\n    const tool = await serversService.updateToolById(req.db, req.admin.tenantId, req.params.toolId, { enabled: false });\n    res.json(tool);\n  } catch (error) {\n    req.logger.error(\"Failed to disable tool\", error);\n    res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({\n      error: \"internal_server_error\",\n      errorDescription: \"Failed to disable tool\",\n    });\n  }\n};\n", "import { Router } from \"express\";\nimport * as tenantController from \"../controllers/tenant.controller.js\";\nimport { requireAdmin } from \"../middlewares/role.middleware.js\";\nimport { adminSessionMiddleware } from \"../middlewares/session.middleware.js\";\n\nconst router = Router();\n\n// Routes that require admin session and admin role\nrouter.get(\"/users\", adminSessionMiddleware, tenantController.getTenantUsers);\nrouter.get(\"/invitations\", adminSessionMiddleware, requireAdmin, tenantController.getTenantInvitations);\nrouter.post(\"/invitations\", adminSessionMiddleware, requireAdmin, tenantController.createInvitation);\nrouter.put(\"/users/:userId/role\", adminSessionMiddleware, requireAdmin, tenantController.updateUserRole);\nrouter.delete(\"/users/:userId\", adminSessionMiddleware, requireAdmin, tenantController.removeUserFromTenant);\nrouter.delete(\"/invitations/:invitationId\", adminSessionMiddleware, requireAdmin, tenantController.cancelInvitation);\n\n// Public routes (for accepting invitations)\nrouter.get(\"/invitations/:token\", tenantController.getInvitationByToken);\nrouter.post(\"/invitations/accept\", tenantController.acceptInvitation);\nrouter.get(\"/user/tenants\", tenantController.getUserTenants);\n\nexport default router;\n", "import { Request, Response } from \"express\";\nimport { StatusCodes } from \"http-status-codes\";\nimport * as tenantService from \"../services/tenant.service.js\";\nimport { isAdminRequest, isAppRequest, TypeGuardError } from \"../utils/req-guards.js\";\n\nexport const getTenantUsers = async (req: Request, res: Response) => {\n  if (!isAdminRequest(req)) {\n    throw new TypeGuardError();\n  }\n\n  req.logger.debug(\"Getting tenant users\");\n\n  try {\n    const tenantId = req.admin.tenantId;\n    const currentUserId = req.admin.id;\n\n    // Check if user can view other users (all roles can view users)\n    const users = await tenantService.getTenantUsers(req.db, tenantId, currentUserId);\n    res.json(users);\n  } catch (error) {\n    req.logger.error(\"Failed to get tenant users\", error);\n    res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({ error: \"Failed to get tenant users\" });\n  }\n};\n\nexport const getTenantInvitations = async (req: Request, res: Response) => {\n  if (!isAdminRequest(req)) {\n    throw new TypeGuardError();\n  }\n\n  req.logger.debug(\"Getting tenant invitations\");\n\n  try {\n    const tenantId = req.admin.tenantId;\n    const currentUserId = req.admin.id;\n\n    // Check if user can view invitations (only admins can view invitations)\n    const canInvite = await tenantService.canInviteUsers(req.db, tenantId, currentUserId);\n    if (!canInvite) {\n      return res.status(StatusCodes.FORBIDDEN).json({\n        error: \"insufficient_permissions\",\n        errorDescription: \"You don't have permission to view invitations\",\n      });\n    }\n\n    const invitations = await tenantService.getTenantInvitations(req.db, tenantId);\n    res.json(invitations);\n  } catch (error) {\n    req.logger.error(\"Failed to get tenant invitations\", error);\n    res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({ error: \"Failed to get tenant invitations\" });\n  }\n};\n\nexport const createInvitation = async (req: Request, res: Response) => {\n  if (!isAdminRequest(req)) {\n    throw new TypeGuardError();\n  }\n\n  req.logger.info(\"Creating invitation\", { email: req.body.email, role: req.body.role });\n\n  try {\n    const tenantId = req.admin.tenantId;\n    const currentUserId = req.admin.id;\n    const { email, role } = req.body;\n\n    if (!email || !role) {\n      res.status(StatusCodes.BAD_REQUEST).json({ error: \"Email and role are required\" });\n      return;\n    }\n\n    if (![\"admin\", \"member\"].includes(role)) {\n      res.status(StatusCodes.BAD_REQUEST).json({ error: \"Invalid role\" });\n      return;\n    }\n\n    // Check if user can invite others\n    const canInvite = await tenantService.canInviteUsers(req.db, tenantId, currentUserId);\n    if (!canInvite) {\n      return res.status(StatusCodes.FORBIDDEN).json({\n        error: \"insufficient_permissions\",\n        errorDescription: \"You don't have permission to invite users\",\n      });\n    }\n\n    const invitation = await tenantService.createInvitation(req.db, tenantId, email, role, req.admin.id, req.logger);\n    res.status(StatusCodes.CREATED).json(invitation);\n  } catch (error) {\n    req.logger.error(\"Failed to create invitation\", error);\n    if (error instanceof Error) {\n      res.status(StatusCodes.BAD_REQUEST).json({ error: error.message });\n    } else {\n      res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({ error: \"Failed to create invitation\" });\n    }\n  }\n};\n\nexport const getInvitationByToken = async (req: Request, res: Response) => {\n  if (!isAppRequest(req)) {\n    throw new TypeGuardError();\n  }\n\n  req.logger.debug(\"Getting invitation by token\");\n\n  try {\n    const { token } = req.params;\n\n    if (!token) {\n      res.status(StatusCodes.BAD_REQUEST).json({ error: \"Token is required\" });\n      return;\n    }\n\n    const invitation = await tenantService.getInvitationByToken(req.db, token);\n    res.json(invitation);\n  } catch (error) {\n    req.logger.error(\"Failed to get invitation by token\", error);\n    if (error instanceof Error) {\n      res.status(StatusCodes.BAD_REQUEST).json({ error: error.message });\n    } else {\n      res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({ error: \"Failed to get invitation\" });\n    }\n  }\n};\n\nexport const acceptInvitation = async (req: Request, res: Response) => {\n  if (!isAppRequest(req)) {\n    throw new TypeGuardError();\n  }\n\n  req.logger.info(\"Accepting invitation\");\n\n  try {\n    const { token } = req.body;\n\n    if (!token) {\n      res.status(StatusCodes.BAD_REQUEST).json({ error: \"Token is required\" });\n      return;\n    }\n\n    const result = await tenantService.acceptInvitation(req.db, token);\n    res.json(result);\n  } catch (error) {\n    req.logger.error(\"Failed to accept invitation\", error);\n    if (error instanceof Error) {\n      res.status(StatusCodes.BAD_REQUEST).json({ error: error.message });\n    } else {\n      res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({ error: \"Failed to accept invitation\" });\n    }\n  }\n};\n\nexport const updateUserRole = async (req: Request, res: Response) => {\n  if (!isAdminRequest(req)) {\n    throw new TypeGuardError();\n  }\n\n  req.logger.info(\"Updating user role\", { userId: req.params.userId, role: req.body.role });\n\n  try {\n    const tenantId = req.admin.tenantId;\n    const currentUserId = req.admin.id;\n    const { userId } = req.params;\n    const { role } = req.body;\n\n    if (!role || ![\"admin\", \"member\", \"superadmin\"].includes(role)) {\n      res.status(StatusCodes.BAD_REQUEST).json({ error: \"Valid role is required\" });\n      return;\n    }\n\n    // Check if user can manage roles\n    const canManageRoles = await tenantService.canManageRoles(req.db, tenantId, currentUserId);\n    if (!canManageRoles) {\n      return res.status(StatusCodes.FORBIDDEN).json({\n        error: \"insufficient_permissions\",\n        errorDescription: \"You don't have permission to manage user roles\",\n      });\n    }\n\n    // Prevent users from changing their own role\n    if (currentUserId === userId) {\n      return res.status(StatusCodes.BAD_REQUEST).json({\n        error: \"invalid_operation\",\n        errorDescription: \"You cannot change your own role\",\n      });\n    }\n\n    const updatedUser = await tenantService.updateUserRole(req.db, tenantId, userId, role);\n    res.json(updatedUser);\n  } catch (error) {\n    req.logger.error(\"Failed to update user role\", error);\n    if (error instanceof Error) {\n      res.status(StatusCodes.BAD_REQUEST).json({ error: error.message });\n    } else {\n      res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({ error: \"Failed to update user role\" });\n    }\n  }\n};\n\nexport const removeUserFromTenant = async (req: Request, res: Response) => {\n  if (!isAdminRequest(req)) {\n    throw new TypeGuardError();\n  }\n\n  req.logger.info(\"Removing user from tenant\", { userId: req.params.userId });\n\n  try {\n    const tenantId = req.admin.tenantId;\n    const currentUserId = req.admin.id;\n    const { userId } = req.params;\n\n    // Check if user can remove other users\n    const canRemoveUsers = await tenantService.canRemoveUsers(req.db, tenantId, currentUserId);\n    if (!canRemoveUsers) {\n      return res.status(StatusCodes.FORBIDDEN).json({\n        error: \"insufficient_permissions\",\n        errorDescription: \"You don't have permission to remove users\",\n      });\n    }\n\n    // Prevent users from removing themselves\n    if (currentUserId === userId) {\n      return res.status(StatusCodes.BAD_REQUEST).json({\n        error: \"invalid_operation\",\n        errorDescription: \"You cannot remove yourself from the tenant\",\n      });\n    }\n\n    await tenantService.removeUserFromTenant(req.db, tenantId, userId);\n    res.status(StatusCodes.NO_CONTENT).send();\n  } catch (error) {\n    req.logger.error(\"Failed to remove user from tenant\", error);\n    if (error instanceof Error) {\n      res.status(StatusCodes.BAD_REQUEST).json({ error: error.message });\n    } else {\n      res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({ error: \"Failed to remove user from tenant\" });\n    }\n  }\n};\n\nexport const cancelInvitation = async (req: Request, res: Response) => {\n  if (!isAdminRequest(req)) {\n    throw new TypeGuardError();\n  }\n\n  req.logger.info(\"Cancelling invitation\", { invitationId: req.params.invitationId });\n\n  try {\n    const tenantId = req.admin.tenantId;\n    const currentUserId = req.admin.id;\n    const { invitationId } = req.params;\n\n    // Check if user can manage invitations\n    const canInvite = await tenantService.canInviteUsers(req.db, tenantId, currentUserId);\n    if (!canInvite) {\n      return res.status(StatusCodes.FORBIDDEN).json({\n        error: \"insufficient_permissions\",\n        errorDescription: \"You don't have permission to cancel invitations\",\n      });\n    }\n\n    await tenantService.cancelInvitation(req.db, tenantId, invitationId);\n    res.status(StatusCodes.NO_CONTENT).send();\n  } catch (error) {\n    req.logger.error(\"Failed to cancel invitation\", error);\n    if (error instanceof Error) {\n      res.status(StatusCodes.BAD_REQUEST).json({ error: error.message });\n    } else {\n      res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({ error: \"Failed to cancel invitation\" });\n    }\n  }\n};\n\nexport const getUserTenants = async (req: Request, res: Response) => {\n  if (!isAdminRequest(req)) {\n    throw new TypeGuardError();\n  }\n\n  req.logger.debug(\"Getting user tenants\");\n\n  try {\n    const tenants = await tenantService.getUserTenants(req.db, req.admin.id);\n    res.json(tenants);\n  } catch (error) {\n    req.logger.error(\"Failed to get user tenants\", error);\n    res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({ error: \"Failed to get user tenants\" });\n  }\n};\n", "import { AdminRole, InvitationStatus, TenantRole } from \"@prisma/client\";\nimport { randomBytes } from \"crypto\";\nimport { addDays } from \"date-fns\";\nimport { Logger } from \"winston\";\nimport { Database } from \"../utils/connection.js\";\nimport { sendTenantInvitationEmail } from \"./email.service.js\";\nconst baseUrl = process.env.CONSOLE_URL || \"http://localhost:4200\";\n\nexport interface TenantUser {\n  id: string;\n  email: string;\n  name?: string;\n  role: AdminRole;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface TenantInvitation {\n  id: string;\n  email: string;\n  role: AdminRole;\n  status: InvitationStatus;\n  invitedBy: {\n    id: string;\n    email: string;\n    name?: string;\n  };\n  acceptedBy?: {\n    id: string;\n    email: string;\n    name?: string;\n  };\n  expiresAt: string;\n  createdAt: string;\n}\n\nexport async function getTenantUsers(db: Database, tenantId: string, currentUserId?: string) {\n  // Get all admins (which now include members, admins, and superadmins)\n  const admins = await db.admin.findMany({\n    where: { tenantId },\n    select: {\n      id: true,\n      email: true,\n      name: true,\n      givenName: true,\n      familyName: true,\n      role: true,\n      createdAt: true,\n      updatedAt: true,\n    },\n    orderBy: { createdAt: \"asc\" },\n  });\n\n  // Format results\n  const users = admins.map((admin) => ({\n    id: admin.id,\n    email: admin.email,\n    name: admin.name || `${admin.givenName || \"\"} ${admin.familyName || \"\"}`.trim() || undefined,\n    role: admin.role,\n    createdAt: admin.createdAt.toISOString(),\n    updatedAt: admin.updatedAt.toISOString(),\n  }));\n\n  // Filter out the current user if provided\n  if (currentUserId) {\n    return users.filter((user) => user.id !== currentUserId);\n  }\n\n  return users;\n}\n\nexport async function getTenantInvitations(db: Database, tenantId: string) {\n  const invitations = await db.tenantInvitation.findMany({\n    where: { tenantId },\n    include: {\n      invitedBy: {\n        select: {\n          id: true,\n          email: true,\n          name: true,\n        },\n      },\n      acceptedBy: {\n        select: {\n          id: true,\n          email: true,\n          name: true,\n        },\n      },\n    },\n    orderBy: { createdAt: \"desc\" },\n  });\n\n  return invitations.map((inv) => ({\n    id: inv.id,\n    email: inv.email,\n    role: inv.role,\n    status: inv.status,\n    invitedBy: {\n      id: inv.invitedBy.id,\n      email: inv.invitedBy.email,\n      name: inv.invitedBy.name || undefined,\n    },\n    acceptedBy: inv.acceptedBy\n      ? {\n          id: inv.acceptedBy.id,\n          email: inv.acceptedBy.email,\n          name: inv.acceptedBy.name || undefined,\n        }\n      : undefined,\n    expiresAt: inv.expiresAt.toISOString(),\n    createdAt: inv.createdAt.toISOString(),\n  }));\n}\n\nexport async function createInvitation(\n  db: Database,\n  tenantId: string,\n  email: string,\n  role: TenantRole,\n  invitedById: string,\n  logger: Logger,\n) {\n  // Check if user is already a member\n  const existingUser = await db.admin.findFirst({\n    where: { email, tenantId },\n  });\n\n  if (existingUser) {\n    throw new Error(\"User is already a member of this tenant\");\n  }\n\n  // Check if there's already a pending invitation\n  const existingPendingInvitation = await db.tenantInvitation.findFirst({\n    where: { email, tenantId, status: InvitationStatus.pending },\n  });\n\n  if (existingPendingInvitation) {\n    throw new Error(\"User already has a pending invitation\");\n  }\n\n  // If there's a cancelled invitation, we'll update it instead of creating a new one\n  const existingCancelledInvitation = await db.tenantInvitation.findFirst({\n    where: { email, tenantId, status: InvitationStatus.cancelled },\n  });\n\n  // Verify the inviter exists\n  const inviter = await db.admin.findUnique({\n    where: { id: invitedById },\n  });\n\n  if (!inviter) {\n    throw new Error(\"Invalid inviter ID\");\n  }\n\n  const token = randomBytes(32).toString(\"hex\");\n  const expiresAt = addDays(new Date(), 7); // 7 days expiration\n\n  let invitation;\n\n  if (existingCancelledInvitation) {\n    // Update the existing cancelled invitation\n    invitation = await db.tenantInvitation.update({\n      where: { id: existingCancelledInvitation.id },\n      data: {\n        role,\n        invitedById,\n        token,\n        expiresAt,\n        status: InvitationStatus.pending,\n        acceptedById: null, // Clear any previous acceptance\n      },\n      include: {\n        invitedBy: {\n          select: {\n            id: true,\n            email: true,\n            name: true,\n          },\n        },\n      },\n    });\n  } else {\n    // Create a new invitation\n    invitation = await db.tenantInvitation.create({\n      data: {\n        tenantId,\n        email,\n        role,\n        invitedById,\n        token,\n        expiresAt,\n      },\n      include: {\n        invitedBy: {\n          select: {\n            id: true,\n            email: true,\n            name: true,\n          },\n        },\n      },\n    });\n  }\n\n  // Fetch inviter and tenant\n  const tenant = await db.tenant.findUnique({ where: { id: tenantId } });\n  const invitationLink = `${baseUrl}/invite/${invitation.token}`;\n\n  try {\n    await sendTenantInvitationEmail(\n      logger,\n      invitation.email,\n      inviter?.name || inviter?.email || \"Someone\",\n      tenant?.name || \"Tenant\",\n      invitationLink,\n      invitation.role,\n      invitation.expiresAt,\n    );\n  } catch (err) {\n    logger.debug(\"Failed to send tenant invitation email\", err);\n  }\n\n  return {\n    id: invitation.id,\n    email: invitation.email,\n    role: invitation.role,\n    status: invitation.status,\n    invitedBy: {\n      id: invitation.invitedBy.id,\n      email: invitation.invitedBy.email,\n      name: invitation.invitedBy.name || undefined,\n    },\n    tenantName: tenant?.name || \"Tenant\",\n    token: invitation.token,\n    expiresAt: invitation.expiresAt.toISOString(),\n    createdAt: invitation.createdAt.toISOString(),\n  };\n}\n\nexport async function acceptInvitation(db: Database, token: string) {\n  const invitation = await db.tenantInvitation.findUnique({\n    where: { token },\n    include: { tenant: true },\n  });\n\n  if (!invitation) {\n    throw new Error(\"Invalid invitation token\");\n  }\n\n  if (invitation.status !== InvitationStatus.pending) {\n    throw new Error(\"Invitation is no longer valid\");\n  }\n\n  if (invitation.expiresAt < new Date()) {\n    throw new Error(\"Invitation has expired\");\n  }\n\n  // Check if user already exists in the tenant\n  const existingUser = await db.admin.findFirst({\n    where: { email: invitation.email, tenantId: invitation.tenantId },\n  });\n\n  if (existingUser) {\n    throw new Error(\"User is already a member of this tenant\");\n  }\n\n  // Generate a new user ID\n  const userId = crypto.randomUUID();\n\n  // Create user in Admin table with the specified role\n  const adminRole = invitation.role as AdminRole;\n  await db.admin.create({\n    data: {\n      id: userId,\n      tenantId: invitation.tenantId,\n      email: invitation.email,\n      role: adminRole,\n      enabled: true, // Auto-enable the user\n      emailVerified: true, // Mark as verified since they came through invitation\n    },\n  });\n\n  // Update invitation status\n  await db.tenantInvitation.update({\n    where: { id: invitation.id },\n    data: {\n      status: InvitationStatus.accepted,\n      acceptedById: userId,\n    },\n  });\n\n  return {\n    tenantId: invitation.tenantId,\n    tenantName: invitation.tenant.name,\n    role: invitation.role,\n    userId: userId,\n  };\n}\n\nexport async function updateUserRole(db: Database, tenantId: string, userId: string, role: AdminRole) {\n  // Check if user exists\n  const admin = await db.admin.findFirst({\n    where: { id: userId, tenantId },\n  });\n\n  if (!admin) {\n    throw new Error(\"User is not a member of this tenant\");\n  }\n\n  // Update the admin's role\n  const updatedAdmin = await db.admin.update({\n    where: { id: userId },\n    data: { role },\n  });\n\n  return {\n    id: updatedAdmin.id,\n    email: updatedAdmin.email,\n    name: updatedAdmin.name || `${updatedAdmin.givenName || \"\"} ${updatedAdmin.familyName || \"\"}`.trim() || undefined,\n    role: updatedAdmin.role,\n    createdAt: updatedAdmin.createdAt.toISOString(),\n    updatedAt: updatedAdmin.updatedAt.toISOString(),\n  };\n}\n\nexport async function removeUserFromTenant(db: Database, tenantId: string, userId: string) {\n  // Check if user exists\n  const admin = await db.admin.findFirst({\n    where: { id: userId, tenantId },\n  });\n\n  if (!admin) {\n    throw new Error(\"User is not a member of this tenant\");\n  }\n\n  // Delete from admin table\n  await db.admin.delete({ where: { id: userId } });\n}\n\nexport async function cancelInvitation(db: Database, tenantId: string, invitationId: string) {\n  const invitation = await db.tenantInvitation.findFirst({\n    where: { id: invitationId, tenantId },\n  });\n\n  if (!invitation) {\n    throw new Error(\"Invitation not found\");\n  }\n\n  if (invitation.status !== InvitationStatus.pending) {\n    throw new Error(\"Cannot cancel non-pending invitation\");\n  }\n\n  return db.tenantInvitation.update({\n    where: { id: invitationId },\n    data: { status: InvitationStatus.cancelled },\n  });\n}\n\nexport async function getUserTenants(db: Database, userId: string) {\n  // Get user's tenants from admin table (which now includes all roles)\n  const adminTenants = await db.admin.findMany({\n    where: { id: userId },\n    include: {\n      tenant: {\n        select: {\n          id: true,\n          name: true,\n          description: true,\n        },\n      },\n    },\n    orderBy: { createdAt: \"asc\" },\n  });\n\n  return adminTenants.map((admin) => ({\n    id: admin.tenant.id,\n    name: admin.tenant.name,\n    description: admin.tenant.description || undefined,\n    role: admin.role,\n    joinedAt: admin.createdAt.toISOString(),\n  }));\n}\n\nexport async function isUserTenantAdmin(db: Database, tenantId: string, userId: string): Promise<boolean> {\n  const admin = await db.admin.findFirst({\n    where: { id: userId, tenantId },\n  });\n\n  return !!admin;\n}\n\nexport async function getInvitationByToken(db: Database, token: string) {\n  const invitation = await db.tenantInvitation.findUnique({\n    where: { token },\n    include: {\n      tenant: {\n        select: {\n          id: true,\n          name: true,\n        },\n      },\n      invitedBy: {\n        select: {\n          id: true,\n          email: true,\n          name: true,\n        },\n      },\n    },\n  });\n\n  if (!invitation) {\n    throw new Error(\"Invalid invitation token\");\n  }\n\n  if (invitation.status !== InvitationStatus.pending) {\n    throw new Error(\"Invitation is no longer valid\");\n  }\n\n  if (invitation.expiresAt < new Date()) {\n    throw new Error(\"Invitation has expired\");\n  }\n\n  return {\n    id: invitation.id,\n    email: invitation.email,\n    role: invitation.role,\n    status: invitation.status,\n    tenantName: invitation.tenant.name,\n    invitedBy: {\n      id: invitation.invitedBy.id,\n      email: invitation.invitedBy.email,\n      name: invitation.invitedBy.name || undefined,\n    },\n    expiresAt: invitation.expiresAt.toISOString(),\n    createdAt: invitation.createdAt.toISOString(),\n  };\n}\n\n// Role checking functions\nexport async function canManageUsers(db: Database, tenantId: string, userId: string): Promise<boolean> {\n  const admin = await db.admin.findFirst({\n    where: { id: userId, tenantId },\n  });\n\n  if (!admin) {\n    return false;\n  }\n\n  // Only admins and superadmins can manage users\n  return admin.role === AdminRole.admin || admin.role === AdminRole.superadmin;\n}\n\nexport async function canManageRoles(db: Database, tenantId: string, userId: string): Promise<boolean> {\n  const admin = await db.admin.findFirst({\n    where: { id: userId, tenantId },\n  });\n\n  if (!admin) {\n    return false;\n  }\n\n  // Only admins and superadmins can manage roles\n  return admin.role === AdminRole.admin || admin.role === AdminRole.superadmin;\n}\n\nexport async function canRemoveUsers(db: Database, tenantId: string, userId: string): Promise<boolean> {\n  const admin = await db.admin.findFirst({\n    where: { id: userId, tenantId },\n  });\n\n  if (!admin) {\n    return false;\n  }\n\n  // Only admins and superadmins can remove users\n  return admin.role === AdminRole.admin || admin.role === AdminRole.superadmin;\n}\n\nexport async function canInviteUsers(db: Database, tenantId: string, userId: string): Promise<boolean> {\n  const admin = await db.admin.findFirst({\n    where: { id: userId, tenantId },\n  });\n\n  if (!admin) {\n    return false;\n  }\n\n  // Only admins and superadmins can invite users\n  return admin.role === AdminRole.admin || admin.role === AdminRole.superadmin;\n}\n", "import { AdminRole } from \"@prisma/client\";\nimport { NextFunction, Request, Response } from \"express\";\nimport { StatusCodes } from \"http-status-codes\";\nimport { isAdminRequest, TypeGuardError } from \"../utils/req-guards.js\";\n\nexport const requireRole = (requiredRoles: AdminRole[]) => {\n  return (req: Request, res: Response, next: NextFunction) => {\n    if (!isAdminRequest(req)) {\n      throw new TypeGuardError();\n    }\n\n    const userRole = req.admin.role;\n\n    if (!requiredRoles.includes(userRole)) {\n      req.logger.warn(\"Insufficient permissions\", {\n        userRole,\n        requiredRoles,\n        userId: req.admin.id,\n        path: req.path,\n      });\n\n      return res.status(StatusCodes.FORBIDDEN).json({\n        error: \"insufficient_permissions\",\n        errorDescription: \"You don't have permission to perform this action\",\n      });\n    }\n\n    next();\n  };\n};\n\n// Convenience middleware for specific roles\nexport const requireAdmin = requireRole([AdminRole.admin, AdminRole.superadmin]);\nexport const requireSuperAdmin = requireRole([AdminRole.superadmin]);\nexport const requireMember = requireRole([AdminRole.admin, AdminRole.superadmin]);\n", "import { Router } from \"express\";\nimport { deleteUserTokens, listUserTokens, revokeProviderToken } from \"../controllers/tokens.controller.js\";\nimport { blockUser, getUser, listUsers } from \"../controllers/users.controller.js\";\nimport { adminSessionMiddleware } from \"../middlewares/session.middleware.js\";\n\nconst router: Router = Router();\n\nrouter.get(\"/\", listUsers);\nrouter.get(\"/:userId\", getUser);\nrouter.post(\"/:userId\", blockUser);\n\nrouter.get(\"/:userId/tokens\", adminSessionMiddleware, listUserTokens);\nrouter.delete(\"/:userId/tokens\", adminSessionMiddleware, deleteUserTokens);\nrouter.delete(\"/:userId/tokens/:tokenId\", adminSessionMiddleware, revokeProviderToken);\n\nexport default router;\n", "import { ProviderToken } from \"@agentbridge/api\";\nimport { Request, Response } from \"express\";\nimport { StatusCodes } from \"http-status-codes\";\nimport * as tokensService from \"../services/tokens.service.js\";\nimport { isAdminRequest, TypeGuardError } from \"../utils/req-guards.js\";\n\nexport const listUserTokens = async (\n  req: Request<{ userId?: string }, object, object, { includeExpired?: string; provider?: string; scope?: string }>,\n  res: Response,\n) => {\n  if (!isAdminRequest(req)) {\n    throw new TypeGuardError();\n  }\n\n  if (!req.params.userId) {\n    res.status(StatusCodes.BAD_REQUEST).json({ error: \"User ID is required\" });\n    return;\n  }\n\n  req.logger.debug(\"Listing user tokens\", {\n    userId: req.params.userId,\n    query: req.query,\n  });\n\n  try {\n    const tokens: ProviderToken[] = await tokensService.listUserTokens(req.db, req.params.userId, req.admin.tenantId, {\n      includeExpired: req.query.includeExpired === \"true\",\n      providerName: req.query.provider as string | undefined,\n      scope: req.query.scope as string | undefined,\n    });\n\n    res.json(tokens);\n  } catch (error) {\n    req.logger.error(\"Failed to list user tokens\", error);\n    res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({ error: \"Failed to list user tokens\" });\n  }\n};\n\nexport const revokeProviderToken = async (req: Request<{ userId: string; tokenId: string }>, res: Response) => {\n  if (!isAdminRequest(req)) {\n    throw new TypeGuardError();\n  }\n\n  req.logger.info(\"Revoking provider token\", {\n    userId: req.params.userId,\n    tokenId: req.params.tokenId,\n  });\n\n  try {\n    const userExists = await tokensService.verifyUserExists(req.db, req.params.userId, req.admin.tenantId);\n\n    if (!userExists) {\n      res.status(StatusCodes.NOT_FOUND).json({ error: \"User not found\" });\n      return;\n    }\n\n    await tokensService.revokeToken(req.db, req.params.tokenId, req.params.userId);\n\n    res.status(StatusCodes.NO_CONTENT).send();\n  } catch (error) {\n    req.logger.error(\"Failed to revoke provider token\", error);\n    res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({ error: \"Failed to revoke provider token\" });\n  }\n};\n\nexport const deleteUserTokens = async (req: Request<{ userId: string }>, res: Response) => {\n  if (!isAdminRequest(req)) {\n    throw new TypeGuardError();\n  }\n\n  req.logger.info(\"Deleting user tokens\", { userId: req.params.userId });\n\n  try {\n    const user = await tokensService.getUserByIdSlim(req.db, req.params.userId, req.admin.tenantId);\n\n    if (!user) {\n      res.status(StatusCodes.NOT_FOUND).json({ error: \"User not found\" });\n      return;\n    }\n\n    await tokensService.deleteUserTokens(req.db, req.params.userId);\n\n    tokensService.clearUserTokenCache(user.email);\n\n    res.status(StatusCodes.NO_CONTENT).send();\n  } catch (error) {\n    req.logger.error(\"Failed to delete user tokens\", error);\n    res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({ error: \"Failed to delete user tokens\" });\n  }\n};\n", "import { ProviderToken } from \"@agentbridge/api\";\nimport { ProviderToken as PrismaProviderToken } from \"@prisma/client\";\nimport { Database } from \"../utils/connection.js\";\nimport { CacheItemType, clearCacheByPartialKey } from \"./cache.service.js\";\n\nexport const mapToken = (token: PrismaProviderToken & { provider: { id: string; name: string } }): ProviderToken => ({\n  id: token.id,\n  providerId: token.provider.id,\n  providerName: token.provider.name,\n  scopes: token.scopes,\n  issuedAt: token.issuedAt.toISOString(),\n  expiresAt: token.expiresAt ? token.expiresAt.toISOString() : undefined,\n});\n\nexport async function listUserTokens(\n  db: Database,\n  userId: string,\n  tenantId: string,\n  options: {\n    includeExpired?: boolean;\n    providerName?: string;\n    scope?: string;\n  },\n): Promise<ProviderToken[]> {\n  const now = new Date();\n\n  const tokens = await db.providerToken.findMany({\n    where: {\n      userId: userId,\n      user: {\n        tenantId,\n      },\n      ...(options.includeExpired !== true ? { OR: [{ expiresAt: { gte: now } }, { expiresAt: null }] } : {}),\n      ...(options.providerName ? { provider: { name: options.providerName } } : {}),\n      ...(options.scope ? { scopes: { has: options.scope } } : {}),\n    },\n    orderBy: [\n      {\n        provider: {\n          name: \"asc\",\n        },\n      },\n      {\n        id: \"asc\",\n      },\n    ],\n    include: {\n      provider: {\n        select: {\n          id: true,\n          name: true,\n        },\n      },\n    },\n  });\n\n  return tokens\n    .filter((token): token is PrismaProviderToken & { provider: { id: string; name: string } } =>\n      Boolean(token.provider),\n    )\n    .map(mapToken);\n}\n\nexport async function verifyUserExists(db: Database, userId: string, tenantId: string): Promise<boolean> {\n  const user = await db.endUser.findUnique({\n    where: {\n      id: userId,\n      tenantId,\n    },\n  });\n\n  return !!user;\n}\n\nexport async function getUserByIdSlim(db: Database, userId: string, tenantId: string) {\n  return await db.endUser.findUnique({\n    where: {\n      id: userId,\n      tenantId,\n    },\n    select: {\n      id: true,\n      email: true,\n    },\n  });\n}\n\nexport async function revokeToken(db: Database, tokenId: string, userId: string): Promise<void> {\n  await db.providerToken.delete({\n    where: {\n      id: tokenId,\n      userId: userId,\n    },\n  });\n}\n\nexport async function deleteUserTokens(db: Database, userId: string): Promise<string | null> {\n  await db.providerToken.deleteMany({\n    where: {\n      userId: userId,\n    },\n  });\n\n  return null;\n}\n\nexport async function clearUserTokenCache(email: string): Promise<void> {\n  clearCacheByPartialKey(CacheItemType.ENDUSER_TOKEN, email);\n}\n", "import { Request, Response } from \"express\";\nimport { StatusCodes } from \"http-status-codes\";\nimport { CacheItemType, clearCacheByType } from \"../services/cache.service.js\";\nimport * as usersService from \"../services/users.service.js\";\nimport { queryToBoolean } from \"../utils/qsParsers.js\";\nimport { isAdminRequest, TypeGuardError } from \"../utils/req-guards.js\";\n\nexport const listUsers = async (\n  req: Request<Record<string, string>, object, object, { search?: string; page?: string; limit?: string }>,\n  res: Response,\n) => {\n  if (!isAdminRequest(req)) {\n    throw new TypeGuardError();\n  }\n\n  req.logger.debug(\"Listing users\", { query: req.query });\n\n  try {\n    const tenantId = req.admin.tenantId;\n    const page = req.query.page ? parseInt(req.query.page as string) : 1;\n    const limit = req.query.limit ? parseInt(req.query.limit as string) : 20;\n\n    const result = await usersService.listUsers(req.db, tenantId, req.query.search as string, page, limit);\n\n    res.json(result);\n  } catch (error) {\n    req.logger.error(\"Failed to list users\", error);\n    res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({ error: \"Failed to list users\" });\n  }\n};\n\nexport const getUser = async (req: Request<{ userId: string }>, res: Response) => {\n  if (!isAdminRequest(req)) {\n    throw new TypeGuardError();\n  }\n\n  req.logger.debug(\"Getting user\", { userId: req.params.userId });\n\n  try {\n    const tenantId = req.admin.tenantId;\n    const user = await usersService.getUser(req.db, req.params.userId, tenantId);\n\n    if (!user) {\n      res.status(StatusCodes.NOT_FOUND).json({ error: \"User not found\" });\n      return;\n    }\n\n    res.json(user);\n  } catch (error) {\n    req.logger.error(\"Failed to get user\", error);\n    res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({ error: \"Failed to get user\" });\n  }\n};\n\nexport const blockUser = async (req: Request<{ userId: string }>, res: Response) => {\n  if (!isAdminRequest(req)) {\n    throw new TypeGuardError();\n  }\n\n  req.logger.info(\"Blocking user server access\", { userId: req.params.userId, block: req.query.block });\n\n  try {\n    const tenantId = req.admin.tenantId;\n\n    const blocked = queryToBoolean(req.query.block);\n\n    if (blocked === undefined) {\n      res.status(StatusCodes.BAD_REQUEST).json({ error: \"Invalid 'block' parameter. Expected 'true' or 'false'.\" });\n      return;\n    }\n\n    await usersService.blockUserServerAccess(req.db, req.params.userId, tenantId, blocked);\n\n    clearCacheByType(CacheItemType.SERVER_ACCESS);\n\n    res.status(StatusCodes.OK).json({ blocked });\n  } catch (error) {\n    req.logger.error(\"Failed to block user server access\", error);\n    res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({ error: \"Failed to block user server access\" });\n  }\n};\n", "import { User } from \"@agentbridge/api\";\nimport { EndUser } from \"@prisma/client\";\nimport { DEFAULT_PAGE_SIZE } from \"../utils/config.js\";\nimport { Database } from \"../utils/connection.js\";\n\nconst mapUser = (user: EndUser): User => ({\n  ...user,\n  picture: user.picture || undefined,\n  createdAt: user.createdAt.toISOString(),\n});\n\nexport async function listUsers(db: Database, tenantId: string, search?: string, page = 1, limit = DEFAULT_PAGE_SIZE) {\n  const users = await db.endUser.findMany({\n    where: {\n      tenantId,\n      ...(search ? { email: { contains: search, mode: \"insensitive\" } } : {}),\n    },\n    orderBy: [\n      {\n        name: \"asc\",\n      },\n      {\n        id: \"asc\",\n      },\n    ],\n    take: limit,\n    skip: (page - 1) * limit,\n  });\n\n  const totalUsers = await db.endUser.count({\n    where: {\n      tenantId,\n      ...(search ? { email: { contains: search, mode: \"insensitive\" } } : {}),\n    },\n  });\n\n  const totalPages = Math.ceil(totalUsers / limit);\n\n  return {\n    data: users.map(mapUser),\n    pagination: {\n      totalItems: totalUsers,\n      totalPages,\n      currentPage: page,\n      itemsPerPage: limit,\n    },\n  };\n}\n\nexport async function getUser(db: Database, userId: string, tenantId: string) {\n  const user = await db.endUser.findUnique({\n    where: {\n      id: userId,\n      tenantId,\n    },\n  });\n  return user ? mapUser(user) : null;\n}\n\nexport async function blockUserServerAccess(db: Database, userId: string, tenantId: string, blocked: boolean) {\n  return db.endUser.updateMany({\n    where: { id: userId, tenantId },\n    data: { enabled: !blocked },\n  });\n}\n", "import { ParsedQs } from \"qs\";\n\nexport const queryToBoolean = (query: string | ParsedQs | (string | ParsedQs)[] | undefined): boolean | undefined => {\n  if (query === undefined) {\n    return undefined;\n  }\n  if (typeof query === \"boolean\") {\n    return query;\n  }\n  if (typeof query === \"string\") {\n    return query.toLowerCase() === \"true\";\n  }\n  return undefined;\n};\n"],
  "mappings": "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",
  "names": ["tracer", "winston", "CacheItemType", "NodeCache", "jwt", "snakeCase", "groupBy", "providers", "tool", "snakeCase", "omit", "import_omit", "import_snakeCase", "import_express", "import_http_status_codes", "logger", "crypto", "import_client", "import_http_status_codes", "import_http_status_codes", "logger", "callbackUrl", "axios", "qs", "omit", "crypto", "token", "req", "import_http_status_codes", "import_client", "logger", "appSecrets", "nodemailer", "logger", "existingAdmin", "admin", "sendAdminApprovedNotification", "sendAdminApprovedNotification", "import_express", "import_zod", "prisma", "config", "tool", "createTool", "generateRequestOverrides", "prisma", "config", "config", "tool", "router", "generateText", "openai", "import_express", "appSecrets", "analytics", "logger", "router", "import_express", "import_http_status_codes", "listFolders", "createFolder", "updateFolder", "deleteFolder", "router", "listFolders", "createFolder", "updateFolder", "deleteFolder", "import_express", "import_http_status_codes", "router", "express", "import_express", "import_http_status_codes", "import_axios", "import_zod", "logger", "schema", "baseUrl", "config", "Handlebars", "logger", "tool", "baseUrl", "config", "axios", "jwt", "tool", "logger", "isEmpty", "authUrl", "logger", "import_jsonwebtoken", "logger", "jwt", "publicKey", "logger", "config", "verifyEndUserToken", "logger", "config", "logger", "logger", "config", "tool", "router", "router", "import_express", "import_axios", "import_http_status_codes", "axios", "router", "express", "import_express", "import_axios", "crypto", "import_http_status_codes", "getServerById", "crypto", "baseUrl", "redirectUrl", "axios", "client", "router", "import_express", "import_http_status_codes", "config", "import_http_status_codes", "router", "express", "import_express", "import_http_status_codes", "import_omit", "omit", "router", "import_express", "import_http_status_codes", "config", "router", "import_express", "import_http_status_codes", "createServer", "clearCache", "clearCacheByPartialKey", "yaml", "createTool", "tool", "res", "router", "createServer", "createTool", "import_express", "import_http_status_codes", "import_client", "import_crypto", "baseUrl", "logger", "getTenantUsers", "getTenantInvitations", "createInvitation", "getInvitationByToken", "acceptInvitation", "updateUserRole", "canManageRoles", "removeUserFromTenant", "canRemoveUsers", "cancelInvitation", "getUserTenants", "import_client", "import_http_status_codes", "router", "getTenantUsers", "getTenantInvitations", "createInvitation", "updateUserRole", "removeUserFromTenant", "cancelInvitation", "getInvitationByToken", "acceptInvitation", "getUserTenants", "import_express", "import_http_status_codes", "listUserTokens", "deleteUserTokens", "import_http_status_codes", "listUsers", "getUser", "router", "listUsers", "getUser", "listUserTokens", "deleteUserTokens", "express", "cors"]
}
