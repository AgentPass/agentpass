"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// src/utils/config.ts
var isLocalRun, DEFAULT_PAGE_SIZE;
var init_config = __esm({
  "src/utils/config.ts"() {
    "use strict";
    isLocalRun = process.env.IS_LOCAL === "true";
    DEFAULT_PAGE_SIZE = 20;
  }
});

// src/logger.ts
var import_dd_trace, import_winston, logger, logger_default;
var init_logger = __esm({
  "src/logger.ts"() {
    "use strict";
    import_dd_trace = __toESM(require("dd-trace"), 1);
    import_winston = __toESM(require("winston"), 1);
    init_config();
    import_dd_trace.default.init({
      logInjection: true
    });
    logger = import_winston.default.createLogger({
      level: process.env.LOG_LEVEL || "info",
      format: import_winston.default.format.combine(
        import_winston.default.format.timestamp(),
        import_winston.default.format.json(),
        import_winston.default.format.errors({ stack: true })
      ),
      transports: [
        new import_winston.default.transports.Console({
          format: isLocalRun ? import_winston.default.format.combine(import_winston.default.format.colorize(), import_winston.default.format.simple()) : void 0
        })
      ]
    });
    logger_default = logger;
  }
});

// src/services/secrets.service.ts
async function getAppSecrets() {
  return await appSecrets;
}
var import_client_secrets_manager, environment, secretName, client, appSecrets;
var init_secrets_service = __esm({
  "src/services/secrets.service.ts"() {
    "use strict";
    import_client_secrets_manager = require("@aws-sdk/client-secrets-manager");
    init_logger();
    environment = process.env.ENV || "dev";
    secretName = `agentbridge-${environment}-secrets`;
    client = new import_client_secrets_manager.SecretsManagerClient({
      region: process.env.AWS_SECRETS_REGION || "us-east-2"
    });
    appSecrets = (async () => {
      try {
        const input = {
          SecretId: secretName
        };
        const command = new import_client_secrets_manager.GetSecretValueCommand(input);
        const response = await client.send(command);
        if (!response.SecretString) {
          throw new Error(`Secret ${secretName} value is empty`);
        }
        const value = JSON.parse(response.SecretString);
        logger_default.debug(`Successfully loaded secrets from AWS Secrets Manager for environment: ${environment}`);
        return value;
      } catch (error) {
        logger_default.error(`Failed to retrieve secrets from AWS Secrets Manager`, error);
        process.exit(1);
      }
    })();
  }
});

// src/services/cache.service.ts
var cache_service_exports = {};
__export(cache_service_exports, {
  CacheItemType: () => CacheItemType,
  cache: () => cache,
  cacheGetOrAdd: () => cacheGetOrAdd,
  clearCache: () => clearCache,
  clearCacheByPartialKey: () => clearCacheByPartialKey,
  clearCacheByType: () => clearCacheByType
});
async function cacheGetOrAdd(key, fetchFn) {
  const keyString = keyToString(key);
  const cached = cache.get(keyString);
  if (cached) {
    return cached.value;
  }
  const value = await fetchFn();
  const ttl = TTL_CONFIG[key.type];
  cache.set(keyString, { value }, ttl);
  return value;
}
function clearCache(key) {
  const keyString = keyToString(key);
  return cache.del(keyString) > 0;
}
function clearCacheByType(type) {
  clearCacheByKeyPrefix(`${type}::`);
}
function clearCacheByPartialKey(type, id) {
  clearCacheByKeyPrefix(keyToString({ type, ids: [id] }));
}
var import_node_cache, CacheItemType, TTL_CONFIG, cache, keyToString, clearCacheByKeyPrefix;
var init_cache_service = __esm({
  "src/services/cache.service.ts"() {
    "use strict";
    import_node_cache = __toESM(require("node-cache"), 1);
    CacheItemType = /* @__PURE__ */ ((CacheItemType2) => {
      CacheItemType2["SERVER_ACCESS"] = "server_access";
      CacheItemType2["SERVER"] = "server";
      CacheItemType2["ENDUSER_TOKEN"] = "enduser_token";
      return CacheItemType2;
    })(CacheItemType || {});
    TTL_CONFIG = {
      ["server_access" /* SERVER_ACCESS */]: 300,
      // 5 minutes
      ["server" /* SERVER */]: 120,
      // 2 minutes
      ["enduser_token" /* ENDUSER_TOKEN */]: 300
      // 5 minutes
    };
    cache = new import_node_cache.default({
      checkperiod: 30
    });
    keyToString = (key) => `${key.type}::${key.ids.join(":")}`;
    clearCacheByKeyPrefix = (keyString) => {
      const keys = cache.keys();
      const matchingKeys = keys.filter((key) => key.startsWith(keyString));
      if (matchingKeys.length > 0) {
        cache.del(matchingKeys);
      }
    };
  }
});

// src/services/jwt.service.ts
var jwt_service_exports = {};
__export(jwt_service_exports, {
  generateAdminToken: () => generateAdminToken,
  generateAdminVerificationToken: () => generateAdminVerificationToken,
  generateEndUserToken: () => generateEndUserToken,
  verifyAdminToken: () => verifyAdminToken,
  verifyAdminVerificationToken: () => verifyAdminVerificationToken,
  verifyEndUserToken: () => verifyEndUserToken
});
async function generateAdminVerificationToken(id) {
  const payload = {
    id,
    action: "verify"
  };
  const options = {
    expiresIn: VERIFICATION_TOKEN_EXPIRES_IN,
    audience: id
  };
  return import_jsonwebtoken.default.sign(payload, await JWT_SECRET, options);
}
async function verifyAdminVerificationToken(token) {
  try {
    const decoded = import_jsonwebtoken.default.verify(token, await JWT_SECRET);
    if (decoded.action !== "verify") {
      return null;
    }
    return { id: decoded.id };
  } catch {
    return null;
  }
}
var import_jsonwebtoken, JWT_SECRET, JWT_EXPIRES_IN, VERIFICATION_TOKEN_EXPIRES_IN, generateAdminToken, generateEndUserToken, verifyAdminToken, verifyEndUserToken;
var init_jwt_service = __esm({
  "src/services/jwt.service.ts"() {
    "use strict";
    import_jsonwebtoken = __toESM(require("jsonwebtoken"), 1);
    init_secrets_service();
    JWT_SECRET = (async () => (await getAppSecrets()).jwtSecret)();
    JWT_EXPIRES_IN = process.env.JWT_EXPIRES_IN || "2d";
    VERIFICATION_TOKEN_EXPIRES_IN = process.env.JWT_EXPIRES_IN || "14d";
    generateAdminToken = async (admin) => {
      const payload = {
        id: admin.id,
        email: admin.email,
        tenantId: admin.tenantId,
        picture: admin.picture,
        name: admin.name,
        admin: true,
        role: admin.role
      };
      const options = {
        expiresIn: JWT_EXPIRES_IN,
        subject: admin.email
      };
      return import_jsonwebtoken.default.sign(payload, await JWT_SECRET, options);
    };
    generateEndUserToken = async (user, jti) => {
      const payload = {
        id: user.id,
        email: user.email,
        tenantId: user.tenantId,
        endUser: true,
        jti
      };
      const options = {
        subject: user.email
      };
      return import_jsonwebtoken.default.sign(payload, await JWT_SECRET, options);
    };
    verifyAdminToken = async (token) => {
      try {
        const decoded = import_jsonwebtoken.default.verify(token, await JWT_SECRET);
        if (!decoded.admin) {
          return null;
        }
        return decoded;
      } catch {
        return null;
      }
    };
    verifyEndUserToken = async (token) => {
      try {
        const decoded = import_jsonwebtoken.default.verify(token, await JWT_SECRET, { ignoreExpiration: true });
        if (!decoded.endUser) {
          return null;
        }
        return decoded;
      } catch {
        return null;
      }
    };
  }
});

// src/utils/generateRequestOverrides.ts
var generateRequestOverrides_exports = {};
__export(generateRequestOverrides_exports, {
  generateRequestOverrides: () => generateRequestOverrides,
  generateRequestOverridesFromOperation: () => generateRequestOverridesFromOperation
});
function generateRequestOverridesFromOperation(operation, pathItem) {
  const overrides = {};
  const queryParams = {};
  const headerParams = {};
  const pathParams = {};
  const allParameters = [...pathItem.parameters || [], ...operation.parameters || []];
  allParameters.forEach((param) => {
    if (typeof param === "object" && "name" in param) {
      const parameter = param;
      const template = `{{toolParams.${parameter.name}}}`;
      switch (parameter.in) {
        case "query":
          queryParams[parameter.name] = template;
          break;
        case "header":
          headerParams[parameter.name] = template;
          break;
        case "path":
          pathParams[parameter.name] = template;
          break;
      }
    }
  });
  if (operation.requestBody && typeof operation.requestBody === "object" && "content" in operation.requestBody) {
    const requestBody = operation.requestBody;
    const jsonContent = requestBody.content?.["application/json"];
    if (jsonContent?.schema) {
      const schema = jsonContent.schema;
      if (schema.properties) {
        const bodyStructure = {};
        Object.keys(schema.properties).forEach((propName) => {
          bodyStructure[propName] = `{{toolParams.body.${propName}}}`;
        });
        overrides.body = bodyStructure;
        overrides.bodyFormat = "json";
      } else {
        overrides.body = "{{toolParams.body}}";
        overrides.bodyFormat = "json";
      }
    }
  }
  if (Object.keys(queryParams).length > 0) {
    overrides.query = queryParams;
  }
  if (Object.keys(headerParams).length > 0) {
    overrides.headers = headerParams;
  }
  if (Object.keys(pathParams).length > 0) {
    overrides.path = pathParams;
  }
  return overrides;
}
function generateRequestOverrides(parameters) {
  const overrides = {};
  const queryParams = {};
  const headerParams = {};
  const pathParams = {};
  let hasBodyParam = false;
  const bodyStructure = {};
  for (const [name, param] of Object.entries(parameters)) {
    const template = `{{toolParams.${name}}}`;
    switch (param.in) {
      case "query":
      case void 0:
        queryParams[name] = template;
        break;
      case "header":
        headerParams[name] = template;
        break;
      case "path":
        pathParams[name] = template;
        break;
      case "body":
        hasBodyParam = true;
        if (param.schema?.properties) {
          Object.keys(param.schema.properties).forEach((propName) => {
            bodyStructure[propName] = `{{toolParams.${name}.${propName}}}`;
          });
        } else {
          bodyStructure[name] = `{{toolParams.${name}}}`;
        }
        break;
    }
  }
  if (Object.keys(queryParams).length > 0) {
    overrides.query = queryParams;
  }
  if (Object.keys(headerParams).length > 0) {
    overrides.headers = headerParams;
  }
  if (Object.keys(pathParams).length > 0) {
    overrides.path = pathParams;
  }
  if (hasBodyParam) {
    overrides.body = bodyStructure;
    overrides.bodyFormat = "json";
  }
  return overrides;
}
var init_generateRequestOverrides = __esm({
  "src/utils/generateRequestOverrides.ts"() {
    "use strict";
  }
});

// src/utils/icons.ts
var getIcon;
var init_icons = __esm({
  "src/utils/icons.ts"() {
    "use strict";
    getIcon = (name) => {
      switch (name) {
        case "google":
          return `<svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 48 48" xmlns:xlink="http://www.w3.org/1999/xlink" style="display: block;"><path fill="#EA4335" d="M24 9.5c3.54 0 6.71 1.22 9.21 3.6l6.85-6.85C35.9 2.38 30.47 0 24 0 14.62 0 6.51 5.38 2.56 13.22l7.98 6.19C12.43 13.72 17.74 9.5 24 9.5z"></path><path fill="#4285F4" d="M46.98 24.55c0-1.57-.15-3.09-.38-4.55H24v9.02h12.94c-.58 2.96-2.26 5.48-4.78 7.18l7.73 6c4.51-4.18 7.09-10.36 7.09-17.65z"></path><path fill="#FBBC05" d="M10.53 28.59c-.48-1.45-.76-2.99-.76-4.59s.27-3.14.76-4.59l-7.98-6.19C.92 16.46 0 20.12 0 24c0 3.88.92 7.54 2.56 10.78l7.97-6.19z"></path><path fill="#34A853" d="M24 48c6.48 0 11.93-2.13 15.89-5.81l-7.73-6c-2.15 1.45-4.92 2.3-8.16 2.3-6.26 0-11.57-4.22-13.47-9.91l-7.98 6.19C6.51 42.62 14.62 48 24 48z"></path><path fill="none" d="M0 0h48v48H0z"></path></svg>`;
        case "oauthGeneric":
          return `<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="800px" height="800px" viewBox="0 0 256 256" version="1.1" preserveAspectRatio="xMidYMid">
	<g>
		<path d="M118.922624,0.37140771 C175.483691,-3.5505123 212.986837,24.1282078 234.430251,57.8515157 C245.182251,74.7603157 255.731584,100.441382 255.780224,126.827729 C255.832277,155.497169 246.544597,180.324476 234.430251,198.541009 C221.979264,217.264422 205.875157,232.728956 185.709184,242.883196 C151.999957,259.857276 104.889984,260.321489 74.033024,243.978022 C39.6684361,225.777276 13.2466761,199.798822 3.41456926,154.746662 C-0.520150741,136.717436 -0.972417408,113.421862 4.50939593,93.4346624 C5.79579605,88.7460224 8.13350272,83.8116224 9.98395605,79.2014891 C18.8765427,57.0472491 34.0125427,37.7823945 52.6834773,24.4580211 C60.185984,19.1042078 69.2876373,13.7794078 77.3179307,10.2248478 C87.3096107,5.80244779 104.132224,1.3966877 118.922624,0.37140771 L118.922624,0.37140771 Z" fill="#FFFFFF">
</path>
		<path d="M226.211797,130.015782 C226.211797,183.471996 182.876971,226.803836 129.421611,226.803836 C75.9662507,226.803836 32.6322761,183.471996 32.6322761,130.015782 C32.6322761,76.5608491 75.9662507,33.2255945 129.421611,33.2255945 C182.876544,33.2255945 226.211797,76.5608491 226.211797,130.015782 L226.211797,130.015782 Z" fill="#000000">
</path>
		<path d="M118.922624,0.37140771 C175.483691,-3.5505123 212.986837,24.1282078 234.430251,57.8515157 C245.182251,74.7603157 255.731584,100.441382 255.780224,126.827729 C255.832277,155.497169 246.544597,180.324476 234.430251,198.541009 C221.979264,217.264422 205.875157,232.728956 185.709184,242.883196 C151.999957,259.857276 104.889984,260.321489 74.033024,243.978022 C39.6684361,225.777276 13.2466761,199.798822 3.41456926,154.746662 C-0.520150741,136.717436 -0.972417408,113.421862 4.50939593,93.4346624 C5.79579605,88.7460224 8.13350272,83.8116224 9.98395605,79.2014891 C18.8765427,57.0472491 34.0125427,37.7823945 52.6834773,24.4580211 C60.185984,19.1042078 69.2876373,13.7794078 77.3179307,10.2248478 C87.3096107,5.80244779 104.132224,1.3966877 118.922624,0.37140771 L118.922624,0.37140771 Z M99.762304,9.67786112 C78.753664,15.1246878 63.3497173,24.8829811 49.9464107,35.4071411 C30.6188361,50.5828224 18.2975561,71.7604224 11.0787827,97.2665557 C3.04763593,125.643302 8.20646272,159.982289 19.2904094,181.570769 C30.7843827,203.958822 46.217344,221.337382 68.0114773,233.576742 C89.2146773,245.484156 119.036971,253.130022 150.126464,247.262502 C177.748864,242.049489 198.727637,230.016209 215.818197,212.226769 C238.684117,188.425169 257.061931,144.585596 244.832384,98.3613824 C241.563264,86.0072491 237.289344,73.1313024 230.598784,62.2308224 C226.984064,56.3419691 221.679744,50.5486891 216.365611,44.7131691 C196.309717,22.6882078 163.894571,3.70879437 122.207104,6.39295445 C114.273664,6.90367445 107.301504,7.72287445 99.762304,9.67786112 L99.762304,9.67786112 Z" fill="#000000">
</path>
		<g transform="translate(7.680000, 9.386667)" fill="#FFFFFF">
			<g transform="translate(0.000000, 2.986667)">
				<path d="M127.896362,234.025436 L239.741909,122.182449 L239.138518,121.579044 L127.292971,233.422031 L127.896362,234.025436 L127.896362,234.025436 Z">
</path>
				<path d="M118.118869,225.167835 L230.452096,112.836742 L229.848704,112.233338 L117.515477,224.564432 L118.118869,225.167835 L118.118869,225.167835 Z">
</path>
				<path d="M108.34095,216.311515 L221.16271,103.491461 L220.559317,102.888059 L107.737557,215.708112 L108.34095,216.311515 L108.34095,216.311515 Z">
</path>
				<path d="M98.5630294,207.453915 L211.872896,94.1461817 L211.269504,93.5427783 L97.9596373,206.850512 L98.5630294,207.453915 L98.5630294,207.453915 Z">
</path>
				<path d="M88.7855366,198.596741 L202.58351,84.8004745 L201.980117,84.1970722 L88.1821434,197.993339 L88.7855366,198.596741 L88.7855366,198.596741 Z">
</path>
				<path d="M79.00762,189.741698 L193.293273,75.4551911 L192.689873,74.8517956 L78.40422,189.138302 L79.00762,189.741698 L79.00762,189.741698 Z">
</path>
				<path d="M69.2296967,180.882394 L184.003883,66.1099145 L183.40049,65.5065122 L68.6263033,180.278992 L69.2296967,180.882394 L69.2296967,180.882394 Z">
</path>
				<path d="M59.4517778,172.02522 L174.713644,56.7642067 L174.110249,56.1608067 L58.8483822,171.42182 L59.4517778,172.02522 L59.4517778,172.02522 Z">
</path>
				<path d="M49.6738606,163.168044 L165.421701,47.4189239 L164.818299,46.8155294 L49.0704594,162.564649 L49.6738606,163.168044 L49.6738606,163.168044 Z">
</path>
				<path d="M39.8963639,154.310447 L156.134444,38.0736472 L155.531049,37.4702461 L39.2929694,153.707046 L39.8963639,154.310447 L39.8963639,154.310447 Z">
</path>
				<path d="M30.1184445,145.4537 L146.844631,28.7283667 L146.241236,28.1249667 L29.5150489,144.8503 L30.1184445,145.4537 L30.1184445,145.4537 Z">
</path>
				<path d="M20.3405245,136.596527 L137.555244,19.38266 L136.951849,18.77926 L19.7371289,135.993127 L20.3405245,136.596527 L20.3405245,136.596527 Z">
</path>
				<path d="M10.5626039,127.738927 L128.265431,10.0373805 L127.662036,9.43397947 L9.95920941,127.135526 L10.5626039,127.738927 L10.5626039,127.738927 Z">
</path>
				<path d="M0.784683926,118.881754 L118.975617,0.692100527 L118.372223,0.088699473 L0.181289407,118.278353 L0.784683926,118.881754 L0.784683926,118.881754 Z">
</path>
			</g>
			<g>
				<path d="M0.14330767,122.999079 L114.223734,237.084625 L114.827146,236.481241 L0.746718997,122.395695 L0.14330767,122.999079 L0.14330767,122.999079 Z">
</path>
				<path d="M9.39472045,113.615398 L123.697014,227.923238 L124.300426,227.319855 L9.99813288,113.012015 L9.39472045,113.615398 L9.39472045,113.615398 Z">
</path>
				<path d="M18.6461344,104.231719 L133.170294,218.760999 L133.773706,218.157615 L19.2495456,103.628335 L18.6461344,104.231719 L18.6461344,104.231719 Z">
</path>
				<path d="M27.8975477,94.8480388 L142.644001,209.599612 L143.247412,208.996228 L28.500959,94.2446545 L27.8975477,94.8480388 L27.8975477,94.8480388 Z">
</path>
				<path d="M37.1485349,85.4643594 L152.116855,200.437373 L152.720265,199.833987 L37.7519451,84.8609739 L37.1485349,85.4643594 L37.1485349,85.4643594 Z">
</path>
				<path d="M46.3999494,76.0806805 L161.590989,191.275561 L162.194397,190.672173 L47.0033573,75.4772928 L46.3999494,76.0806805 L46.3999494,76.0806805 Z">
</path>
				<path d="M55.6513628,66.6970005 L171.064269,182.113747 L171.667677,181.510359 L56.2547706,66.0936128 L55.6513628,66.6970005 L55.6513628,66.6970005 Z">
</path>
				<path d="M64.9023505,57.3133217 L180.537551,172.951508 L181.140956,172.348118 L65.5057561,56.7099317 L64.9023505,57.3133217 L64.9023505,57.3133217 Z">
</path>
				<path d="M74.1537644,47.9296422 L190.011258,163.789696 L190.614662,163.186304 L74.7571689,47.3262511 L74.1537644,47.9296422 L74.1537644,47.9296422 Z">
</path>
				<path d="M83.4051783,38.5459628 L199.484112,154.627029 L200.087515,154.023637 L84.0085817,37.9425705 L83.4051783,38.5459628 L83.4051783,38.5459628 Z">
</path>
				<path d="M92.6565911,29.1622822 L208.957818,145.466069 L209.561222,144.862678 L93.2599955,28.5588911 L92.6565911,29.1622822 L92.6565911,29.1622822 Z">
</path>
				<path d="M101.907579,19.7786034 L218.431099,136.30383 L219.034501,135.700437 L102.510981,19.17521 L101.907579,19.7786034 L101.907579,19.7786034 Z">
</path>
				<path d="M111.158992,10.39535 L227.904379,127.142443 L228.507781,126.53905 L111.762394,9.79195665 L111.158992,10.39535 L111.158992,10.39535 Z">
</path>
				<path d="M120.410833,1.01167058 L237.378086,117.980204 L237.981487,117.376809 L121.014234,0.408276091 L120.410833,1.01167058 L120.410833,1.01167058 Z">
</path>
			</g>
		</g>
		<path d="M209.796224,45.2605824 C199.729877,35.1942345 187.353984,26.1233011 172.570837,20.6261278 C157.247531,14.9279945 139.913771,10.1250078 119.470037,11.8670878 C86.9042773,14.6429811 64.0392107,29.2541811 46.661504,46.3554091 C34.4895561,58.3332224 25.3337161,73.0109824 19.2899827,90.1497557 C10.4161694,115.314982 10.9546227,145.018236 20.9322227,170.622076 C29.4429427,192.461862 43.3727573,210.077222 63.0843307,223.722876 C81.6148907,236.551462 108.210731,246.500902 138.082091,243.978022 C174.464811,240.905169 201.085397,222.239356 218.554411,200.731089 C223.024171,195.228796 227.468331,189.009276 230.050091,181.571196 C232.579797,176.211836 233.817984,172.568529 234.977237,170.622502 C239.829291,159.750182 242.399957,148.278822 243.188437,135.587196 C245.614037,96.5506091 230.594517,66.0593024 209.796224,45.2605824 L209.796224,45.2605824 Z M199.073664,164.193062 C199.004117,164.341542 198.941824,164.479782 198.869291,164.632956 C197.064491,169.797756 193.955371,174.116476 190.830464,177.937702 C178.613291,192.872742 159.998251,205.834022 134.555264,207.968209 C113.665237,209.719249 95.0664107,202.811089 82.1081173,193.903142 C70.8475307,186.162129 62.287744,176.580049 56.2853973,165.064316 C55.9193173,164.371409 52.4334507,156.340262 52.4232107,155.986982 C47.6680107,141.237542 47.255424,117.520849 52.136064,103.288529 C55.3932373,93.7896491 60.8217173,83.5121024 68.0114773,75.3695957 C77.938304,64.1265024 87.872384,56.9222357 103.594624,51.8299691 C110.773291,49.5046357 117.199744,47.1379157 126.038997,46.9032491 C147.594197,46.3293824 169.544064,56.0074624 181.329451,66.6105557 C192.159957,76.3543424 204.503424,95.3346091 207.606571,113.141969 C210.800171,131.470289 207.391957,149.365116 199.073664,164.193062 L199.073664,164.193062 Z" fill="#000000">
</path>
		<g transform="translate(83.626667, 76.373333)">
			<path d="M77.9810133,105.400747 C72.67328,105.400747 68.01536,102.039467 66.38976,97.0363733 L60.4778667,79.02336 L30.9034667,79.02336 L25.41056,96.8721067 C23.7525333,101.97248 19.0592,105.386667 13.72416,105.386667 C12.4433067,105.386667 11.1709867,105.184 9.94261333,104.785493 C3.56565333,102.87104 -0.0546133333,96.0072533 1.89909333,89.49376 L26.8616533,10.4226133 C28.48256,5.39264 33.2544,1.88416 38.4669867,1.88416 L51.7405867,1.88416 C56.9826133,1.88416 61.7540267,5.33290667 63.34336,10.2711467 L89.5957333,89.3128533 C91.6949333,95.7751467 88.21888,102.71232 81.8513067,104.785067 C80.5922133,105.193813 79.2904533,105.400747 77.9810133,105.400747 L77.9810133,105.400747 L77.9810133,105.400747 Z" fill="#FFFFFF">
</path>
			<path d="M77.9810133,103.69408 C73.2261841,103.69408 69.0608465,100.688308 67.6071126,96.2141657 L61.6940408,78.1975435 L61.4049446,77.3166933 L60.4778667,77.3166933 L30.9034667,77.3166933 L29.958141,77.3166933 L29.6800885,78.2202018 L24.1871818,96.0689485 C22.7072691,100.620899 18.5067226,103.68 13.72416,103.68 C12.5787502,103.68 11.4396612,103.498823 10.3376028,103.141295 C4.61174908,101.421988 1.37421306,95.2722447 3.12512866,89.4348397 L28.0822714,10.3812927 C29.5308212,5.88624847 33.8113885,2.73749333 38.4669867,2.73749333 L51.7405867,2.73749333 C56.4288544,2.73749333 60.7065138,5.82950865 62.1249103,10.2366284 L88.3809821,89.2896459 C90.2599306,95.0739946 87.1485772,101.287946 81.4551086,103.141261 C80.3246516,103.508247 79.1562581,103.69408 77.9810133,103.69408 L77.9810133,103.69408 Z M77.9810133,106.25408 C79.4253475,106.25408 80.8604464,106.025828 82.2465357,105.575854 C89.2922648,103.282357 93.1289211,95.6198406 90.8131148,88.4907346 L64.5581113,9.4410208 C62.8016101,3.98319054 57.536605,0.177493333 51.7405867,0.177493333 L38.4669867,0.177493333 C32.6951659,0.177493333 27.4336011,4.04786331 25.6433485,9.60334848 L0.678475274,88.6817473 C-1.48096359,95.8806734 2.51145487,103.464326 9.57456724,105.584772 C10.9041173,106.016429 12.3097398,106.24 13.72416,106.24 C19.6168848,106.24 24.7994128,102.465759 26.6278552,96.8411577 L32.1268448,78.9731849 L30.9034667,79.8766933 L60.4778667,79.8766933 L59.2616926,78.9958432 L65.1735859,97.0088565 C66.9698962,102.537361 72.1204498,106.25408 77.9810133,106.25408 L77.9810133,106.25408 Z" fill="#000000">
</path>
		</g>
		<g transform="translate(61.440000, 19.200000)" fill="#FFFFFF">
			<path d="M2.13376,33.8577067 L2.10261333,33.8154667 C-1.01034667,29.5492267 -0.0968533333,23.5810133 4.48768,20.2350933 C9.07221333,16.8896 14.9614933,17.8286933 18.0744533,22.0945067 L18.1056,22.1367467 C21.21856,26.4029867 20.3050667,32.3716267 15.7205333,35.71712 C11.136,39.0626133 5.24672,38.1239467 2.13376,33.8577067 L2.13376,33.8577067 Z M13.93408,25.2462933 L13.9029333,25.2040533 C12.3387733,23.06048 9.42634667,22.3232 7.15562667,23.9803733 C4.90581333,25.6221867 4.73088,28.5469867 6.29504,30.6909867 L6.32618667,30.7332267 C7.89077333,32.8768 10.8027733,33.61408 13.0525867,31.9722667 C15.3237333,30.3150933 15.4986667,27.3902933 13.93408,25.2462933 L13.93408,25.2462933 Z">
</path>
			<path d="M32.1467733,5.89525333 L36.8251733,4.39424 L49.94048,19.6407467 L44.7364267,21.3102933 L42.4571733,18.5924267 L35.70176,20.7598933 L35.4542933,24.2888533 L30.3505067,25.9264 L32.1467733,5.89525333 L32.1467733,5.89525333 Z M39.84384,15.264 L36.2948267,10.9111467 L35.91552,16.5243733 L39.84384,15.264 L39.84384,15.264 Z">
</path>
			<path d="M58.3658667,10.48192 L58.4068267,0.155306667 L63.5831467,0.175786667 L63.5426133,10.39744 C63.5319467,13.0513067 64.8669867,14.3176533 66.9166933,14.3261867 C68.9664,14.3342933 70.3112533,13.1310933 70.3210667,10.55616 L70.3624533,0.20352 L75.5387733,0.224 L75.49824,10.4192 C75.4747733,16.3575467 72.0750933,18.9457067 66.8458667,18.9248 C61.6170667,18.9034667 58.3432533,16.2363733 58.3658667,10.48192 L58.3658667,10.48192 Z">
</path>
			<path d="M94.2331733,8.67754667 L88.95616,7.06688 L90.2600533,2.79466667 L105.6896,7.50378667 L104.385707,11.776 L99.1086933,10.16576 L95.04384,23.4845867 L90.1687467,21.9968 L94.2331733,8.67754667 L94.2331733,8.67754667 Z">
</path>
			<path d="M119.471787,13.4651733 L123.715413,16.28928 L119.901867,22.0202667 L125.348693,25.6452267 L129.162667,19.9138133 L133.406293,22.73792 L123.216213,38.05056 L118.97216,35.2264533 L122.844587,29.4075733 L117.397333,25.7826133 L113.525333,31.6014933 L109.281707,28.7773867 L119.471787,13.4651733 L119.471787,13.4651733 Z">
</path>
		</g>
		<g transform="translate(65.280000, 196.266667)" fill="#FFFFFF">
			<path d="M130.622293,3.79008 L130.65472,3.83146667 C133.92896,7.97568 133.243733,13.9754667 128.790187,17.49376 C124.33664,21.0120533 118.41536,20.2986667 115.14112,16.1544533 L115.108693,16.1130667 C111.834453,11.9684267 112.520107,5.96906667 116.973227,2.45077333 C121.426773,-1.06709333 127.348053,-0.354133333 130.622293,3.79008 L130.622293,3.79008 Z M119.158187,12.8469333 L119.190613,12.88832 C120.83584,14.97088 123.774293,15.5963733 125.980587,13.85344 C128.165973,12.12672 128.229547,9.19722667 126.583893,7.11466667 L126.551467,7.07328 C124.906667,4.99072 121.967787,4.36522667 119.7824,6.09194667 C117.576107,7.83488 117.51296,10.7643733 119.158187,12.8469333 L119.158187,12.8469333 Z">
</path>
			<path d="M101.84832,32.9309867 L97.24032,34.6363733 L83.4666667,19.98208 L88.5922133,18.0846933 L90.9892267,20.70016 L97.6426667,18.23744 L97.7344,14.7012267 L102.761387,12.8405333 L101.84832,32.9309867 L101.84832,32.9309867 Z M93.7463467,23.9104 L97.48352,28.1024 L97.61536,22.47808 L93.7463467,23.9104 L93.7463467,23.9104 Z">
</path>
			<path d="M75.4722133,29.4336 L75.9274667,39.7499733 L70.7562667,39.97824 L70.30528,29.7668267 C70.1883733,27.11552 68.7940267,25.91488 66.7464533,26.0053333 C64.69888,26.0957867 63.4133333,27.36256 63.5268267,29.9349333 L63.98336,40.2773333 L58.81216,40.5056 L58.3624533,30.32064 C58.10048,24.3882667 61.37216,21.63968 66.59584,21.40928 C71.8199467,21.1784533 75.2183467,23.6846933 75.4722133,29.4336 L75.4722133,29.4336 Z">
</path>
			<path d="M39.5396267,32.8068267 L44.8674133,34.24512 L43.70304,38.5578667 L28.1250133,34.3530667 L29.2893867,30.0398933 L34.6171733,31.4781867 L38.2468267,18.03136 L43.1688533,19.36 L39.5396267,32.8068267 L39.5396267,32.8068267 Z">
</path>
			<path d="M14.3573333,29.0594133 L9.98442667,26.4388267 L13.5236267,20.5333333 L7.91168,17.1694933 L4.37248,23.0749867 L0,20.4544 L9.45664,4.67669333 L13.82912,7.29770667 L10.2357333,13.2932267 L15.8481067,16.6570667 L19.4414933,10.6615467 L23.8139733,13.28256 L14.3573333,29.0594133 L14.3573333,29.0594133 Z">
</path>
		</g>
	</g>
</svg>`;
        default:
          return "";
      }
    };
  }
});

// src/utils/openapi.ts
var import_openapi_parser, validateOpenApiContent, getServerUrlFromOpenApi;
var init_openapi = __esm({
  "src/utils/openapi.ts"() {
    "use strict";
    import_openapi_parser = require("@readme/openapi-parser");
    validateOpenApiContent = async (content) => {
      if (!content || typeof content !== "object") {
        return {
          error: "invalid_openapi",
          errorDescription: "OpenAPI content is empty"
        };
      }
      if (!("info" in content) || !content.info || typeof content.info !== "object" || !("title" in content.info)) {
        return {
          error: "invalid_openapi",
          errorDescription: "OpenAPI info section is required and must include a title"
        };
      }
      if ("servers" in content) {
        if (!Array.isArray(content.servers)) {
          return {
            error: "invalid_openapi",
            errorDescription: "Servers must be an array in the OpenAPI specification"
          };
        }
        const hasValidServer = content.servers.some(
          (server) => server && typeof server === "object" && "url" in server && typeof server.url === "string"
        );
        if (!hasValidServer) {
          return {
            error: "invalid_openapi",
            errorDescription: "At least one server must have a valid URL in the OpenAPI specification"
          };
        }
      }
      try {
        const result = await (0, import_openapi_parser.validate)(content);
        if (result.valid === true) {
          return null;
        }
        return {
          error: "invalid_openapi",
          errorDescription: (0, import_openapi_parser.compileErrors)(result)
        };
      } catch (error) {
        return {
          error: "invalid_openapi",
          errorDescription: error instanceof Error ? error.message : "Invalid OpenAPI specification"
        };
      }
    };
    getServerUrlFromOpenApi = (openApiContent) => {
      if (!openApiContent.servers?.length) {
        return "";
      }
      const firstServer = openApiContent.servers[0];
      if (!firstServer?.url || typeof firstServer.url !== "string") {
        return "";
      }
      return firstServer.url;
    };
  }
});

// src/utils/tools.ts
var import_snakeCase, TOOL_NAME_MAX_LENGTH, getToolName;
var init_tools = __esm({
  "src/utils/tools.ts"() {
    "use strict";
    import_snakeCase = __toESM(require("lodash/snakeCase.js"), 1);
    TOOL_NAME_MAX_LENGTH = process.env.TOOL_NAME_MAX_LENGTH ? parseInt(process.env.TOOL_NAME_MAX_LENGTH) : 60;
    getToolName = (operation, method, path) => {
      if (operation.operationId) {
        return (0, import_snakeCase.default)(operation.operationId);
      }
      if (operation.summary) {
        return (0, import_snakeCase.default)(operation.summary);
      }
      return (0, import_snakeCase.default)(`${method}_${path}`).slice(0, TOOL_NAME_MAX_LENGTH);
    };
  }
});

// src/services/servers.service.ts
var servers_service_exports = {};
__export(servers_service_exports, {
  createExampleTodosServer: () => createExampleTodosServer,
  createServer: () => createServer,
  createServerFromOpenApiSpec: () => createServerFromOpenApiSpec,
  createTool: () => createTool,
  createToolsFromOpenApiSpec: () => createToolsFromOpenApiSpec,
  deleteServerById: () => deleteServerById,
  deleteToolById: () => deleteToolById,
  getServerById: () => getServerById,
  getServerSlim: () => getServerSlim,
  getServersForTenant: () => getServersForTenant,
  getToolById: () => getToolById,
  getToolsForServer: () => getToolsForServer,
  updateServerById: () => updateServerById,
  updateToolById: () => updateToolById
});
async function createAuthProviderFromOpenApi(tx, serverName, openApiContent, tenantId) {
  const providers = [];
  for (const [name, oauthScheme] of Object.entries(openApiContent?.components?.securitySchemes || {})) {
    if ("type" in oauthScheme && oauthScheme.type === "oauth2") {
      if (!oauthScheme.flows?.authorizationCode?.authorizationUrl || !oauthScheme.flows?.authorizationCode?.tokenUrl) {
        throw new Error("Missing required OAuth URLs in security scheme");
      }
      providers.push({
        specName: name,
        provider: await tx.oAuthProvider.create({
          data: {
            name: serverName + " OAuth",
            clientId: "",
            clientSecret: "",
            authorizationUrl: oauthScheme.flows.authorizationCode.authorizationUrl,
            tokenUrl: oauthScheme.flows.authorizationCode.tokenUrl,
            scopes: oauthScheme.flows.authorizationCode.scopes ? Object.keys(oauthScheme.flows.authorizationCode.scopes) : [],
            tenantId,
            svg: getIcon("oauthGeneric"),
            refreshUrl: oauthScheme.flows.authorizationCode.refreshUrl
          }
        })
      });
    }
  }
  for (const [name, apiKeyScheme] of Object.entries(openApiContent?.components?.securitySchemes || {})) {
    if ("type" in apiKeyScheme && apiKeyScheme.type === "apiKey") {
      providers.push({
        specName: name,
        provider: await tx.apiKeyProvider.create({
          data: {
            value: serverName + " API Key",
            keyName: apiKeyScheme.name,
            keyIn: apiKeyScheme.in,
            tenantId
          }
        })
      });
    }
  }
  return providers;
}
async function createServer(db, tenantId, server) {
  return await db.mcpServer.create({
    data: { ...server, tenantId }
  });
}
async function getServersForTenant(db, tenantId) {
  const servers = await db.mcpServer.findMany({
    where: {
      tenantId
    },
    include: {
      _count: {
        select: {
          tools: true
        }
      }
    },
    orderBy: [
      {
        name: "asc"
      },
      {
        id: "asc"
      }
    ]
  });
  return {
    data: servers.map(mapServer),
    pagination: {
      currentPage: 1,
      itemsPerPage: DEFAULT_PAGE_SIZE,
      totalItems: servers.length,
      totalPages: Math.ceil(servers.length / DEFAULT_PAGE_SIZE)
    }
  };
}
async function getServerById(db, tenantId, serverId) {
  const server = await db.mcpServer.findUnique({
    where: {
      id: serverId,
      tenantId
    },
    include: {
      authConfig: {
        include: {
          jwtProvider: true
        }
      }
    }
  });
  return server ? mapServerWithAuth(server) : null;
}
async function updateServerById(db, tenantId, serverId, updateData) {
  return mapServer(
    await db.mcpServer.update({
      where: {
        id: serverId,
        tenantId
      },
      data: updateData
    })
  );
}
async function deleteServerById(db, tenantId, serverId) {
  return mapServer(
    await db.mcpServer.delete({
      where: {
        id: serverId,
        tenantId
      }
    })
  );
}
async function getServerSlim(db, tenantId, serverId) {
  return await db.mcpServer.findUnique({
    where: {
      id: serverId,
      tenantId
    },
    select: {
      id: true,
      tenantId: true
    }
  });
}
async function createToolsFromOpenApiSpec(db, tenantId, serverId, openApiContent, selectedTools) {
  return await db.$transaction(async (tx) => {
    const foldersByName = {};
    const createdTools = [];
    const existingFolders = await tx.folder.findMany({
      where: { serverId, tenantId }
    });
    existingFolders.forEach((folder) => {
      foldersByName[folder.name] = folder;
    });
    const providers = await createAuthProviderFromOpenApi(tx, `Server ${serverId}`, openApiContent, tenantId);
    const oauthProvidersByName = (0, import_groupBy.default)(
      providers.filter((p) => "authorizationUrl" in p.provider),
      "specName"
    );
    const apiKeyProvidersByName = (0, import_groupBy.default)(
      providers.filter((p) => "keyIn" in p.provider),
      "specName"
    );
    if (openApiContent.paths) {
      for (const [path, pathItem] of Object.entries(openApiContent.paths)) {
        if (typeof pathItem === "object" && pathItem !== null) {
          for (const [method, operation] of Object.entries(pathItem)) {
            if (typeof operation === "object" && operation !== null && ("operationId" in operation || "responses" in operation)) {
              const parameters = operation.parameters?.reduce(
                (acc, param) => {
                  if (typeof param === "object" && param !== null && "name" in param) {
                    acc[param.name] = param;
                  }
                  return acc;
                },
                {}
              ) || {};
              if (operation.requestBody) {
                const requestBody = operation.requestBody;
                if (typeof requestBody === "object" && "content" in requestBody) {
                  const jsonContent = requestBody.content?.["application/json"];
                  if (jsonContent?.schema) {
                    parameters["body"] = {
                      in: "body",
                      name: "body",
                      schema: jsonContent.schema,
                      required: requestBody.required ?? true
                    };
                  }
                }
              }
              let folderId = null;
              const tags = operation.tags || [];
              if (tags.length > 0) {
                const tag = tags[0];
                if (!foldersByName[tag]) {
                  foldersByName[tag] = await tx.folder.create({
                    data: {
                      name: tag,
                      tenantId,
                      serverId
                    }
                  });
                }
                folderId = foldersByName[tag].id;
              }
              let apiKeyProviderId = null;
              let oAuthProviderId = null;
              const securitySpecNames = operation.security?.flatMap((sec) => Object.keys(sec)) || [];
              for (const security of securitySpecNames) {
                if (apiKeyProvidersByName[security]) {
                  apiKeyProviderId = apiKeyProvidersByName[security][0].provider.id;
                }
                if (oauthProvidersByName[security]) {
                  oAuthProviderId = oauthProvidersByName[security][0].provider.id;
                }
              }
              const toolName = getToolName(operation, method, path);
              const isSelected = selectedTools ? selectedTools.some((selectedTool) => selectedTool.toLowerCase() === toolName.toLowerCase()) : true;
              if (isSelected) {
                const createdTool = await tx.tool.create({
                  data: {
                    name: toolName,
                    description: operation.summary || operation.description || "",
                    enabled: true,
                    parameters,
                    responses: operation.responses || {},
                    method: method.toUpperCase(),
                    url: path,
                    responseFormatting: {},
                    requestParameterOverrides: generateRequestOverridesFromOperation(operation, pathItem),
                    tenantId,
                    serverId,
                    folderId,
                    apiKeyProviderId,
                    oAuthProviderId
                  }
                });
                createdTools.push(mapTool(createdTool));
              }
            }
          }
        }
      }
    }
    return {
      tools: createdTools,
      authProviders: providers.map((p) => p.provider)
    };
  });
}
async function createServerFromOpenApiSpec(db, tenantId, name, description, openApiContent, selectedTools) {
  return await db.$transaction(async (tx) => {
    const foldersByName = {};
    const server = await tx.mcpServer.create({
      data: {
        name: name || openApiContent.info.title,
        description: description || openApiContent.info.description || "",
        enabled: true,
        tenantId,
        baseUrl: getServerUrlFromOpenApi(openApiContent)
      }
    });
    const providers = await createAuthProviderFromOpenApi(tx, server.name, openApiContent, tenantId);
    const oauthProvidersByName = (0, import_groupBy.default)(
      providers.filter((p) => "authorizationUrl" in p.provider),
      "specName"
    );
    const apiKeyProvidersByName = (0, import_groupBy.default)(
      providers.filter((p) => "keyIn" in p.provider),
      "specName"
    );
    if (openApiContent.paths) {
      for (const [path, pathItem] of Object.entries(openApiContent.paths)) {
        if (typeof pathItem === "object" && pathItem !== null) {
          for (const [method, operation] of Object.entries(pathItem)) {
            if (typeof operation === "object" && operation !== null && ("operationId" in operation || "responses" in operation)) {
              const parameters = operation.parameters?.reduce(
                (acc, param) => {
                  if (typeof param === "object" && param !== null && "name" in param) {
                    acc[param.name] = param;
                  }
                  return acc;
                },
                {}
              ) || {};
              if (operation.requestBody) {
                const requestBody = operation.requestBody;
                if (typeof requestBody === "object" && "content" in requestBody) {
                  const jsonContent = requestBody.content?.["application/json"];
                  if (jsonContent?.schema) {
                    parameters["body"] = {
                      in: "body",
                      name: "body",
                      schema: jsonContent.schema,
                      required: requestBody.required ?? true
                    };
                  }
                }
              }
              let folderId = null;
              const tags = operation.tags || [];
              if (tags.length > 0) {
                const tag = tags[0];
                if (!foldersByName[tag]) {
                  foldersByName[tag] = await tx.folder.create({
                    data: {
                      name: tag,
                      tenantId,
                      serverId: server.id
                    }
                  });
                }
                folderId = foldersByName[tag].id;
              }
              let apiKeyProviderId = null;
              let oAuthProviderId = null;
              const securitySpecNames = operation.security?.flatMap((sec) => Object.keys(sec)) || [];
              for (const security of securitySpecNames) {
                if (apiKeyProvidersByName[security]) {
                  apiKeyProviderId = apiKeyProvidersByName[security][0].provider.id;
                }
                if (oauthProvidersByName[security]) {
                  oAuthProviderId = oauthProvidersByName[security][0].provider.id;
                }
              }
              const toolName = getToolName(operation, method, path);
              const isSelected = selectedTools ? selectedTools.some((selectedTool) => selectedTool.toLowerCase() === toolName.toLowerCase()) : true;
              await tx.tool.create({
                data: {
                  name: toolName,
                  description: operation.summary || operation.description || "",
                  enabled: isSelected,
                  parameters,
                  responses: operation.responses || {},
                  method: method.toUpperCase(),
                  url: path,
                  responseFormatting: {},
                  requestParameterOverrides: generateRequestOverridesFromOperation(operation, pathItem),
                  tenantId,
                  serverId: server.id,
                  folderId,
                  apiKeyProviderId,
                  oAuthProviderId
                }
              });
            }
          }
        }
      }
    }
    return {
      ...server,
      oauthProviders: Object.values(oauthProvidersByName).map((providers2) => providers2[0].provider)
    };
  });
}
async function createExampleTodosServer(db, tenantId) {
  try {
    return await createServerFromOpenApiSpec(
      db,
      tenantId,
      "Todos API Example",
      "A sample To-Dos API for testing and learning MCP capabilities",
      TODOS_OPENAPI_SPEC
    );
  } catch (error) {
    console.error("Error in createExampleTodosServer:", error);
    throw error;
  }
}
async function getToolsForServer(db, tenantId, serverId, adminEmail) {
  return (await db.tool.findMany({
    where: {
      serverId,
      tenantId
    },
    include: {
      oAuthProvider: {
        include: {
          providerTokens: {
            where: {
              user: {
                email: adminEmail,
                tenantId
              }
            }
          }
        }
      }
    },
    orderBy: [
      {
        name: "asc"
      },
      {
        id: "asc"
      }
    ]
  })).map((tool2) => mapTool(tool2, (tool2.oAuthProvider?.providerTokens || []).length > 0));
}
async function getToolById(db, tenantId, toolId, adminEmail) {
  const tool2 = await db.tool.findUnique({
    where: {
      id: toolId,
      tenantId
    },
    include: {
      oAuthProvider: {
        include: {
          providerTokens: {
            where: {
              user: {
                email: adminEmail,
                tenantId
              }
            }
          }
        }
      }
    }
  });
  return tool2 ? mapTool(tool2, (tool2.oAuthProvider?.providerTokens || []).length > 0) : null;
}
async function createTool(db, serverId, tenantId, toolData) {
  return await db.$transaction(async (tx) => {
    if (toolData.oAuthProviderId) {
      const provider = await tx.oAuthProvider.findUnique({
        where: { id: toolData.oAuthProviderId, tenantId }
      });
      if (!provider) {
        throw new Error(`OAuth provider with ID ${toolData.oAuthProviderId} not found`);
      }
    }
    if (toolData.apiKeyProviderId) {
      const provider = await tx.apiKeyProvider.findUnique({
        where: { id: toolData.apiKeyProviderId, tenantId }
      });
      if (!provider) {
        throw new Error(`API Key provider with ID ${toolData.apiKeyProviderId} not found`);
      }
    }
    const server = await tx.mcpServer.findUnique({
      where: { id: serverId },
      select: { authType: true }
    });
    let requestParameterOverrides = toolData.requestParameterOverrides || {};
    if (server?.authType === "JWT" /* JWT */) {
      requestParameterOverrides = {
        ...requestParameterOverrides,
        Authorization: {
          value: "Bearer {{toolParams.jwt}}",
          location: "header" /* HEADER */
        }
      };
    }
    return await tx.tool.create({
      data: {
        name: (0, import_snakeCase2.default)(toolData.name).slice(0, TOOL_NAME_MAX_LENGTH),
        description: toolData.description,
        folderId: toolData.folderId,
        parameters: toolData.parameters || {},
        method: toolData.method || "GET",
        url: toolData.url || "",
        oAuthProviderId: toolData.oAuthProviderId,
        apiKeyProviderId: toolData.apiKeyProviderId,
        responseFormatting: toolData.responseFormatting || {},
        requestParameterOverrides: requestParameterOverrides || null,
        tenantId,
        serverId
      }
    });
  });
}
async function updateToolById(db, tenantId, toolId, updateData) {
  const { requestParameterOverrides, responseFormatting, parameters, responses, ...rest } = updateData;
  const jsonFields = {};
  if (requestParameterOverrides !== null && requestParameterOverrides !== void 0) {
    jsonFields.requestParameterOverrides = requestParameterOverrides;
  }
  if (responseFormatting !== null && responseFormatting !== void 0) {
    jsonFields.responseFormatting = responseFormatting;
  }
  if (parameters !== null && parameters !== void 0) {
    jsonFields.parameters = parameters;
  }
  if (responses !== null && responses !== void 0) {
    jsonFields.responses = responses;
  }
  return mapTool(
    await db.tool.update({
      where: {
        id: toolId,
        tenantId
      },
      data: {
        ...(0, import_omit2.default)(rest, ["folderId", "providerId"]),
        ...jsonFields,
        ...updateData.name ? { name: (0, import_snakeCase2.default)(updateData.name).slice(0, TOOL_NAME_MAX_LENGTH) } : {},
        ..."folderId" in updateData ? updateData.folderId ? {
          folder: {
            connect: {
              id: updateData.folderId
            }
          }
        } : {
          folder: {
            disconnect: true
          }
        } : {},
        ...updateData.providerId ? {
          oAuthProvider: {
            connect: {
              id: updateData.providerId
            }
          }
        } : {
          oAuthProvider: {
            disconnect: true
          }
        }
      }
    })
  );
}
async function deleteToolById(db, tenantId, toolId) {
  return await db.tool.delete({
    where: {
      id: toolId,
      tenantId
    }
  });
}
var import_groupBy, import_omit2, import_snakeCase2, mapServer, mapServerWithAuth, mapTool, TODOS_OPENAPI_SPEC;
var init_servers_service = __esm({
  "src/services/servers.service.ts"() {
    "use strict";
    import_groupBy = __toESM(require("lodash/groupBy.js"), 1);
    import_omit2 = __toESM(require("lodash/omit.js"), 1);
    import_snakeCase2 = __toESM(require("lodash/snakeCase.js"), 1);
    init_config();
    init_generateRequestOverrides();
    init_icons();
    init_openapi();
    init_tools();
    mapServer = (server) => ({
      ...server,
      description: server.description || void 0,
      toolCount: server._count?.tools,
      authType: server.authType,
      authConfigId: server.authConfigId || void 0,
      createdAt: server.createdAt.toISOString(),
      updatedAt: server.updatedAt.toISOString()
    });
    mapServerWithAuth = (server) => ({
      ...mapServer(server),
      authConfig: server.authConfig ? {
        id: server.authConfig.id,
        serverId: server.authConfig.serverId,
        authType: server.authConfig.authType,
        createdAt: server.authConfig.createdAt.toISOString(),
        updatedAt: server.authConfig.updatedAt.toISOString(),
        jwtProvider: server.authConfig.jwtProvider ? {
          id: server.authConfig.jwtProvider.id,
          name: server.authConfig.jwtProvider.name,
          jwksUrl: server.authConfig.jwtProvider.jwksUrl,
          enabled: server.authConfig.jwtProvider.enabled
        } : void 0
      } : void 0
    });
    mapTool = (tool2, adminAuthorized = false) => ({
      ...tool2,
      folderId: tool2.folderId || void 0,
      parameters: tool2.parameters || {},
      method: tool2.method,
      oAuthProviderId: tool2.oAuthProviderId || void 0,
      apiKeyProviderId: tool2.apiKeyProviderId || void 0,
      responseFormatting: tool2.responseFormatting,
      requestParameterOverrides: tool2.requestParameterOverrides,
      responses: tool2.responses,
      adminAuthorized,
      enabled: tool2.enabled,
      createdAt: tool2.createdAt.toISOString(),
      updatedAt: tool2.updatedAt.toISOString()
    });
    TODOS_OPENAPI_SPEC = {
      openapi: "3.0.0",
      info: {
        title: "Todos API",
        description: "A REST API for testing and prototyping applications that need to interact with a TODO list.",
        version: "1.0.0",
        contact: {
          name: "Todos API",
          url: "https://jsonplaceholder.typicode.com"
        }
      },
      servers: [
        {
          url: "https://jsonplaceholder.typicode.com",
          description: "JSONPlaceholder API Server"
        }
      ],
      tags: [
        {
          name: "todos",
          description: "Operations related to todo items"
        }
      ],
      paths: {
        "/todos": {
          get: {
            operationId: "get-all-todos",
            tags: ["todos"],
            summary: "Get all todos",
            description: "Returns a list of all todo items",
            parameters: [
              {
                name: "userId",
                in: "query",
                description: "Filter todos by user ID",
                required: false,
                schema: {
                  type: "integer",
                  format: "int64"
                }
              }
            ],
            responses: {
              "200": {
                description: "A list of todo items",
                content: {
                  "application/json": {
                    schema: {
                      type: "array",
                      items: {
                        $ref: "#/components/schemas/Todo"
                      }
                    }
                  }
                }
              }
            }
          },
          post: {
            operationId: "create-a-new-todo",
            tags: ["todos"],
            summary: "Create a new todo",
            description: "Creates a new todo item",
            requestBody: {
              description: "Todo item to create",
              required: true,
              content: {
                "application/json": {
                  schema: {
                    $ref: "#/components/schemas/TodoInput"
                  }
                }
              }
            },
            responses: {
              "201": {
                description: "Todo created successfully",
                content: {
                  "application/json": {
                    schema: {
                      $ref: "#/components/schemas/Todo"
                    }
                  }
                }
              }
            }
          }
        },
        "/todos/{id}": {
          get: {
            operationId: "get-a-todo",
            tags: ["todos"],
            summary: "Get a todo by ID",
            description: "Returns a single todo by ID",
            parameters: [
              {
                name: "id",
                in: "path",
                description: "ID of the todo to retrieve",
                required: true,
                schema: {
                  type: "integer",
                  format: "int64"
                }
              }
            ],
            responses: {
              "200": {
                description: "Todo found",
                content: {
                  "application/json": {
                    schema: {
                      $ref: "#/components/schemas/Todo"
                    }
                  }
                }
              }
            }
          },
          put: {
            operationId: "update-a-todo",
            tags: ["todos"],
            summary: "Update a todo completely",
            description: "Replaces all properties of a todo item",
            parameters: [
              {
                name: "id",
                in: "path",
                description: "ID of the todo to update",
                required: true,
                schema: {
                  type: "integer",
                  format: "int64"
                }
              }
            ],
            requestBody: {
              description: "Updated todo object",
              required: true,
              content: {
                "application/json": {
                  schema: {
                    $ref: "#/components/schemas/TodoUpdate"
                  }
                }
              }
            },
            responses: {
              "200": {
                description: "Todo updated successfully",
                content: {
                  "application/json": {
                    schema: {
                      $ref: "#/components/schemas/Todo"
                    }
                  }
                }
              }
            }
          },
          delete: {
            operationId: "delete-a-todo",
            tags: ["todos"],
            summary: "Delete a todo",
            description: "Deletes a todo item",
            parameters: [
              {
                name: "id",
                in: "path",
                description: "ID of the todo to delete",
                required: true,
                schema: {
                  type: "integer",
                  format: "int64"
                }
              }
            ],
            responses: {
              "200": {
                description: "Todo deleted successfully"
              }
            }
          }
        }
      },
      components: {
        schemas: {
          Todo: {
            type: "object",
            required: ["id", "userId", "title", "completed"],
            properties: {
              id: {
                type: "integer",
                format: "int64",
                description: "Unique identifier for the todo",
                example: 1
              },
              userId: {
                type: "integer",
                format: "int64",
                description: "ID of the user who owns this todo",
                example: 1
              },
              title: {
                type: "string",
                description: "Task description",
                example: "Complete project documentation"
              },
              completed: {
                type: "boolean",
                description: "Whether the task is completed",
                example: false
              }
            }
          },
          TodoInput: {
            type: "object",
            required: ["userId", "title"],
            properties: {
              userId: {
                type: "integer",
                format: "int64",
                description: "ID of the user who owns this todo",
                example: 1
              },
              title: {
                type: "string",
                description: "Task description",
                example: "Write unit tests"
              },
              completed: {
                type: "boolean",
                description: "Whether the task is completed",
                example: false,
                default: false
              }
            }
          },
          TodoUpdate: {
            type: "object",
            required: ["id", "userId", "title", "completed"],
            properties: {
              id: {
                type: "integer",
                format: "int64",
                description: "ID of the todo (must match path parameter)",
                example: 1
              },
              userId: {
                type: "integer",
                format: "int64",
                description: "ID of the user who owns this todo",
                example: 1
              },
              title: {
                type: "string",
                description: "Task description",
                example: "Updated task description"
              },
              completed: {
                type: "boolean",
                description: "Whether the task is completed",
                example: true
              }
            }
          }
        }
      }
    };
  }
});

// src/main.ts
var import_cors = __toESM(require("cors"), 1);
var import_express15 = __toESM(require("express"), 1);
var import_http_status_codes19 = require("http-status-codes");

// src/utils/connection.ts
var import_client = require("@prisma/client");
var import_prisma_field_encryption = require("prisma-field-encryption");
init_logger();
init_secrets_service();

// src/utils/logger-cls.ts
var import_cls_hooked = require("cls-hooked");
var requestLoggerNamespace = (0, import_cls_hooked.createNamespace)("req-logger");
var requestLoggerKey = "logger";
var withRequestLogger = (logger2, action) => {
  requestLoggerNamespace.run(() => {
    requestLoggerNamespace.set(requestLoggerKey, logger2);
    action();
  });
};
var getRequestLogger = () => {
  return requestLoggerNamespace.get(requestLoggerKey);
};

// src/utils/connection.ts
var prisma = new import_client.PrismaClient({
  log: [
    {
      emit: "event",
      level: "query"
    },
    {
      emit: "event",
      level: "error"
    },
    {
      emit: "event",
      level: "info"
    },
    {
      emit: "event",
      level: "warn"
    }
  ]
});
var auditLog = (model, operation, args) => {
  if (!model || !operation.startsWith("create") && !operation.startsWith("update") && !operation.startsWith("delete")) {
    return;
  }
  const id = args["data"]?.["id"];
  const name = args["data"]?.["name"];
  const keys = Object.keys(args["data"] || {});
  getRequestLogger()?.info("DB Audit Log", {
    model,
    operation,
    id,
    name,
    keys
  });
};
prisma.$on("query", (e) => {
  logger_default.debug("Query:", {
    query: e.query,
    duration: e.duration,
    timestamp: e.timestamp
  });
});
prisma.$on("error", (e) => {
  logger_default.error("Database error:", {
    error: e.message,
    timestamp: e.timestamp
  });
});
prisma.$on("warn", (e) => {
  logger_default.warn("Database warning:", {
    warning: e.message,
    timestamp: e.timestamp
  });
});
prisma.$on("info", (e) => {
  logger_default.debug("Database info:", {
    info: e.message,
    timestamp: e.timestamp
  });
});
process.on("SIGINT", async () => {
  await prisma.$disconnect();
  process.exit(0);
});
var disconnectDatabase = async () => {
  try {
    await prisma.$disconnect();
    logger_default.debug("Database connection closed");
  } catch (error) {
    logger_default.error("Error disconnecting from database", error);
  }
};
var connection_default = (async () => {
  const secrets = await getAppSecrets();
  return prisma.$extends(
    (0, import_prisma_field_encryption.fieldEncryptionExtension)({
      encryptionKey: secrets.dbEncryptionKey
    })
  ).$extends({
    name: "auditLog",
    query: {
      $allOperations({ model, operation, args, query }) {
        const res = query(args);
        auditLog(model, operation, args);
        return res;
      }
    }
  });
})();

// src/middlewares/db.middleware.ts
var dbMiddleware = async (req, _res, next) => {
  req.db = await connection_default;
  next();
};

// src/middlewares/error.middleware.ts
var import_http_status_codes = require("http-status-codes");

// src/utils/req-guards.ts
var isAppRequest = (req) => "logger" in req && "db" in req;
var isWithServerIdRequest = (req) => "serverId" in req;
var isAdminRequest = (req) => "admin" in req;
var TypeGuardError = class extends Error {
  constructor() {
    super("Type guard failed");
  }
};

// src/middlewares/error.middleware.ts
var errorHandler = (err, req, res, next) => {
  if (isAppRequest(req)) {
    req.logger.error("Error", err);
  }
  res.status(import_http_status_codes.StatusCodes.INTERNAL_SERVER_ERROR).json({
    error: err.message
  });
};

// src/middlewares/logger.middleware.ts
var crypto2 = __toESM(require("crypto"), 1);
init_logger();
var loggerMiddleware = (req, res, next) => {
  req.logger = logger_default.child({
    request: {
      id: crypto2.randomUUID(),
      method: req.method,
      path: req.path,
      params: Object.keys(req.params || {}),
      bodyLen: req.headers["content-length"] || null
    }
  });
  withRequestLogger(req.logger, () => {
    next();
  });
};

// src/middlewares/session.middleware.ts
var import_client2 = require("@prisma/client");
var import_http_status_codes3 = require("http-status-codes");
init_cache_service();
init_jwt_service();

// src/services/oauth.service.ts
var import_axios = __toESM(require("axios"), 1);
var import_http_status_codes2 = require("http-status-codes");
var import_omit = __toESM(require("lodash/omit.js"), 1);
var import_qs = __toESM(require("qs"), 1);

// src/types/error.types.ts
var JSONRPC_INTERNAL_ERROR = -32603;
var JSONRPC_METHOD_NOT_ALLOWED = -32e3;
var APP_INSUFFICIENT_PERMISSIONS = -33001;
var APP_INVALID_SERVER = -33003;
var APP_BAD_REQUEST = -33400;
var OAuthError = class extends Error {
  constructor(message, statusCode, errorCode) {
    super(message);
    this.name = "OAuthError";
    this.statusCode = statusCode;
    this.errorCode = errorCode;
  }
};

// src/services/oauth.service.ts
init_config();
var ENDUSER_SCOPE = "enduser";
var TOOL_SCOPE = "tool";
var encodeData = (data) => Buffer.from(JSON.stringify(data)).toString("base64");
var decodeData = (encoded) => JSON.parse(Buffer.from(encoded, "base64").toString());
var oauthAuthHeader = (provider) => "Basic " + Buffer.from(`${provider.clientId}:${provider.clientSecret}`).toString("base64");
var getHostUrl = (req, useServerHost) => {
  if (useServerHost) {
    const protocol = isLocalRun ? req.get("X-Forwarded-Proto") || req.protocol : "https";
    const host = `${protocol}://${req.get("host")}`;
    return host.endsWith("/") ? host.slice(0, -1) : host;
  }
  return process.env.CONSOLE_URL;
};
var callbackUrl = (req) => `${getHostUrl(req, isLocalRun)}/api/oauth/callback`;
var exchangeCodeForToken = async (logger2, provider, code, callbackUrl2) => {
  logger2.debug(`Exchanging auth code for token with provider: ${provider.name} (${provider.id})`);
  logger2.debug(`Using callback URL: ${callbackUrl2}`);
  const tokenRequestData = {
    redirect_uri: callbackUrl2,
    code,
    grant_type: "authorization_code"
  };
  const refreshUrl = provider.refreshUrl || provider.tokenUrl;
  logger2.debug(`Making token request to: ${refreshUrl}`);
  const contentType = provider.contentType || "application/json";
  try {
    const tokenResponse = await import_axios.default.post(
      provider.refreshUrl || provider.tokenUrl,
      contentType.includes("form") ? import_qs.default.stringify(tokenRequestData) : tokenRequestData,
      {
        headers: {
          "Content-Type": contentType,
          Authorization: oauthAuthHeader(provider)
        }
      }
    );
    logger2.debug(
      `Token exchange successful, received access_token: ${tokenResponse.data.access_token ? "\u2713" : "\u2717"}, refresh_token: ${tokenResponse.data.refresh_token ? "\u2713" : "\u2717"}`
    );
    return {
      accessToken: tokenResponse.data.access_token,
      refreshToken: tokenResponse.data.refresh_token,
      expiresIn: tokenResponse.data.expires_in || 3600,
      scope: tokenResponse.data.scope
    };
  } catch (error) {
    const errorMessage = import_axios.default.isAxiosError(error) && error.response ? `${error.response.statusText}: ${error.response.data}` : "Failed to grant token";
    logger2.warn(
      `Token exchange failed`,
      import_axios.default.isAxiosError(error) && error.response ? (0, import_omit.default)(error, ["request", "response"]) : error,
      {
        refreshUrl,
        contentType,
        ...import_axios.default.isAxiosError(error) && error.response ? {
          status: error.response.status,
          data: error.response.data
        } : {}
      }
    );
    throw new OAuthError(errorMessage, import_http_status_codes2.StatusCodes.BAD_REQUEST, "token_grant_failed");
  }
};
var refreshAndPersistAccessToken = async (db, logger2, userId, provider, refreshToken, originAddress) => {
  try {
    const tokenRequestData = {
      refresh_token: refreshToken,
      grant_type: "refresh_token"
    };
    const contentType = provider.contentType || "application/json";
    const tokenResponse = await import_axios.default.post(
      provider.refreshUrl || provider.tokenUrl,
      contentType.includes("form") ? import_qs.default.stringify(tokenRequestData) : tokenRequestData,
      {
        headers: {
          "Content-Type": contentType,
          Authorization: oauthAuthHeader(provider)
        }
      }
    );
    const tokenData = {
      accessToken: tokenResponse.data.access_token,
      expiresIn: tokenResponse.data.expires_in || 3600,
      scope: tokenResponse.data.scope,
      refreshToken: tokenResponse.data.refresh_token || refreshToken
    };
    return await persistToken(db, logger2, userId, provider.id, tokenData, originAddress);
  } catch (error) {
    logger2.warn(`Token refresh failed`, error, {
      ...import_axios.default.isAxiosError(error) && error.response ? {
        status: error.response.status,
        data: error.response.data
      } : {}
    });
    throw new OAuthError(`Failed to refresh token`, import_http_status_codes2.StatusCodes.BAD_REQUEST, "token_refresh_failed");
  }
};
var persistToken = async (db, logger2, userId, providerId, token, originAddress, jti = null) => {
  logger2.debug(`Persisting token for user ${userId} and provider ${providerId}`);
  if (providerId) {
    await db.providerToken.deleteMany({
      where: {
        providerId,
        userId
      }
    });
  }
  return await db.providerToken.create({
    data: {
      id: jti || void 0,
      providerId,
      userId,
      accessToken: token.accessToken,
      refreshToken: token.refreshToken,
      scopes: token.scope?.split(" "),
      issuedAt: /* @__PURE__ */ new Date(),
      expiresAt: token.expiresIn === null ? null : new Date(Date.now() + token.expiresIn * 1e3),
      originAddress
    }
  });
};
var getAuthorizeUrl = (req, provider, clientState, serverId, userId, origScope, originAddress, origRedirectUri = null, origClientId = null, responseType = "code") => {
  const stateData = {
    redirectUri: origRedirectUri,
    clientState,
    clientId: origClientId,
    serverId,
    scope: origScope,
    providerId: provider.id,
    originAddress,
    userId
  };
  const stateParam = encodeData(stateData);
  const authUrl = new URL(provider.authorizationUrl);
  authUrl.searchParams.append("client_id", provider.clientId);
  authUrl.searchParams.append("redirect_uri", callbackUrl(req));
  authUrl.searchParams.append("response_type", responseType);
  authUrl.searchParams.append("scope", provider.scopes.join(" "));
  authUrl.searchParams.append("state", stateParam);
  authUrl.searchParams.append("prompt", "consent");
  return authUrl.toString();
};
var getUserUseableTokens = async (db, userId, providerId) => {
  return await db.providerToken.findMany({
    where: {
      userId,
      providerId,
      OR: [
        {
          expiresAt: null
        },
        {
          expiresAt: { gte: /* @__PURE__ */ new Date() }
        },
        {
          NOT: {
            refreshToken: null
          }
        }
      ]
    },
    orderBy: {
      expiresAt: "desc"
    }
  });
};
var markTokenAsUsed = async (db, tokenId) => await db.providerToken.update({
  where: {
    id: tokenId
  },
  data: {
    lastUsedAt: /* @__PURE__ */ new Date()
  }
});

// src/utils/hash.ts
var crypto3 = __toESM(require("crypto"), 1);
var encoder = new TextEncoder();
function hashForLogging(str) {
  const data = encoder.encode(str);
  return crypto3.subtle.digest("SHA-256", data).then((hashBuffer) => {
    const hashArray = Array.from(new Uint8Array(hashBuffer));
    const base64 = Buffer.from(hashArray).toString("base64");
    return base64.replace(/\+/g, "-").replace(/\//g, "_").replace(/=+$/, "");
  });
}

// src/middlewares/session.middleware.ts
var sessionMiddleware = async (req, res, next, scope, verifier, setter) => {
  if (!isAppRequest(req)) {
    throw new TypeGuardError();
  }
  const authHeader = req.headers.authorization;
  if (!authHeader || !authHeader.startsWith("Bearer ")) {
    req.logger.warn(`No authorization header for ${scope} provided on request to ${req.path}`);
    return res.status(import_http_status_codes3.StatusCodes.UNAUTHORIZED).json({
      error: "unauthorized",
      errorDescription: "No token provided"
    });
  }
  const token = authHeader.split(" ")[1];
  try {
    const decoded = await verifier(token);
    if (!decoded) {
      req.logger.debug("Token verification failed");
      return res.status(import_http_status_codes3.StatusCodes.UNAUTHORIZED).json({
        error: "unauthorized",
        errorDescription: "Invalid token"
      });
    }
    if (scope === "user") {
      const token2 = await cacheGetOrAdd(
        { type: "enduser_token" /* ENDUSER_TOKEN */, ids: [decoded.email, decoded.jti || ""] },
        async () => await req.db.providerToken.findUnique({
          where: {
            id: decoded.jti
          }
        })
      );
      if (!token2) {
        req.logger.warn("Token not found in database", decoded.jti);
        return res.status(import_http_status_codes3.StatusCodes.UNAUTHORIZED).json({
          error: "unauthorized",
          errorDescription: "Invalid token"
        });
      }
      setImmediate(() => markTokenAsUsed(req.db, token2.id));
    }
    setter(req, decoded);
    req.logger = req.logger.child({
      tenantId: decoded.tenantId,
      [scope === "user" ? "endUserId" : "adminId"]: decoded.id,
      email: await hashForLogging(decoded.email)
    });
    return next();
  } catch {
    return res.status(import_http_status_codes3.StatusCodes.UNAUTHORIZED).json({
      error: "unauthorized",
      errorDescription: "Invalid token"
    });
  }
};
var adminSessionMiddleware = async (req, res, next) => {
  return sessionMiddleware(req, res, next, "admin", verifyAdminToken, (req2, decoded) => req2.admin = decoded);
};
var superAdminOnlyMiddleware = (req, res, next) => {
  if (!isAdminRequest(req)) {
    throw new TypeGuardError();
  }
  if (req.admin.role === import_client2.AdminRole.superadmin) {
    return next();
  }
  return res.status(import_http_status_codes3.StatusCodes.FORBIDDEN).json({
    error: "forbidden",
    errorDescription: "Superadmin privileges required"
  });
};

// src/routes/admins.routes.ts
var import_express = require("express");

// src/controllers/admins.controller.ts
var import_http_status_codes4 = require("http-status-codes");

// src/services/admins.service.ts
var import_client3 = require("@prisma/client");

// ../../libs/agentbridge-utils/src/lib/openapi/parse.ts
var import_json_schema_ref_resolver = require("json-schema-ref-resolver");
var import_openapi_types = require("openapi-types");

// ../../libs/agentbridge-utils/src/analytics-events.ts
var AnalyticsEvents = {
  // Authentication & Authorization Events
  ADMIN_LOGIN_ATTEMPTED: "admin.login.attempted",
  ADMIN_LOGIN_SUCCESS: "admin.login.success",
  ADMIN_LOGIN_FAILED: "admin.login.failed",
  ADMIN_LOGOUT_COMPLETED: "admin.logout.completed",
  ADMIN_SESSION_STARTED: "admin.session.started",
  ADMIN_ACCOUNT_ACTIVATED: "admin.account.activated",
  ADMIN_PERMISSION_DENIED: "admin.permission.denied",
  // Waitlist Management Events
  WAITLIST_SIGNUP_SUBMITTED: "waitlist.signup.submitted",
  // MCP Server Management Events
  MCP_SERVER_CREATE_COMPLETED: "mcp.server.create.completed",
  MCP_SERVER_CREATE_FAILED: "mcp.server.create.failed",
  // Tool Management Events
  MCP_TOOL_CREATE_COMPLETED: "mcp.tool.create.completed",
  MCP_TOOL_UPDATE_COMPLETED: "mcp.tool.update.completed",
  // Tool Execution Events
  MCP_TOOL_EXECUTION_API_CALL: "mcp.tool.execution.api_call",
  MCP_TOOL_PLAYGROUND_OPENED: "mcp.tool.playground.opened",
  // Analytics View Events
  MCP_ANALYTICS_VIEWED: "mcp.analytics.viewed",
  // Tenant Management Events
  TENANT_INVITATION_SENT: "tenant.invitation.sent",
  TENANT_INVITATION_ACCEPTED: "tenant.invitation.accepted",
  TENANT_INVITATION_CANCELLED: "tenant.invitation.cancelled",
  TENANT_USER_REMOVED: "tenant.user.removed",
  // OAuth Provider Events
  OAUTH_PROVIDER_CREATED: "oauth.provider.created",
  OAUTH_FLOW_STARTED: "oauth.flow.started",
  OAUTH_FLOW_COMPLETED: "oauth.flow.completed"
};

// src/services/analytics.service.ts
var import_posthog_node = require("posthog-node");
var AnalyticsService = class {
  constructor() {
    this.posthog = new import_posthog_node.PostHog("phc_RWNzgaQfuBegaxtWVT6QGMXJF5oirldPLdOP1uDVHtJ", {
      host: "https://app.posthog.com"
    });
  }
  track(distinctId, event, properties = {}) {
    this.posthog.capture({
      distinctId,
      event,
      properties: {
        ...properties,
        timestamp: (/* @__PURE__ */ new Date()).toISOString(),
        source: "backend"
      }
    });
  }
  identify(distinctId, properties) {
    this.posthog.identify({
      distinctId,
      properties
    });
  }
  async shutdown() {
    await this.posthog.shutdown();
  }
};
var analytics = new AnalyticsService();

// src/services/email.service.ts
var import_nodemailer = __toESM(require("nodemailer"), 1);

// src/services/email.service.templates.ts
var getAdminApprovalEmailTemplate = (adminEmail, verificationLink) => {
  return `<!doctype html>
  <html lang="en">
    <body style="margin: 0; padding: 0; background-color: #171e29; font-family: Arial, 'Helvetica Neue', Helvetica, sans-serif; color: #f8f9fb;">
      <table cellpadding="0" cellspacing="0" border="0" width="100%" style="background-color: #171e29; padding: 40px 0">
        <tr>
          <td align="center">
            <table cellpadding="0" cellspacing="0" border="0" width="100%" style="max-width: 600px; background-color: #1f2937; padding: 40px; border-radius: 8px; box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);">
              <tr>
                <td style="padding: 32px 0; text-align: center; font-size: 18px">
                  A new admin has requested access:<br/>
                  <strong style="color: #2276fc">${adminEmail}</strong><br/><br/>
                  Click the button below to approve their access:
                </td>
              </tr>
              <tr>
                <td style="text-align: center; padding-bottom: 32px">
                  <a href="${verificationLink}" style="background: #2276fc; color: #FFFFFF; display: inline-block; padding: 12px 32px; text-align: center; text-decoration: none; border-radius: 4px; font-weight: bold;">Approve Admin</a>
                </td>
              </tr>
              <tr>
                <td style="text-align: center; font-size: 14px; color: #a7b0bd">
                  If you did not expect this request, you can safely ignore this message.
                </td>
              </tr>
            </table>
          </td>
        </tr>
      </table>
    </body>
  </html>`;
};
var getAdminApprovedEmailTemplate = (appLink) => {
  return `<!doctype html>
  <html lang="en">
    <body style="margin: 0; padding: 0; background-color: #171e29; font-family: Arial, 'Helvetica Neue', Helvetica, sans-serif; color: #f8f9fb;">
      <table cellpadding="0" cellspacing="0" border="0" width="100%" style="background-color: #171e29; padding: 40px 0">
        <tr>
          <td align="center">
            <table cellpadding="0" cellspacing="0" border="0" width="100%" style="max-width: 600px; background-color: #1f2937; padding: 40px; border-radius: 8px; box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);">
              <tr>
                <td style="padding: 16px 0; text-align: center; font-size: 16px; color: #f8f9fb;">
                  Great news! Your account has been approved and you're now ready to start using AgentPass.<br/><br/>
                  Click the button below to access your dashboard and start exploring:
                </td>
              </tr>
              <tr>
                <td style="text-align: center;">
                  <a href="${appLink}" style="background: #2276fc; color: #FFFFFF; display: inline-block; padding: 12px 32px; text-align: center; text-decoration: none; border-radius: 4px; font-weight: bold;">Go to AgentPass</a>
                </td>
              </tr>
              <tr>
                <td style="padding: 16px 0; text-align: center; font-size: 15px; color: #f8f9fb;">
                  We're excited to have you onboard!<br/>
                  <span style="color: #b0b7c3;">The AgentPass Team</span>
                </td>
              </tr>
            </table>
          </td>
        </tr>
      </table>
    </body>
  </html>`;
};
var getEasterEggWelcomeEmailTemplate = (appLink) => {
  return `<!doctype html>
  <html lang="en">
    <body style="margin: 0; padding: 0; background-color: #171e29; font-family: Arial, 'Helvetica Neue', Helvetica, sans-serif; color: #f8f9fb;">
      <table cellpadding="0" cellspacing="0" border="0" width="100%" style="background-color: #171e29; padding: 40px 0">
        <tr>
          <td align="center">
            <table cellpadding="0" cellspacing="0" border="0" width="100%" style="max-width: 600px; background-color: #1f2937; padding: 40px; border-radius: 8px; box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);">
              <tr>
                <td style="text-align: center; font-size: 28px; font-weight: bold; padding-bottom: 10px">
                  <span style="color: #2276fc">\u{1F680} AgentPass.ai</span>
                </td>
              </tr>
              <tr>
                <td style="padding: 24px 0; text-align: center; font-size: 18px">
                  <strong style="color: #2276fc;">Rocket launch detected!</strong><br/><br/>
                  Congratulations on discovering our easter egg! Your curiosity and exploration have earned you instant access to AgentPass.<br/><br/>
                  Your account has been activated and you're ready to start connecting AI agents to APIs:
                </td>
              </tr>
              <tr>
                <td style="text-align: center; padding-bottom: 32px">
                  <a href="${appLink}" style="background: #2276fc; color: #FFFFFF; display: inline-block; padding: 12px 32px; text-align: center; text-decoration: none; border-radius: 4px; font-weight: bold;">\u{1F680} Launch into AgentPass</a>
                </td>
              </tr>
              <tr>
                <td style="padding: 16px 0; text-align: center; font-size: 15px; color: #f8f9fb;">
                  Thanks for launching the rocket! We're excited to have curious explorers like you onboard.<br/>
                  <span style="color: #b0b7c3;">The AgentPass Team</span>
                </td>
              </tr>
              <tr>
                <td style="text-align: center; font-size: 13px; color: #a7b0bd; padding-top: 16px;">
                  P.S. Keep exploring - there might be more surprises waiting! \u{1F3AF}
                </td>
              </tr>
            </table>
          </td>
        </tr>
      </table>
    </body>
  </html>`;
};
var getTenantInvitationEmailTemplate = (inviter, tenantName, role, invitationLink, expiresAt) => {
  return `<!doctype html>
  <html lang="en">
    <body style="margin: 0; padding: 0; background-color: #171e29; font-family: Arial, 'Helvetica Neue', Helvetica, sans-serif; color: #f8f9fb;">
      <table cellpadding="0" cellspacing="0" border="0" width="100%" style="background-color: #171e29; padding: 40px 0">
        <tr>
          <td align="center">
            <table cellpadding="0" cellspacing="0" border="0" width="100%" style="max-width: 600px; background-color: #1f2937; padding: 40px; border-radius: 8px; box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);">
              <tr>
                <td style="text-align: center; font-size: 28px; font-weight: bold; padding-bottom: 10px">
                  <span style="color: #2276fc">AgentPass.ai</span>
                </td>
              </tr>
              <tr>
                <td style="padding: 24px 0; text-align: center; font-size: 18px">
                  <strong>${inviter}</strong> has invited you to join the tenant <strong>${tenantName}</strong> as a <strong>${role}</strong>.<br/><br/>
                  Click the button below to accept your invitation:
                </td>
              </tr>
              <tr>
                <td style="text-align: center; padding-bottom: 32px">
                  <a href="${invitationLink}" style="background: #2276fc; color: #FFFFFF; display: inline-block; padding: 12px 32px; text-align: center; text-decoration: none; border-radius: 4px; font-weight: bold;">Accept Invitation</a>
                </td>
              </tr>
              <tr>
                <td style="text-align: center; font-size: 15px; color: #a7b0bd">
                  This invitation will expire on <strong>${expiresAt.toLocaleDateString()}</strong>.<br/>
                  If you did not expect this invitation, you can safely ignore this message.
                </td>
              </tr>
            </table>
          </td>
        </tr>
      </table>
    </body>
  </html>`;
};

// src/services/email.service.ts
init_jwt_service();
init_secrets_service();
var notificationEmail = process.env.WAITLIST_NOTIFICATION_EMAIL;
var env = process.env.ENV || "dev";
var baseUrl = process.env.CONSOLE_URL || "http://localhost:4200";
var smtpPort = process.env.SMTP_PORT || "456";
var sendAddToWaitlistEmail = async (logger2, pendingAdmin) => {
  if (!notificationEmail) {
    return true;
  }
  const transporter = await createTransporter();
  logger2.debug("Sending admin approval request email", {
    targetEmail: notificationEmail,
    adminEmail: pendingAdmin.email
  });
  try {
    const verificationToken = await generateAdminVerificationToken(pendingAdmin.id);
    const verificationLink = `${baseUrl}/verify-admin?token=${verificationToken}`;
    await transporter.sendMail({
      from: `agentpass-${env}@ownid.com`,
      to: notificationEmail,
      subject: `AgentPass ${env}: New Admin Approval Required`,
      html: getAdminApprovalEmailTemplate(pendingAdmin.email, verificationLink)
    });
    return true;
  } catch (error) {
    logger2.error("Failed to send admin approval request email", error);
    return false;
  }
};
var sendAdminApprovedNotification = async (logger2, admin, isEasterEgg = false) => {
  const transporter = await createTransporter();
  logger2.debug("Sending admin approved notification email", {
    adminEmail: admin.email,
    isEasterEgg
  });
  try {
    await transporter.sendMail({
      from: `agentpass-${env}@ownid.com`,
      to: admin.email,
      subject: isEasterEgg ? `\u{1F680} Welcome to AgentPass - Rocket Launch Detected!` : `You're in! Welcome to AgentPass`,
      html: isEasterEgg ? getEasterEggWelcomeEmailTemplate(baseUrl) : getAdminApprovedEmailTemplate(baseUrl)
    });
    return true;
  } catch (error) {
    logger2.error("Failed to send admin approved notification email", error);
    return false;
  }
};
var sendTenantInvitationEmail = async (logger2, to, inviter, tenantName, invitationLink, role, expiresAt) => {
  const transporter = await createTransporter();
  logger2.debug("Sending tenant invitation email", {
    to,
    inviter,
    tenantName,
    invitationLink,
    role,
    expiresAt
  });
  try {
    await transporter.sendMail({
      from: `agentpass-${env}@ownid.com`,
      to,
      subject: `You're invited to join ${tenantName} on AgentPass`,
      html: getTenantInvitationEmailTemplate(inviter, tenantName, role, invitationLink, expiresAt)
    });
    return true;
  } catch (error) {
    logger2.error("Failed to send tenant invitation email", error);
    return false;
  }
};
var createTransporter = async () => {
  const appSecrets2 = await getAppSecrets();
  return import_nodemailer.default.createTransport({
    host: appSecrets2.smtpHost,
    port: Number(appSecrets2.smtpPort),
    secure: appSecrets2.smtpPort === smtpPort,
    auth: {
      user: appSecrets2.smtpUsername,
      pass: appSecrets2.smtpPassword
    }
  });
};

// src/services/admins.service.ts
init_jwt_service();
async function createAdminUser(db, email, tenantId, extras) {
  let role;
  if (email.endsWith("@ownid.com")) {
    role = import_client3.AdminRole.superadmin;
  } else {
    role = import_client3.AdminRole.admin;
  }
  return await db.admin.create({
    data: {
      ...extras,
      email: email.toLowerCase(),
      tenantId,
      role
    }
  });
}
async function createTenant(db, name) {
  return await db.tenant.create({
    data: {
      name
    }
  });
}
async function setAdminOwnIdData(db, email, ownIdData) {
  const admin = await db.admin.findFirst({
    where: {
      email: {
        equals: email,
        mode: "insensitive"
      }
    }
  });
  if (!admin) {
    return { status: "NOT_FOUND", error: "Admin not found" };
  }
  await db.admin.update({
    where: {
      id: admin.id
    },
    data: {
      ownidData: ownIdData
    }
  });
  return { status: "OK", error: null };
}
async function getAdminOwnIdData(db, logger2, email) {
  const admin = await db.admin.findFirst({
    where: {
      email: {
        equals: email,
        mode: "insensitive"
      }
    }
  });
  if (!admin) {
    logger2.debug("Admin not found", { email });
    return { status: "NOT_FOUND", error: "Admin not found" };
  }
  logger2.debug("Admin found", { email, ownidData: admin.ownidData, enabled: admin.enabled });
  if (!admin.enabled) {
    return { status: "LOCKED", error: "Admin not enabled" };
  }
  if (admin.ownidData) {
    return { status: "OK", data: { ownIdData: admin.ownidData } };
  }
  return { status: "NO_CONTENT" };
}
async function createAdminSession(db, logger2, email) {
  const admin = await db.admin.findFirst({
    where: {
      email: {
        equals: email,
        mode: "insensitive"
      }
    }
  });
  if (!admin) {
    logger2.debug("Admin not found", { email });
    return { status: "NOT_FOUND", error: "Admin not found" };
  }
  const token = await generateAdminToken(admin);
  return { status: "OK", data: { token } };
}
async function getAdmins(db) {
  return db.admin.findMany({
    where: {
      role: {
        in: ["admin", "superadmin"]
      }
    },
    orderBy: [{ name: "asc" }, { id: "asc" }],
    include: { tenant: true }
  });
}
async function putEnabled(db, logger2, adminId, enabled, sendNotification, approvedByAdminId) {
  const admin = await db.admin.update({
    where: { id: adminId },
    data: { enabled },
    include: { tenant: true }
  });
  if (enabled) {
    analytics.track(admin.id, AnalyticsEvents.ADMIN_ACCOUNT_ACTIVATED, {
      email: admin.email,
      tenant_id: admin.tenantId,
      activation_method: "manual_approval",
      approved_by: approvedByAdminId || "system",
      wait_time_hours: admin.createdAt ? Math.floor((Date.now() - new Date(admin.createdAt).getTime()) / (1e3 * 60 * 60)) : 0
    });
  }
  if (sendNotification) {
    await sendAdminApprovedNotification(logger2, admin);
  }
  return admin;
}
async function putUpdateAdmin(db, adminId, updates) {
  const data = {};
  if (updates.name !== void 0) {
    data.name = updates.name;
  }
  if (updates.role !== void 0) {
    data.role = updates.role.toLowerCase();
  }
  return db.admin.update({
    where: { id: adminId },
    data
  });
}
async function getAdmin(db, adminId) {
  return db.admin.findUnique({
    where: { id: adminId }
  });
}

// src/controllers/admins.controller.ts
init_jwt_service();
var addToWaitlist = async (req, res) => {
  if (!isAppRequest(req)) {
    throw new TypeGuardError();
  }
  const email = req.body.email.toLowerCase();
  const easterEggBypass = req.body.easterEggBypass || false;
  req.logger.debug("Processing waitlist request", { email, easterEggBypass });
  try {
    const existingAdmin = await req.db.admin.findFirst({
      where: {
        email: {
          equals: email,
          mode: "insensitive"
        }
      }
    });
    if (existingAdmin) {
      if (easterEggBypass && !existingAdmin.enabled) {
        await req.db.admin.update({
          where: { id: existingAdmin.id },
          data: { enabled: true }
        });
        await sendAdminApprovedNotification(req.logger, existingAdmin, true);
        req.logger.info("\u{1F680} Easter egg bypass used - enabled existing user", { email });
        return res.status(import_http_status_codes4.StatusCodes.OK).json({ message: "Account enabled via easter egg bypass!" });
      }
      const message = existingAdmin.enabled ? "User already has access" : "User already on waitlist";
      return res.status(import_http_status_codes4.StatusCodes.OK).json({ message });
    }
    let admin;
    try {
      const tenant = await createTenant(req.db, email);
      admin = await createAdminUser(req.db, email, tenant.id, {
        emailVerified: true,
        enabled: easterEggBypass
      });
      if (easterEggBypass) {
        analytics.track(admin.id, AnalyticsEvents.ADMIN_ACCOUNT_ACTIVATED, {
          email: admin.email,
          tenant_id: admin.tenantId,
          activation_method: "easter_egg",
          approved_by: "easter_egg",
          wait_time_hours: 0
        });
      }
    } catch (createError) {
      const error = createError;
      if (error.code === "P2002" && error.meta?.target?.includes("email")) {
        req.logger.info("Admin was created concurrently, fetching existing", { email });
        const existingAdmin2 = await req.db.admin.findFirst({
          where: { email: { equals: email, mode: "insensitive" } }
        });
        if (existingAdmin2) {
          if (easterEggBypass && !existingAdmin2.enabled) {
            admin = await req.db.admin.update({
              where: { id: existingAdmin2.id },
              data: { enabled: true }
            });
            analytics.track(admin.id, AnalyticsEvents.ADMIN_ACCOUNT_ACTIVATED, {
              email: admin.email,
              tenant_id: admin.tenantId,
              activation_method: "easter_egg",
              approved_by: "easter_egg",
              wait_time_hours: Math.round((Date.now() - existingAdmin2.createdAt.getTime()) / (1e3 * 60 * 60))
            });
            await sendAdminApprovedNotification(req.logger, admin, true);
            req.logger.info("\u{1F680} Easter egg bypass used - enabled concurrent user", { email });
          } else {
            admin = existingAdmin2;
          }
        } else {
          throw createError;
        }
      } else {
        throw createError;
      }
    }
    const success = easterEggBypass ? await sendAdminApprovedNotification(req.logger, admin, true) : await sendAddToWaitlistEmail(req.logger, admin);
    if (easterEggBypass) {
      req.logger.info("\u{1F680} Easter egg bypass used", { email });
    }
    if (success) {
      const message = easterEggBypass ? "Account created and enabled via easter egg bypass!" : "Added to waitlist";
      res.status(import_http_status_codes4.StatusCodes.OK).json({ message });
    } else {
      res.status(import_http_status_codes4.StatusCodes.INTERNAL_SERVER_ERROR).json({ message: "Failed to send email" });
    }
  } catch (error) {
    req.logger.error("Error in addToWaitlist", { error, email });
    res.status(import_http_status_codes4.StatusCodes.INTERNAL_SERVER_ERROR).json({ message: "Failed to process request" });
  }
};
var listAdmins = async (req, res) => {
  if (!isAdminRequest(req)) {
    throw new TypeGuardError();
  }
  const admins = await getAdmins(req.db);
  if (!admins) {
    return res.status(import_http_status_codes4.StatusCodes.NOT_FOUND).json({ message: "No admins found" });
  }
  res.json(admins);
};
var updateAdmin = async (req, res) => {
  if (!isAdminRequest(req)) {
    throw new TypeGuardError();
  }
  const admin = await putUpdateAdmin(req.db, req.params.adminId, req.body);
  res.json(admin);
};
var enableAdmin = async (req, res) => {
  if (!isAdminRequest(req)) {
    throw new TypeGuardError();
  }
  let adminId = req.params.adminId;
  if (req.body.token) {
    const admin2 = await verifyAdminVerificationToken(req.body.token);
    if (!admin2) {
      return res.status(import_http_status_codes4.StatusCodes.UNAUTHORIZED).json({ message: "Invalid verification token" });
    }
    adminId = admin2.id;
  }
  const admin = await putEnabled(
    req.db,
    req.logger,
    adminId,
    req.body.enabled,
    req.body.sendNotification,
    req.admin.id
  );
  res.json(admin);
};
var sendAdminApprovedNotification2 = async (req, res) => {
  if (!isAdminRequest(req)) {
    throw new TypeGuardError();
  }
  const admin = await getAdmin(req.db, req.params.adminId);
  if (!admin) {
    return res.status(import_http_status_codes4.StatusCodes.NOT_FOUND).json({ message: "Admin not found" });
  }
  await sendAdminApprovedNotification(req.logger, admin);
  res.json(admin);
};

// src/routes/admins.routes.ts
var router = (0, import_express.Router)();
router.post("/waitlist", addToWaitlist);
router.put("/:adminId/enable", adminSessionMiddleware, superAdminOnlyMiddleware, enableAdmin);
router.put("/:adminId", adminSessionMiddleware, superAdminOnlyMiddleware, updateAdmin);
router.get("/", adminSessionMiddleware, superAdminOnlyMiddleware, listAdmins);
router.post(
  "/:adminId/send-approved-notification",
  adminSessionMiddleware,
  superAdminOnlyMiddleware,
  sendAdminApprovedNotification2
);
var admins_routes_default = router;

// src/routes/ai.routes.ts
var import_express2 = require("express");

// src/controllers/ai.controller.ts
var import_zod2 = require("zod");

// src/services/ai.service.ts
var import_anthropic = require("@ai-sdk/anthropic");
var import_openai = require("@ai-sdk/openai");
var import_ai = require("ai");
var import_zod = require("zod");

// src/services/prompts.service.ts
var prompts = /* @__PURE__ */ new Map();
initializePrompts();
function initializePrompts() {
  prompts.set("ai-agent-system", {
    id: "ai-agent-system",
    name: "AI Agent System Prompt",
    description: "System prompt for AI assistant specialized in creating API tools for MCP servers",
    content: `You are an AI assistant specialized EXCLUSIVELY in creating API tools for MCP servers. You ONLY help with API integrations, tool creation, and related technical tasks.

CRITICAL BOUNDARIES:
- You help create API tools and integrations for MCP servers
- When users mention APIs, tools, or integrations (like "fetch figma designs", "github PR", "weather data"), understand they want to create MCP tools
- Only redirect off-topic requests that are clearly unrelated (recipes, personal advice, etc.)
- Be helpful and interpret tool-related requests correctly

MANDATORY WEB SEARCH RULE:
- You MUST search the web for API documentation BEFORE designing any tool
- Even if you think you know the API well, search for the latest documentation
- This ensures you have the most current endpoints, authentication methods, and parameters
- Start your response with something like "Let me search for the latest [API name] documentation..."

RESPONSE STYLE:
- Be conversational but concise
- Show your reasoning process naturally by starting thoughts with "[THINKING] " on separate lines
- NEVER use [SEARCHING] or any other tags - only [THINKING] is allowed
- Focus on understanding what the user needs and delivering it efficiently

CORE CAPABILITIES:
- Expert knowledge of REST APIs, OAuth 2.0, and API authentication patterns
- Familiar with popular APIs (GitHub, Slack, OpenWeatherMap, Stripe, Discord, etc.)
- Can infer common use cases from minimal context
- Access to web search for verifying current API documentation and finding latest endpoints
- ALWAYS use web search BEFORE creating any tool definition to get the most accurate API information
- Do NOT create tools unless the user explicitly confirms they want the tool created

WHAT MAKES A SUITABLE API FOR MCP TOOLS:
- Must be an HTTP endpoint (REST or GraphQL)
- REST APIs: GET, POST, PUT, DELETE, PATCH methods
- GraphQL APIs: POST method with query/mutation in the body
- Must return JSON or XML responses
- Can use authentication (OAuth, API keys, Bearer tokens)
- NOT suitable: File downloads (CSV, GTFS), SOAP services, websockets, non-HTTP protocols

WEB SEARCH BEST PRACTICES:
- When you search the web and find information, always mention the source (e.g., "According to docs.ownid.com...")
- If documentation reveals important details (authentication, headers, etc.), quote them specifically
- Web search results will be displayed to the user with clickable links
- Look specifically for REST APIs or HTTP endpoints that can be called directly
- If you only find data files (CSV, GTFS, etc.) or non-API solutions, BE HONEST about it

CONVERSATION FLOW:
1. When a user mentions an API or service, understand their intent
2. ALWAYS search the web FIRST to find the latest API documentation, even if you think you know the API
3. When web search reveals authentication requirements (HMAC, signatures, timestamps, etc.), ALWAYS include them in your tool specification
4. After finding a suitable API (REST or GraphQL), YOU MUST create a complete JSON tool specification - this is NOT optional
5. For GraphQL: Even if it's a simple mutation, CREATE THE TOOL SPECIFICATION
6. If genuinely ambiguous, ask a clarifying question
7. ALWAYS present your tool design as clean JSON with explanations, citing the sources you found
8. ALWAYS end with: "Does this look good? Would you like me to create it, or would you prefer any changes?"
9. Wait for user feedback - they might want changes or have questions
10. Only proceed to tool creation when the user explicitly confirms with phrases like:
    - "yes", "create it", "looks good", "go ahead", "perfect", "that's correct"
    - NOT when they ask questions like "did you create it?", "has it been created?", "is it done?"

IMPORTANT AUTHENTICATION RULES:
- If web search reveals HMAC signatures, include them as header parameters
- If timestamps are required for request validation, include them as header parameters
- If the API uses custom authentication headers, include ALL of them
- Don't forget path parameters like appId, organizationId, etc. that are often part of the URL
- Include response schemas when documentation provides them

CRITICAL RULE - COMPLETE THE FLOW:
When you find a suitable API (REST or GraphQL), you MUST:
1. Create the complete JSON tool specification
2. Include all parameters, authentication, and responses
3. End with the confirmation question
DO NOT stop after explaining the API - you MUST provide the tool specification!

VIOLATION WARNING: If you explain an API without providing the JSON tool specification, you are FAILING to complete your task!

TOOL SPECIFICATION FORMAT:
Only create tool specifications for HTTP endpoints (REST or GraphQL). When you've found a suitable API, present the tool specification in a JSON code block (use triple backticks with json language identifier):

{
  "tool": {
    "name": "descriptiveName",
    "description": "Clear description of what this tool does",
    "method": "GET/POST/PUT/DELETE",
    "url": "https://api.example.com/endpoint/{params}",
    "parameters": {
      "paramName": {
        "name": "paramName",
        "description": "What this parameter is for",
        "schema": {
          "type": "string/number/boolean",
          "description": "Same description for API validation"
        },
        "required": true/false,
        "in": "path/query/header/body"
      }
    },
    "responses": {
      "200": { "statusCode": 200, "description": "Success" }
    }
  },
  "auth": {
    "type": "oauth/apikey",
    "oauth": {
      "name": "ServiceName OAuth",
      "authorizationUrl": "https://...",
      "tokenUrl": "https://...",
      "scopes": ["scope1", "scope2"]
    },
    "apikey": {
      "name": "ServiceName API",
      "keyName": "API-Key-Header-Name",
      "keyIn": "header/query"
    }
  },
  "service": "ServiceName"
}

Note: Always wrap your JSON specification in a markdown code block with triple backticks and 'json' language identifier.

For REST APIs: The system will automatically generate requestParameterOverrides from your parameters.
For GraphQL: You MUST include requestParameterOverrides with the hardcoded query/mutation.

GRAPHQL SPECIFIC FORMAT:
For GraphQL endpoints, always use:
- method: "POST"
- url: The GraphQL endpoint URL (usually ends with /graphql)
- parameters: {} (empty object if no variables), or only variable parameters
- requestParameterOverrides: ALWAYS include this with the hardcoded query/mutation
  - body: { "query": "your GraphQL query here" } (add "variables" only if needed)
  - headers: { "Content-Type": "application/json" }
- DO NOT make the query itself a parameter - it should be hardcoded in requestParameterOverrides

WHY: The GraphQL query/mutation is part of the API definition, not a runtime parameter. By hardcoding it in requestParameterOverrides, the tool becomes easier to use and the query is guaranteed to be correct.

After presenting the specification, ALWAYS ask: "Does this look good? Would you like me to create it, or would you prefer any changes?"

NEVER skip this question - it's required for the flow to continue!

EXAMPLE WHEN NO API FOUND:
"Let me search for the latest Mallorca bus schedule API documentation...

[THINKING] I'm searching for REST APIs that provide Mallorca bus schedules

I searched for Mallorca bus schedule APIs, but I couldn't find a suitable REST API. What I found instead:
- The CTM (Consorcio de Transportes de Mallorca) provides GTFS files that need to be downloaded
- This is static data in file format, not a REST API endpoint

Unfortunately, GTFS files aren't suitable for MCP tools because they require downloading and parsing files rather than making HTTP API calls. 

For bus schedule data, you might want to:
1. Look for third-party transit APIs that serve GTFS data via REST endpoints
2. Check if there's a regional transport API that includes Mallorca
3. Consider APIs like Transitland or OpenTripPlanner that might have imported this data

Would you like me to search for alternative transit APIs that might cover Mallorca?"

EXAMPLE OF COMPLETE FLOW (OpenWeatherMap):
User: "I need to get weather for Mallorca"
Assistant: Let me search for the latest OpenWeatherMap API documentation to find how we can retrieve weather for Mallorca.

[THINKING] I'm searching for REST APIs providing weather data, specifically OpenWeatherMap, as it's a popular choice.

According to OpenWeatherMap's documentation (openweathermap.org), their API provides comprehensive weather data worldwide. Here's a tool to get weather for Mallorca:

\`\`\`json
{
  "tool": {
    "name": "getMallorcaWeather",
    "description": "Get current weather data for any location in Mallorca using OpenWeatherMap API",
    "method": "GET",
    "url": "https://api.openweathermap.org/data/2.5/weather",
    "parameters": {
      "q": {
        "name": "q",
        "description": "City name in Mallorca (e.g., 'Palma,ES', 'Inca,ES', 'Manacor,ES')",
        "schema": {
          "type": "string",
          "description": "City name with country code"
        },
        "required": true,
        "in": "query"
      },
      "lat": {
        "name": "lat",
        "description": "Latitude coordinate (e.g., 39.5696 for Palma)",
        "schema": {
          "type": "number",
          "description": "Latitude coordinate"
        },
        "required": false,
        "in": "query"
      },
      "lon": {
        "name": "lon",
        "description": "Longitude coordinate (e.g., 2.6502 for Palma)",
        "schema": {
          "type": "number",
          "description": "Longitude coordinate"
        },
        "required": false,
        "in": "query"
      },
      "units": {
        "name": "units",
        "description": "Units of measurement. standard, metric and imperial units are available",
        "schema": {
          "type": "string",
          "enum": ["standard", "metric", "imperial"],
          "default": "metric",
          "description": "Temperature units"
        },
        "required": false,
        "in": "query"
      },
      "lang": {
        "name": "lang",
        "description": "Language for weather descriptions (e.g., 'es' for Spanish, 'en' for English)",
        "schema": {
          "type": "string",
          "description": "Language code"
        },
        "required": false,
        "in": "query"
      }
    },
    "responses": {
      "200": {
        "statusCode": 200,
        "description": "Successful response with weather data"
      },
      "404": {
        "statusCode": 404,
        "description": "City not found"
      },
      "401": {
        "statusCode": 401,
        "description": "Invalid API key"
      }
    }
  },
  "auth": {
    "type": "apikey",
    "apikey": {
      "name": "OpenWeatherMap API",
      "keyName": "appid",
      "keyIn": "query"
    }
  },
  "service": "openweathermap"
}
\`\`\`

This tool will let you get current weather for any city in Mallorca. You can either use city names (like "Palma,ES") or coordinates. The API key will be added automatically as a query parameter.

Does this look good? Would you like me to create it, or would you prefer any changes?"

EXAMPLE OF GRAPHQL FLOW (Adobe Commerce):
User: "I want to create an empty cart for a guest user using Adobe Commerce GraphQL"
Assistant: Let me search for the latest Adobe Commerce GraphQL API documentation to find how to create an empty cart for guest users.

[THINKING] Adobe Commerce (Magento) uses GraphQL for many operations. Let me find the specific mutation for creating guest carts.

According to Adobe Commerce documentation (developer.adobe.com), their GraphQL API provides cart management capabilities. The createGuestCart mutation creates an empty shopping cart for a guest user. Here's a tool to create an empty cart:

\`\`\`json
{
  "tool": {
    "name": "createGuestCart",
    "description": "Create an empty cart for a guest user in Adobe Commerce",
    "method": "POST",
    "url": "https://your-store.com/graphql",
    "parameters": {},
    "requestParameterOverrides": {
      "body": {
        "query": "mutation { createGuestCart { cart { id } } }"
      },
      "headers": {
        "Content-Type": "application/json"
      }
    },
    "responses": {
      "200": {
        "statusCode": 200,
        "description": "Returns the cart ID as a string"
      }
    }
  },
  "auth": {
    "type": "none"
  },
  "service": "adobe-commerce"
}
\`\`\`

This tool will create an empty cart for a guest user and return the cart ID. The cart ID can then be used for subsequent operations like adding items or checking out.

Note: The GraphQL mutation is hardcoded in the requestParameterOverrides, so users don't need to pass it as a parameter.

Does this look good? Would you like me to create it, or would you prefer any changes?"

EXAMPLE OF GRAPHQL WITH VARIABLES:
For GraphQL operations that need variables, include them as parameters:

\`\`\`json
{
  "tool": {
    "name": "addProductToCart",
    "description": "Add a product to the cart",
    "method": "POST",
    "url": "https://your-store.com/graphql",
    "parameters": {
      "cartId": {
        "name": "cartId",
        "description": "The cart ID",
        "schema": { "type": "string" },
        "required": true,
        "in": "body"
      },
      "sku": {
        "name": "sku",
        "description": "Product SKU to add",
        "schema": { "type": "string" },
        "required": true,
        "in": "body"
      },
      "quantity": {
        "name": "quantity",
        "description": "Quantity to add",
        "schema": { "type": "number", "minimum": 1 },
        "required": true,
        "in": "body"
      }
    },
    "requestParameterOverrides": {
      "body": {
        "query": "mutation($cartId: String!, $sku: String!, $qty: Float!) { addSimpleProductsToCart(input: { cart_id: $cartId, cart_items: [{ data: { sku: $sku, quantity: $qty } }] }) { cart { items { product { name } quantity } } } }",
        "variables": {
          "cartId": "{{toolParams.cartId}}",
          "sku": "{{toolParams.sku}}",
          "qty": "{{toolParams.quantity}}"
        }
      },
      "headers": {
        "Content-Type": "application/json"
      }
    }
  }
}
\`\`\`

CRITICAL - TOOL-BASED CREATION:
- You have access to a 'createMCPTool' tool that you MUST use to create tools
- Only call this tool AFTER the user explicitly confirms they want to create the tool
- The tool takes the complete specification (tool, auth, service) as parameters
- When the tool call succeeds, the tool is actually created in the system
- Never claim to have created a tool without actually calling the createMCPTool function
- IMPORTANT: When the user confirms, you MUST immediately call the createMCPTool tool in your response
- Do NOT say "I'll proceed with creation" - just call the tool directly
- The tool call should happen in the same message where you acknowledge the confirmation

CREATION STATUS TRACKING:
- Keep track of what you've shown vs. what you've actually created
- If you've only shown a design, you HAVE NOT created the tool yet
- If a user asks "did you create it?" or similar:
  - If you only showed the design: "I've shown you the design, but haven't created it yet. Would you like me to create it now?"
  - If you actually called createMCPTool: "Yes, I've successfully created the tool [name]. It's now available in your workflow."
- Never claim to have created something without calling the createMCPTool tool

AUTHENTICATION PATTERNS:
- OAuth: GitHub, Slack, Google, Salesforce typically use OAuth 2.0
- API Keys in headers: Stripe (Bearer token), OpenAI (Bearer token), SendGrid
- API Keys in query: OpenWeatherMap (appid), some older APIs
- No auth: Some public APIs don't require authentication

WHEN NO SUITABLE API IS FOUND:
- Be HONEST and direct: "I searched but couldn't find a REST API for [service]. I found [what you found] instead."
- Explain why it's not suitable: "GTFS files need to be downloaded and parsed, which isn't suitable for MCP API tools"
- Suggest alternatives if possible: "You might want to look for a third-party API that serves this data"
- Don't try to force a solution that won't work as an MCP tool
- Don't create vague or incomplete tool definitions

IMPORTANT GUIDELINES:
- Read the conversation context to understand if the user already approved a design
- CONFIRMATION vs QUESTIONS: Distinguish between:
  - Confirmations: "yes", "create it", "looks good", "go ahead", "that's right", "perfect"
  - Status questions: "did you create it?", "has it been created?", "is it done?"
  - Respond to questions about status honestly - don't confuse them with confirmations
- If they provide feedback or ask questions, address those before creating
- Never create a tool without showing the complete specification first
- Never claim creation success without actual confirmation from the user
- Be helpful and explain your choices when relevant
- When creation is successful, ALWAYS mention the tool is "now available in your workflow canvas"

TOOL CALLING FORMAT:
When user confirms, you MUST call the tool like this:
1. Acknowledge the confirmation briefly
2. Call createMCPTool with the exact specification you showed
3. Let the tool execution complete
4. The system will show the result automatically

Remember: Good conversation is about understanding intent and responding appropriately. Questions about status are NOT confirmations to proceed.`,
    variables: [],
    category: "system",
    version: "1.0.0",
    createdAt: /* @__PURE__ */ new Date(),
    updatedAt: /* @__PURE__ */ new Date()
  });
  prompts.set("mock-data-generation", {
    id: "mock-data-generation",
    name: "Mock Data Generation Prompt",
    description: "Generate realistic mock data for API tool testing",
    content: `You are an AI assistant helping developers test API tools by generating realistic mock data.

Tool Information:
- Name: {{toolName}}
- Description: {{toolDescription}}
- Method: {{method}} {{url}}
- Server: {{serverName}}

Parameters to populate:
{{parameterDetails}}

Task: Generate realistic, contextually appropriate mock data for each parameter. Consider:
1. The tool's purpose and domain (e.g., user management, e-commerce, analytics)
2. Realistic data types and formats
3. Meaningful relationships between parameters
4. Industry standards and common patterns

For example:
- Email fields should use realistic email addresses
- Names should be common first/last names
- IDs should follow typical patterns (UUIDs, incremental numbers)
- Dates should be reasonable and properly formatted
- Objects/arrays should contain meaningful nested data

Special Instructions for Authentication Fields:
- For API keys, tokens, or auth headers: Generate realistic-looking but fake values (e.g., "sk-test-1234567890abcdef" for API keys, "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..." for tokens)
- These are for testing purposes only and will not work with real APIs

Important: {{#if hasAuthFields}}This tool contains authentication/authorization fields. In your reasoning, include a warning that mock authentication data will likely result in 401/403 errors when testing, and real credentials should be configured through the authorization system.{{else}}Consider if any fields might be related to authentication or authorization.{{/if}}

Provide:
1. Generated parameter values as a key-value object
2. Brief reasoning for your choices{{#if hasAuthFields}} (include authentication warning){{/if}}
3. Confidence score (0-1) for the quality of generated data

Return the response in the exact JSON format specified.`,
    variables: ["toolName", "toolDescription", "method", "url", "serverName", "parameterDetails", "hasAuthFields"],
    category: "tool",
    version: "1.0.0",
    createdAt: /* @__PURE__ */ new Date(),
    updatedAt: /* @__PURE__ */ new Date()
  });
  prompts.set("handlebars-template-generation", {
    id: "handlebars-template-generation",
    name: "Handlebars Template Generation",
    description: "Generate agent-optimized Handlebars response templates",
    content: `You are an expert in Handlebars templating for AI agent response formatting. Your task is to create an agent-optimized response template for the following API tool.

**CRITICAL WARNING**: You MUST NOT use any custom Handlebars helpers like (eq), (gt), (lt), (ne), etc. These will cause template errors. Only use built-in helpers like {{#if}}, {{#each}}, and {{json}}.

# Tool Context:
- **Name**: {{toolName}}
- **Description**: {{toolDescription}}
- **Method**: {{method}}
- **URL**: {{url}}
- **Parameters**: {{parameters}}
- **Expected Responses**: {{responses}}

# Key Requirements:
1. **FOR AGENTS, NOT HUMANS**: The response must be structured for AI agent consumption
2. **ACTIONABLE DATA**: Focus on data that agents can use for decision-making
3. **CONSISTENT STRUCTURE**: Use consistent formatting for similar data types
4. **MINIMAL PROSE**: Avoid human-friendly explanations, use structured data
5. **ERROR HANDLING**: Handle missing/null values gracefully

# Handlebars Expertise:
You have access to these variables:
- \`{{response.data.body}}\` - The API response body
- \`{{response.data.headers}}\` - Response headers
- \`{{request.data.parameters}}\` - Request parameters
- \`{{request.data.payload}}\` - Request payload

# Handlebars Helpers (Built-in Only):
- \`{{#each array}}\` - Loop through arrays
- \`{{#if condition}}\` - Conditional rendering (only checks truthy/falsy)
- \`{{@key}}\` - Current key in each loop
- \`{{this}}\` - Current value in each loop
- \`{{json object}}\` - JSON stringify an object

**CRITICAL**: NEVER use \`eq\`, \`gt\`, \`lt\`, \`ne\`, or any custom helpers. They will cause errors.
**ONLY** use \`{{#if}}\` to check if values exist (truthy/falsy), NOT for comparisons.
**BOOLEAN WARNING**: \`{{#if field}}\` treats \`false\` as falsy! For boolean fields, use direct output: \`{{field}}\`

# Agent-Focused Template Examples:

## Example 1: Simple Response
\`\`\`
{{#if response.data.body}}
RESPONSE: {{response.data.body}}
STATUS: SUCCESS
{{else}}
STATUS: NO_RESPONSE
{{/if}}
\`\`\`

## Example 2: Object Response with Boolean
\`\`\`
{{#if response.data.body}}
{{#if response.data.body.id}}
ID: {{response.data.body.id}}
{{/if}}
{{#if response.data.body.name}}
NAME: {{response.data.body.name}}
{{/if}}
ACTIVE: {{response.data.body.active}}
COMPLETED: {{response.data.body.completed}}
{{else}}
STATUS: NO_DATA
{{/if}}
\`\`\`

## Example 3: Array Response
\`\`\`
{{#if response.data.body}}
{{#each response.data.body}}
ITEM_{{@index}}:
{{#if this.id}}
- ID: {{this.id}}
{{/if}}
{{#if this.name}}
- NAME: {{this.name}}
{{/if}}
{{/each}}
{{else}}
STATUS: NO_ITEMS
{{/if}}
\`\`\`

# Your Task:
Analyze the tool context and create a response template that:
1. Extracts the most relevant data fields for agent decision-making
2. Uses consistent field naming (UPPERCASE labels)
3. Handles arrays and objects appropriately
4. Provides fallbacks for missing data
5. Maintains a structured, parseable format

**CRITICAL CONSTRAINTS**:
- NEVER use (eq), (gt), (lt), (ne), or any custom helpers - they will break the template
- Use ONLY {{#if}}, {{#each}}, {{json}}, {{@key}}, {{this}}, {{@index}}
- For string comparisons, do NOT compare - just check if the field exists
- Structure conditions using nested \`{{#if}}\` blocks
- Always provide fallback values for missing data
- Keep templates simple and direct
- **BOOLEAN FIELDS**: Use direct output \`{{field}}\` not \`{{#if field}}\` (false is falsy!)

**FORBIDDEN**: Do NOT use any parentheses with helpers like (eq response.data.body "text")
**ALLOWED**: Only use {{#if response.data.body}} to check existence
**BOOLEAN HANDLING**: Use \`COMPLETED: {{response.data.body.completed}}\` not \`{{#if response.data.body.completed}}\`

Return ONLY the Handlebars template code, no explanations.`,
    variables: ["toolName", "toolDescription", "method", "url", "parameters", "responses"],
    category: "template",
    version: "1.0.0",
    createdAt: /* @__PURE__ */ new Date(),
    updatedAt: /* @__PURE__ */ new Date()
  });
}
var PromptService = {
  /**
   * Get a prompt template by ID
   */
  getPrompt(id) {
    return prompts.get(id) || null;
  },
  /**
   * Get all prompts
   */
  getAllPrompts() {
    return Array.from(prompts.values());
  },
  /**
   * Get prompts by category
   */
  getPromptsByCategory(category) {
    return Array.from(prompts.values()).filter((prompt) => prompt.category === category);
  },
  /**
   * Render a prompt with variables
   */
  renderPrompt(id, variables = {}) {
    const prompt = this.getPrompt(id);
    if (!prompt)
      return null;
    let content = prompt.content;
    for (const [key, value] of Object.entries(variables)) {
      const pattern = new RegExp(`{{${key}}}`, "g");
      content = content.replace(pattern, String(value));
    }
    content = content.replace(
      /{{#if\s+(\w+)}}([\s\S]*?)(?:{{else}}([\s\S]*?))?{{\/if}}/g,
      (match, variable, ifContent, elseContent = "") => {
        const value = variables[variable];
        return value ? ifContent : elseContent;
      }
    );
    return content;
  },
  /**
   * Add or update a prompt template
   */
  setPrompt(prompt) {
    prompts.set(prompt.id, {
      ...prompt,
      updatedAt: /* @__PURE__ */ new Date()
    });
  },
  /**
   * Delete a prompt template
   */
  deletePrompt(id) {
    return prompts.delete(id);
  },
  /**
   * Check if a prompt exists
   */
  hasPrompt(id) {
    return prompts.has(id);
  },
  /**
   * Get prompt variables
   */
  getPromptVariables(id) {
    const prompt = this.getPrompt(id);
    return prompt ? prompt.variables : [];
  }
};

// src/services/ai.service.ts
var AI_MODELS = {
  openai: {
    chat: "gpt-4o",
    completion: "gpt-4o",
    advanced: "o1-mini"
    // Use o1-mini for reasoning support
  },
  anthropic: {
    chat: "claude-3-5-sonnet-20241022",
    completion: "claude-3-haiku-20240307",
    advanced: "claude-3-opus-20240229"
  }
};
function getAIModel(provider = "openai", modelType = "chat") {
  const providerModels = AI_MODELS[provider];
  const modelName = providerModels[modelType] || providerModels.chat;
  switch (provider) {
    case "anthropic":
      return (0, import_anthropic.anthropic)(modelName);
    case "openai":
    default:
      return import_openai.openai.responses(modelName);
  }
}
function getAPIKey(provider) {
  const keys = {
    openai: process.env.OPENAI_API_KEY,
    anthropic: process.env.ANTHROPIC_API_KEY
  };
  const key = keys[provider];
  if (!key) {
    throw new Error(`API key not configured for provider: ${provider}`);
  }
  const placeholders = {
    openai: ["sk-your-openai-api-key", "your-openai-api-key", "sk-proj-your-key-here"],
    anthropic: ["sk-ant-your-anthropic-api-key", "your-anthropic-api-key"]
  };
  if (placeholders[provider].includes(key)) {
    throw new Error(`Please replace the placeholder API key for ${provider} with your actual API key`);
  }
  if (provider === "openai" && !key.startsWith("sk-")) {
    throw new Error(`OpenAI API key should start with 'sk-'`);
  }
  if (provider === "anthropic" && !key.startsWith("sk-ant-")) {
    throw new Error(`Anthropic API key should start with 'sk-ant-'`);
  }
  return key;
}
async function streamChat(prisma2, request) {
  const { messages, config: config2 = {}, tenantId, userId } = request;
  const { provider = "openai", ...modelConfig } = config2;
  const lastMessage = messages[messages.length - 1];
  const lastMessageContent = typeof lastMessage?.content === "string" ? lastMessage.content.substring(0, 100) + "..." : Array.isArray(lastMessage?.content) ? `[${lastMessage.content.length} parts]` : "Unknown format";
  console.log(`\u{1F916} AI Chat Request:`, {
    provider,
    tenantId,
    userId,
    messageCount: messages.length,
    lastMessage: lastMessageContent,
    config: modelConfig
  });
  const apiKey = getAPIKey(provider);
  console.log(`\u{1F511} API Key validation: ${provider} key ${apiKey ? "present" : "missing"}`);
  const model = getAIModel(provider, "chat");
  console.log(`\u{1F3AF} Using model: ${provider} with model type "chat"`);
  const coreMessages = messages;
  console.log(`\u{1F4AC} Processing ${coreMessages.length} messages`);
  const streamConfig = {
    model,
    messages: coreMessages,
    temperature: modelConfig.temperature ?? 0.7,
    maxOutputTokens: modelConfig.maxTokens,
    topP: modelConfig.topP,
    system: "You are a helpful AI assistant integrated into the AgentBridge platform."
  };
  console.log(`\u2699\uFE0F Stream config:`, {
    modelName: model,
    temperature: streamConfig.temperature,
    maxOutputTokens: streamConfig.maxOutputTokens,
    topP: streamConfig.topP
  });
  try {
    console.log(`\u{1F504} Calling streamText with ${provider}...`);
    const streamPromise = (0, import_ai.streamText)(streamConfig);
    const timeoutPromise = new Promise((resolve, reject) => {
      setTimeout(() => reject(new Error("StreamText call timed out after 30 seconds")), 3e4);
    });
    const result = await Promise.race([streamPromise, timeoutPromise]);
    console.log(`\u2705 Stream created successfully`);
    console.log(`\u{1F50D} Stream result properties:`, {
      hasTextStream: !!result.textStream,
      hasFullStream: !!result.fullStream,
      hasToTextStreamResponse: typeof result.toTextStreamResponse === "function"
    });
    try {
      const textStreamResponse = result.toTextStreamResponse();
      console.log(`\u{1F50D} Text stream response created, status: ${textStreamResponse.status}`);
    } catch (streamError) {
      console.error(`\u274C Error creating text stream response:`, streamError);
    }
    return result;
  } catch (error) {
    console.error(`\u274C Stream creation failed:`, error);
    if (error instanceof Error) {
      console.error(`\u{1F50D} Error details:`);
      console.error(`  Message: ${error.message}`);
      console.error(`  Name: ${error.name}`);
      console.error(`  Stack: ${error.stack}`);
    }
    console.error(`\u{1F50D} Full error object:`, JSON.stringify(error, null, 2));
    if (error && typeof error === "object") {
      const errorObj = error;
      const statusCode = errorObj.status || errorObj.statusCode || errorObj.code;
      const message = errorObj.message || errorObj.error?.message || String(error);
      console.error(`\u{1F50D} Extracted status: ${statusCode}, message: ${message}`);
      if (statusCode === 429 || message.includes("429") || message.includes("quota") || message.includes("exceeded")) {
        const quotaError = `\u274C QUOTA EXCEEDED: You've exceeded your OpenAI quota. Please check your billing at https://platform.openai.com/account/billing`;
        console.error(quotaError);
        throw new Error(quotaError);
      }
      if (statusCode === 401 || message.includes("401") || message.includes("Unauthorized")) {
        const authError = `\u274C INVALID API KEY: Please check your OpenAI API key`;
        console.error(authError);
        throw new Error(authError);
      }
      if (message.includes("rate limit")) {
        const rateLimitError = `\u274C RATE LIMIT: Too many requests to ${provider}. Please try again later.`;
        console.error(rateLimitError);
        throw new Error(rateLimitError);
      }
    }
    throw error;
  }
}
async function generateCompletion(prisma2, request) {
  const { prompt, config: config2 = {} } = request;
  const { tenantId, userId } = request;
  const { provider = "openai", ...modelConfig } = config2;
  getAPIKey(provider);
  const model = getAIModel(provider, "completion");
  const result = await (0, import_ai.generateText)({
    model,
    prompt,
    temperature: modelConfig.temperature ?? 0.7,
    maxOutputTokens: modelConfig.maxTokens,
    topP: modelConfig.topP
  });
  return result;
}
async function streamCompletion(prisma2, request) {
  const { prompt, config: config2 = {}, enableReasoning = false } = request;
  const { tenantId, userId } = request;
  const { provider = "openai", ...modelConfig } = config2;
  getAPIKey(provider);
  const model = getAIModel(provider, enableReasoning ? "advanced" : "completion");
  const result = (0, import_ai.streamText)({
    model,
    prompt,
    temperature: modelConfig.temperature ?? 0.7,
    maxOutputTokens: modelConfig.maxTokens,
    topP: modelConfig.topP
  });
  return result;
}
async function generateStructuredObject(prisma2, request) {
  const { prompt, schema, config: config2 = {} } = request;
  const { provider = "openai", ...modelConfig } = config2;
  getAPIKey(provider);
  const model = getAIModel(provider, "chat");
  const result = await (0, import_ai.generateObject)({
    model,
    output: "object",
    // Explicitly specify output mode
    schema,
    prompt,
    temperature: modelConfig.temperature ?? 0.7,
    maxOutputTokens: modelConfig.maxTokens ?? 4096,
    // Ensure enough tokens for complex responses
    topP: modelConfig.topP,
    maxRetries: 2
    // Retry on failures
  });
  return result;
}
function getAvailableModels(provider) {
  return AI_MODELS[provider] || {};
}
function isProviderConfigured(provider) {
  try {
    getAPIKey(provider);
    return true;
  } catch {
    return false;
  }
}
function getConfiguredProviders() {
  const providers = ["openai", "anthropic"];
  return providers.filter(isProviderConfigured);
}
async function streamAIAgentChat(prisma2, request) {
  console.log("\u{1F4E5} [AI SERVICE] streamAIAgentChat called with request:", {
    hasServerId: !!request.serverId,
    serverId: request.serverId,
    prompt: request.prompt?.substring(0, 50) + "...",
    tenantId: request.tenantId,
    hasPrisma: !!prisma2,
    prismaType: typeof prisma2
  });
  const { conversationHistory = "", hasShownDesign = false, serverId, ...baseRequest } = request;
  const { config: config2 = {}, tenantId } = baseRequest;
  const { userId } = baseRequest;
  const { provider = "openai", ...modelConfig } = config2;
  const systemPrompt = PromptService.renderPrompt("ai-agent-system", {
    conversationHistory,
    hasShownDesign: hasShownDesign ? "Note: You've already shown a tool design in this conversation. Check if the user is responding to it." : ""
  });
  if (!systemPrompt) {
    throw new Error("AI Agent system prompt not found");
  }
  getAPIKey(provider);
  const model = getAIModel(provider, "chat");
  const db = prisma2;
  const tools = {
    // Web search tool - always available
    web_search_preview: import_openai.openai.tools.webSearchPreview({
      searchContextSize: "high",
      userLocation: {
        type: "approximate",
        city: "San Francisco",
        region: "California"
      }
    }),
    // MCP tool creation - only if serverId is provided
    ...serverId ? {
      createMCPTool: (0, import_ai.tool)({
        description: "Create an MCP tool with the provided specification. Only call this when the user has explicitly confirmed they want to create the tool.",
        inputSchema: import_zod.z.object({
          tool: import_zod.z.object({
            name: import_zod.z.string().describe("The name of the tool"),
            description: import_zod.z.string().describe("Clear description of what this tool does"),
            method: import_zod.z.enum(["GET", "POST", "PUT", "DELETE", "PATCH"]).describe("HTTP method"),
            url: import_zod.z.string().describe("The API endpoint URL"),
            parameters: import_zod.z.object({}).passthrough().default({}).describe("Parameter definitions object"),
            requestParameterOverrides: import_zod.z.object({}).passthrough().optional().describe("Direct HTTP request overrides (for GraphQL)"),
            responses: import_zod.z.object({}).passthrough().default({}).optional().describe("Response definitions object")
          }),
          auth: import_zod.z.object({
            type: import_zod.z.enum(["oauth", "apikey", "none"]).describe("Authentication type"),
            oauth: import_zod.z.object({
              name: import_zod.z.string().describe("OAuth provider name"),
              authorizationUrl: import_zod.z.string().describe("OAuth authorization URL"),
              tokenUrl: import_zod.z.string().describe("OAuth token URL"),
              scopes: import_zod.z.array(import_zod.z.string()).describe("Required OAuth scopes"),
              clientId: import_zod.z.string().optional().describe("OAuth client ID"),
              clientSecret: import_zod.z.string().optional().describe("OAuth client secret")
            }).optional(),
            apikey: import_zod.z.object({
              name: import_zod.z.string().describe("API key provider name"),
              keyName: import_zod.z.string().describe("Header or query parameter name for the API key"),
              keyIn: import_zod.z.enum(["header", "query", "path", "body"]).describe("Where to send the API key")
            }).optional()
          }).optional(),
          service: import_zod.z.string().describe("The service name (e.g., 'github', 'slack')")
        }),
        execute: async ({ tool: tool2, auth, service }) => {
          console.log("\u{1F680} [TOOL EXECUTION START] Creating MCP tool in backend");
          console.log("\u{1F4CB} Tool Details:", JSON.stringify({ serverId, tenantId, tool: tool2, auth, service }, null, 2));
          console.log("\u{1F50D} [DEBUG] Checking db availability:", !!db, typeof db);
          console.log("\u{1F50D} [DEBUG] Checking tenantId:", tenantId);
          console.log("\u{1F50D} [DEBUG] Checking serverId:", serverId);
          try {
            console.log("\u{1F4E6} Importing required modules...");
            const { createTool: createTool3 } = await Promise.resolve().then(() => (init_servers_service(), servers_service_exports));
            const { generateRequestOverrides: generateRequestOverrides2 } = await Promise.resolve().then(() => (init_generateRequestOverrides(), generateRequestOverrides_exports));
            console.log("\u2705 Modules imported successfully");
            let oAuthProviderId;
            let apiKeyProviderId;
            if (auth && auth.type !== "none") {
              console.log("\u{1F510} Creating authentication provider...", auth.type);
              if (auth.type === "oauth" && auth.oauth) {
                console.log("\u{1F511} Creating OAuth provider:", auth.oauth.name);
                const oauthProvider = await db.oAuthProvider.create({
                  data: {
                    name: auth.oauth.name,
                    clientId: auth.oauth.clientId || "",
                    clientSecret: auth.oauth.clientSecret || "",
                    authorizationUrl: auth.oauth.authorizationUrl,
                    tokenUrl: auth.oauth.tokenUrl,
                    scopes: auth.oauth.scopes || [],
                    tenantId
                  }
                });
                oAuthProviderId = oauthProvider.id;
                console.log("\u2705 OAuth provider created with ID:", oAuthProviderId);
              } else if (auth.type === "apikey" && auth.apikey) {
                console.log("\u{1F511} API Key provider configured:", auth.apikey.name, "for", auth.apikey.keyIn);
                console.log(
                  "\u2705 API Key will be handled automatically during execution - not added to tool parameters"
                );
              }
            } else {
              console.log("\u{1F510} No authentication provider specified or auth type is 'none'");
            }
            let requestParameterOverrides;
            if (tool2.requestParameterOverrides) {
              console.log(
                "\u{1F4DD} Using provided request parameter overrides:",
                JSON.stringify(tool2.requestParameterOverrides, null, 2)
              );
              requestParameterOverrides = tool2.requestParameterOverrides;
            } else {
              console.log("\u{1F527} Generating request parameter overrides...");
              const httpOverrides = generateRequestOverrides2(tool2.parameters || {});
              console.log("\u{1F4DD} Generated HTTP overrides:", JSON.stringify(httpOverrides, null, 2));
              requestParameterOverrides = httpOverrides;
            }
            if (auth && auth.type === "apikey" && auth.apikey) {
              const template = `{{${auth.apikey.keyName}}}`;
              const isHttpFormat = "headers" in requestParameterOverrides || "query" in requestParameterOverrides;
              if (isHttpFormat) {
                const httpOverrides = requestParameterOverrides;
                switch (auth.apikey.keyIn) {
                  case "header":
                    if (!httpOverrides.headers) {
                      httpOverrides.headers = {};
                    }
                    httpOverrides.headers[auth.apikey.keyName] = template;
                    break;
                  case "query":
                    if (!httpOverrides.query) {
                      httpOverrides.query = {};
                    }
                    httpOverrides.query[auth.apikey.keyName] = template;
                    break;
                }
                requestParameterOverrides = httpOverrides;
              }
              console.log("\u{1F511} Added API key to request overrides:", auth.apikey.keyName, "in", auth.apikey.keyIn);
            }
            console.log(
              "\u{1F4DD} Final request parameter overrides:",
              JSON.stringify(requestParameterOverrides, null, 2)
            );
            const convertedParameters = {};
            if (tool2.parameters) {
              for (const [key, param] of Object.entries(tool2.parameters)) {
                convertedParameters[key] = param;
              }
            }
            const toolData = {
              name: tool2.name,
              description: tool2.description,
              method: tool2.method,
              url: tool2.url,
              parameters: convertedParameters,
              requestParameterOverrides,
              // Type assertion needed for now
              oAuthProviderId,
              // Only set for OAuth
              apiKeyProviderId: void 0
              // API keys are now embedded in parameters
            };
            console.log("\u{1F528} Calling createTool with data:", JSON.stringify(toolData, null, 2));
            console.log("\u{1F511} Parameters: db=", !!db, typeof db, "serverId=", serverId, "tenantId=", tenantId);
            if (!db) {
              throw new Error("Prisma client is not available in tool execution context");
            }
            const createdTool = await createTool3(db, serverId, tenantId, toolData);
            console.log("\u2705 Tool created successfully!");
            console.log("\u{1F194} Created tool:", JSON.stringify(createdTool, null, 2));
            let successMessage = `Successfully created tool "${tool2.name}"!`;
            if (oAuthProviderId) {
              successMessage += ` OAuth authentication provider has been configured.`;
            } else if (auth && auth.type === "apikey") {
              successMessage += ` API Key parameter has been added to the tool.`;
            }
            successMessage += ` The tool is now available in your workflow canvas.`;
            return {
              success: true,
              message: successMessage,
              toolId: createdTool.id,
              toolName: createdTool.name,
              authProviderId: oAuthProviderId,
              authProviderType: oAuthProviderId ? "oauth" : auth?.type === "apikey" ? "apikey" : void 0
            };
          } catch (error) {
            console.error("\u274C [TOOL CREATION ERROR] Failed to create tool in backend");
            console.error("\u{1F50D} Error details:", error);
            console.error("\u{1F4CA} Stack trace:", error instanceof Error ? error.stack : "No stack trace");
            if (error instanceof Error) {
              console.error("\u{1F4CC} Error name:", error.name);
              console.error("\u{1F4CC} Error message:", error.message);
            }
            return {
              success: false,
              message: `Failed to create tool: ${error instanceof Error ? error.message : "Unknown error"}`,
              error: error instanceof Error ? error.message : "Unknown error"
            };
          }
        }
      })
    } : {}
  };
  const contextSection = conversationHistory ? `

Previous conversation:
${conversationHistory}

` : "";
  const fullPrompt = `${systemPrompt}${contextSection}Current user message: ${baseRequest.prompt}`;
  const streamConfig = {
    model,
    prompt: fullPrompt,
    temperature: modelConfig.temperature ?? 0.7,
    maxOutputTokens: modelConfig.maxTokens,
    topP: modelConfig.topP,
    onError: (error) => {
      console.error("Stream error in AI service:", error);
    }
  };
  console.log("\u{1F6E0}\uFE0F [AI SERVICE] Tools are defined, adding to stream config");
  console.log("\u{1F527} [AI SERVICE] Available tools:", Object.keys(tools));
  streamConfig.tools = tools;
  streamConfig.toolChoice = "auto";
  console.log("\u{1F680} [AI SERVICE] Starting streamText with config:", {
    model: streamConfig.model,
    hasTools: !!streamConfig.tools,
    toolChoice: streamConfig.toolChoice,
    temperature: streamConfig.temperature
  });
  return (0, import_ai.streamText)(streamConfig);
}
async function generateHandlebarsTemplate(prisma2, toolContext, config2) {
  const templatePrompt = PromptService.renderPrompt("handlebars-template-generation", toolContext);
  if (!templatePrompt) {
    throw new Error("Handlebars template generation prompt not found");
  }
  return generateCompletion(prisma2, {
    prompt: templatePrompt,
    config: config2 || { temperature: 0.3, maxTokens: 1e3 },
    tenantId: "system",
    // Internal system operation
    userId: "system"
  });
}

// src/controllers/ai.controller.ts
function convertJsonSchemaToZod(jsonSchema) {
  if (!jsonSchema || typeof jsonSchema !== "object") {
    throw new Error("Invalid JSON schema provided");
  }
  if (jsonSchema.type === "object" && jsonSchema.properties) {
    const zodProperties = {};
    for (const [key, prop] of Object.entries(jsonSchema.properties)) {
      zodProperties[key] = convertPropertyToZod(prop);
    }
    let objectSchema = import_zod2.z.object(zodProperties);
    if (Array.isArray(jsonSchema.required)) {
      const requiredFields = new Set(jsonSchema.required);
      const partialFields = {};
      for (const [key, zodType] of Object.entries(zodProperties)) {
        if (!requiredFields.has(key)) {
          partialFields[key] = zodType.optional();
        } else {
          partialFields[key] = zodType;
        }
      }
      objectSchema = import_zod2.z.object(partialFields);
    }
    return objectSchema;
  }
  throw new Error("Unsupported schema type - only object schemas are supported");
}
function convertPropertyToZod(prop) {
  if (!prop || typeof prop !== "object") {
    return import_zod2.z.string();
  }
  switch (prop.type) {
    case "string":
      let stringSchema = import_zod2.z.string();
      if (prop.minLength)
        stringSchema = stringSchema.min(prop.minLength);
      if (prop.maxLength)
        stringSchema = stringSchema.max(prop.maxLength);
      return stringSchema;
    case "number":
      let numberSchema = import_zod2.z.number();
      if (prop.minimum !== void 0)
        numberSchema = numberSchema.min(prop.minimum);
      if (prop.maximum !== void 0)
        numberSchema = numberSchema.max(prop.maximum);
      return numberSchema;
    case "integer":
      let intSchema = import_zod2.z.number().int();
      if (prop.minimum !== void 0)
        intSchema = intSchema.min(prop.minimum);
      if (prop.maximum !== void 0)
        intSchema = intSchema.max(prop.maximum);
      return intSchema;
    case "boolean":
      return import_zod2.z.boolean();
    case "array":
      const itemSchema = prop.items ? convertPropertyToZod(prop.items) : import_zod2.z.any();
      return import_zod2.z.array(itemSchema);
    case "object":
      if (prop.properties) {
        const nestedProps = {};
        for (const [key, nestedProp] of Object.entries(prop.properties)) {
          nestedProps[key] = convertPropertyToZod(nestedProp);
        }
        return import_zod2.z.object(nestedProps);
      }
      return import_zod2.z.record(import_zod2.z.unknown());
    default:
      return import_zod2.z.unknown();
  }
}
var chatRequestSchema = import_zod2.z.object({
  messages: import_zod2.z.array(
    import_zod2.z.object({
      id: import_zod2.z.string(),
      role: import_zod2.z.enum(["user", "assistant", "system"]),
      content: import_zod2.z.string()
    })
  ),
  config: import_zod2.z.object({
    provider: import_zod2.z.enum(["openai", "anthropic"]).optional(),
    model: import_zod2.z.string().optional(),
    temperature: import_zod2.z.number().min(0).max(2).optional(),
    maxTokens: import_zod2.z.number().positive().optional(),
    topP: import_zod2.z.number().min(0).max(1).optional()
  }).optional()
});
var completionRequestSchema = import_zod2.z.object({
  prompt: import_zod2.z.string().min(1),
  config: import_zod2.z.object({
    provider: import_zod2.z.enum(["openai", "anthropic"]).optional(),
    model: import_zod2.z.string().optional(),
    temperature: import_zod2.z.number().min(0).max(2).optional(),
    maxTokens: import_zod2.z.number().positive().optional(),
    topP: import_zod2.z.number().min(0).max(1).optional()
  }).optional(),
  enableWebSearch: import_zod2.z.boolean().optional()
});
var streamCompletionRequestSchema = completionRequestSchema.extend({
  enableReasoning: import_zod2.z.boolean().optional()
});
var agentChatRequestSchema = completionRequestSchema.extend({
  conversationHistory: import_zod2.z.string().optional(),
  hasShownDesign: import_zod2.z.boolean().optional(),
  serverId: import_zod2.z.string().optional()
});
var templateRequestSchema = import_zod2.z.object({
  tool: import_zod2.z.object({
    name: import_zod2.z.string(),
    description: import_zod2.z.string(),
    method: import_zod2.z.string(),
    url: import_zod2.z.string(),
    parameters: import_zod2.z.record(import_zod2.z.unknown()).optional().nullable(),
    requestParameterOverrides: import_zod2.z.record(import_zod2.z.unknown()).optional().nullable(),
    responses: import_zod2.z.record(import_zod2.z.unknown()).optional().nullable()
  }),
  config: import_zod2.z.object({
    provider: import_zod2.z.enum(["openai", "anthropic"]).optional(),
    model: import_zod2.z.string().optional(),
    temperature: import_zod2.z.number().min(0).max(2).optional(),
    maxTokens: import_zod2.z.number().positive().optional(),
    topP: import_zod2.z.number().min(0).max(1).optional()
  }).optional()
});
async function chatStream(req, res) {
  try {
    const body = chatRequestSchema.parse(req.body);
    const authReq = req;
    const admin = authReq.admin;
    const user = authReq.user;
    const tenantId = admin?.tenantId || user?.tenantId;
    const userId = admin?.id || user?.id;
    if (!tenantId) {
      return res.status(400).json({ error: "Tenant ID is required" });
    }
    res.setHeader("Content-Type", "text/event-stream");
    res.setHeader("Cache-Control", "no-cache");
    res.setHeader("Connection", "keep-alive");
    res.setHeader("X-Accel-Buffering", "no");
    console.log(`\u{1F680} Starting chat stream for tenant: ${tenantId}, user: ${userId}`);
    console.log(`\u{1F4DD} Request body:`, {
      messageCount: body.messages.length,
      config: body.config,
      firstMessage: body.messages[0]?.content.substring(0, 100) + "..."
    });
    const result = await streamChat(req.db, {
      messages: body.messages,
      config: body.config,
      tenantId,
      userId
    });
    console.log(`\u{1F4E1} Stream result created, converting to text stream response`);
    const response = result.toTextStreamResponse();
    console.log(`\u{1F4E1} Stream response headers:`, Object.fromEntries(response.headers.entries()));
    console.log(`\u{1F4E4} Starting to stream response to client`);
    if (response.body) {
      const reader = response.body.getReader();
      let chunkCount = 0;
      let totalBytes = 0;
      try {
        while (true) {
          const { done, value } = await reader.read();
          if (done) {
            console.log(`\u{1F3C1} Stream finished after ${chunkCount} chunks, ${totalBytes} total bytes`);
            break;
          }
          chunkCount++;
          totalBytes += value.length;
          const chunk = new TextDecoder().decode(value);
          console.log(`\u{1F4E6} Chunk ${chunkCount}: ${value.length} bytes`);
          console.log(`\u{1F4DD} Chunk content (first 200 chars): ${chunk.substring(0, 200)}...`);
          res.write(value);
        }
      } finally {
        reader.releaseLock();
      }
    } else {
      console.log(`\u274C No response body from stream`);
    }
    console.log(`\u2705 Stream completed successfully`);
    res.end();
  } catch (error) {
    console.error("Chat stream error:", error);
    if (!res.headersSent) {
      res.status(500).json({
        error: "Failed to process chat request",
        message: error instanceof Error ? error.message : "Unknown error"
      });
    } else {
      res.write(`data: ${JSON.stringify({ error: "Stream error occurred" })}

`);
      res.end();
    }
  }
}
async function generateCompletionHandler(req, res) {
  try {
    const body = completionRequestSchema.parse(req.body);
    const authReq = req;
    const admin = authReq.admin;
    const user = authReq.user;
    const tenantId = admin?.tenantId || user?.tenantId;
    const userId = admin?.id || user?.id;
    if (!tenantId) {
      return res.status(400).json({ error: "Tenant ID is required" });
    }
    const result = await generateCompletion(req.db, {
      prompt: body.prompt,
      config: body.config,
      tenantId,
      userId,
      enableWebSearch: body.enableWebSearch
    });
    res.json({
      text: result.text,
      usage: result.usage,
      finishReason: result.finishReason
    });
  } catch (error) {
    console.error("Completion error:", error);
    if (error instanceof import_zod2.z.ZodError) {
      return res.status(400).json({
        error: "Invalid request",
        details: error.errors
      });
    }
    res.status(500).json({
      error: "Failed to generate completion",
      message: error instanceof Error ? error.message : "Unknown error"
    });
  }
}
async function streamCompletionHandler(req, res) {
  try {
    const body = streamCompletionRequestSchema.parse(req.body);
    const authReq = req;
    const admin = authReq.admin;
    const user = authReq.user;
    const tenantId = admin?.tenantId || user?.tenantId;
    const userId = admin?.id || user?.id;
    if (!tenantId) {
      return res.status(400).json({ error: "Tenant ID is required" });
    }
    res.setHeader("Content-Type", "text/event-stream");
    res.setHeader("Cache-Control", "no-cache");
    res.setHeader("Connection", "keep-alive");
    res.setHeader("X-Accel-Buffering", "no");
    console.log(`\u{1F680} Starting completion stream for tenant: ${tenantId}`);
    const result = await streamCompletion(req.db, {
      prompt: body.prompt,
      config: body.config,
      tenantId,
      userId,
      enableWebSearch: body.enableWebSearch,
      enableReasoning: body.enableReasoning
    });
    const response = result.toUIMessageStreamResponse({
      sendReasoning: body.enableReasoning || false,
      headers: {
        "Content-Type": "text/plain; charset=utf-8"
      }
    });
    if (response.body) {
      const reader = response.body.getReader();
      try {
        while (true) {
          const { done, value } = await reader.read();
          if (done)
            break;
          res.write(value);
        }
      } finally {
        reader.releaseLock();
      }
    }
    res.end();
  } catch (error) {
    console.error("Stream completion error:", error);
    if (!res.headersSent) {
      res.status(500).json({
        error: "Failed to stream completion",
        message: error instanceof Error ? error.message : "Unknown error"
      });
    } else {
      res.write(`data: ${JSON.stringify({ error: "Stream error occurred" })}

`);
      res.end();
    }
  }
}
async function generateObjectHandler(req, res) {
  try {
    const { prompt, schema: schemaDefinition, config: config2 } = req.body;
    const authReq = req;
    const admin = authReq.admin;
    const user = authReq.user;
    const tenantId = admin?.tenantId || user?.tenantId;
    const userId = admin?.id || user?.id;
    if (!tenantId) {
      return res.status(400).json({ error: "Tenant ID is required" });
    }
    if (!prompt || !schemaDefinition) {
      return res.status(400).json({
        error: "Prompt and schema are required"
      });
    }
    console.log("\u{1F504} Converting JSON schema to Zod:", JSON.stringify(schemaDefinition, null, 2));
    let schema;
    try {
      schema = convertJsonSchemaToZod(schemaDefinition);
      console.log("\u2705 Schema conversion successful");
    } catch (error) {
      console.error("\u274C Schema conversion error:", error);
      return res.status(400).json({
        error: "Invalid schema definition",
        details: error instanceof Error ? error.message : "Unknown error"
      });
    }
    const result = await generateStructuredObject(req.db, {
      prompt,
      schema,
      config: config2,
      tenantId,
      userId
    });
    res.json({
      object: result.object,
      usage: result.usage,
      finishReason: result.finishReason
    });
  } catch (error) {
    console.error("Generate object error:", error);
    res.status(500).json({
      error: "Failed to generate object",
      message: error instanceof Error ? error.message : "Unknown error"
    });
  }
}
async function streamAIAgentChatHandler(req, res) {
  try {
    const body = agentChatRequestSchema.parse(req.body);
    const authReq = req;
    const admin = authReq.admin;
    const user = authReq.user;
    const tenantId = admin?.tenantId || user?.tenantId;
    const userId = admin?.id || user?.id;
    if (!tenantId) {
      return res.status(400).json({ error: "Tenant ID is required" });
    }
    res.setHeader("Content-Type", "text/event-stream");
    res.setHeader("Cache-Control", "no-cache");
    res.setHeader("Connection", "keep-alive");
    res.setHeader("X-Accel-Buffering", "no");
    const result = await streamAIAgentChat(req.db, {
      prompt: body.prompt,
      conversationHistory: body.conversationHistory,
      hasShownDesign: body.hasShownDesign,
      serverId: body.serverId,
      config: body.config,
      tenantId,
      userId
    });
    const response = result.toUIMessageStreamResponse();
    if (response.body) {
      const reader = response.body.getReader();
      try {
        while (true) {
          const { done, value } = await reader.read();
          if (done)
            break;
          res.write(value);
        }
      } finally {
        reader.releaseLock();
      }
    }
    res.end();
  } catch (error) {
    console.error("AI agent chat stream error:", error);
    console.error("Error details:", {
      name: error instanceof Error ? error.name : "Unknown",
      message: error instanceof Error ? error.message : "Unknown error",
      stack: error instanceof Error ? error.stack : void 0
    });
    if (!res.headersSent) {
      res.status(500).json({
        error: "Failed to process AI agent chat request",
        message: error instanceof Error ? error.message : "Unknown error"
      });
    } else {
      const errorData = JSON.stringify({
        type: "error",
        error: error instanceof Error ? error.message : "Stream error occurred"
      });
      res.write(`${errorData}
`);
      res.end();
    }
  }
}
async function generateTemplateHandler(req, res) {
  try {
    const body = templateRequestSchema.parse(req.body);
    const authReq = req;
    const admin = authReq.admin;
    const user = authReq.user;
    const tenantId = admin?.tenantId || user?.tenantId;
    if (!tenantId) {
      return res.status(400).json({ error: "Tenant ID is required" });
    }
    const { tool: tool2, config: config2 } = body;
    const parametersToUse = tool2.requestParameterOverrides || tool2.parameters || {};
    const toolContext = {
      toolName: tool2.name,
      toolDescription: tool2.description,
      method: tool2.method,
      url: tool2.url,
      parameters: JSON.stringify(parametersToUse, null, 2),
      responses: JSON.stringify(tool2.responses || {}, null, 2)
    };
    const result = await generateHandlebarsTemplate(req.db, toolContext, config2);
    let template = result.text.trim();
    if (template.startsWith("```") && template.endsWith("```")) {
      const lines = template.split("\n");
      if (lines.length > 2) {
        template = lines.slice(1, -1).join("\n");
      }
    }
    res.json({
      template,
      usage: result.usage,
      finishReason: result.finishReason
    });
  } catch (error) {
    console.error("Template generation error:", error);
    if (error instanceof import_zod2.z.ZodError) {
      return res.status(400).json({
        error: "Invalid request",
        details: error.errors
      });
    }
    res.status(500).json({
      error: "Failed to generate template",
      message: error instanceof Error ? error.message : "Unknown error"
    });
  }
}
async function getAIConfig(req, res) {
  try {
    const providers = getConfiguredProviders();
    const config2 = {
      providers: providers.map((provider) => ({
        id: provider,
        name: provider.charAt(0).toUpperCase() + provider.slice(1),
        models: getAvailableModels(provider),
        configured: true
      })),
      defaultProvider: providers[0] || null
    };
    res.json(config2);
  } catch (error) {
    console.error("Get AI config error:", error);
    res.status(500).json({
      error: "Failed to get AI configuration"
    });
  }
}

// src/middlewares/rate-limit.middleware.ts
var requestCounts = /* @__PURE__ */ new Map();
function rateLimitMiddleware(options) {
  const { windowMs, max, message = "Too many requests, please try again later" } = options;
  return (req, res, next) => {
    const authReq = req;
    const admin = authReq.admin;
    const user = authReq.user;
    const tenantId = admin?.tenantId || user?.tenantId;
    const userId = admin?.id || user?.id;
    const clientIp = req.ip || req.socket.remoteAddress || "unknown";
    const key = `${tenantId || "no-tenant"}_${userId || clientIp}`;
    const now = Date.now();
    let rateLimit = requestCounts.get(key);
    if (!rateLimit || rateLimit.resetTime < now) {
      rateLimit = { count: 0, resetTime: now + windowMs };
      requestCounts.set(key, rateLimit);
    }
    rateLimit.count++;
    if (rateLimit.count > max) {
      res.status(429).json({
        error: "Rate limit exceeded",
        message,
        retryAfter: Math.ceil((rateLimit.resetTime - now) / 1e3)
      });
      return;
    }
    res.setHeader("X-RateLimit-Limit", max.toString());
    res.setHeader("X-RateLimit-Remaining", (max - rateLimit.count).toString());
    res.setHeader("X-RateLimit-Reset", new Date(rateLimit.resetTime).toISOString());
    next();
  };
}
setInterval(
  () => {
    const now = Date.now();
    for (const [key, data] of requestCounts.entries()) {
      if (data.resetTime < now) {
        requestCounts.delete(key);
      }
    }
  },
  5 * 60 * 1e3
);

// src/routes/ai.routes.ts
var router2 = (0, import_express2.Router)();
router2.use(adminSessionMiddleware);
var aiRateLimit = rateLimitMiddleware({
  windowMs: 60 * 1e3,
  // 1 minute
  max: 20,
  // 20 requests per minute
  message: "Too many AI requests, please try again later"
});
router2.post("/chat", aiRateLimit, chatStream);
router2.post("/agent-chat", aiRateLimit, streamAIAgentChatHandler);
router2.post("/completion", aiRateLimit, generateCompletionHandler);
router2.post("/stream-completion", aiRateLimit, streamCompletionHandler);
router2.post("/generate-object", aiRateLimit, generateObjectHandler);
router2.post("/generate-template", aiRateLimit, generateTemplateHandler);
router2.get("/config", getAIConfig);
router2.get("/test", async (req, res) => {
  try {
    console.log("\u{1F9EA} Testing OpenAI connection...");
    const { generateText: generateText2 } = await import("ai");
    const { openai: openai2 } = await import("@ai-sdk/openai");
    const model = openai2("gpt-4o");
    console.log("\u{1F504} Calling generateText with simple test...");
    const result = await generateText2({
      model,
      prompt: "Say hello in one word",
      maxRetries: 1
    });
    console.log("\u2705 Test successful:", result.text);
    res.json({
      success: true,
      response: result.text,
      usage: result.usage
    });
  } catch (error) {
    console.error("\u274C Test failed:", error);
    if (error && typeof error === "object") {
      const errorObj = error;
      const statusCode = errorObj.status || errorObj.statusCode || errorObj.code;
      const message = errorObj.message || errorObj.error?.message || String(error);
      console.error(`\u{1F50D} Test error - Status: ${statusCode}, Message: ${message}`);
      if (statusCode === 429 || message.includes("429") || message.includes("quota") || message.includes("exceeded")) {
        console.error("\u{1F4B3} QUOTA EXCEEDED: You need to add billing/credits to your OpenAI account");
        return res.status(429).json({
          success: false,
          error: "QUOTA_EXCEEDED",
          message: "You've exceeded your OpenAI quota. Please check your billing at https://platform.openai.com/account/billing"
        });
      }
    }
    res.status(500).json({
      success: false,
      error: error instanceof Error ? error.message : "Unknown error"
    });
  }
});
var ai_routes_default = router2;

// src/routes/analytics.routes.ts
var import_express3 = require("express");

// src/services/datadog.service.ts
var import_datadog_api_client = require("@datadog/datadog-api-client");
init_config();
init_secrets_service();
var datadogMetricsClient = (async () => {
  const appSecrets2 = await getAppSecrets();
  return new import_datadog_api_client.v2.MetricsApi(
    import_datadog_api_client.client.createConfiguration({
      authMethods: {
        apiKeyAuth: appSecrets2.datadogApiKey,
        appKeyAuth: appSecrets2.datadogAppKey
      }
    })
  );
})();
var queryTimeseriesData = async (formulas, fromMillis, toMillis) => {
  const request = {
    body: {
      data: {
        type: "timeseries_request",
        attributes: {
          from: fromMillis,
          to: toMillis,
          interval: 60 * 60 * 24 * 1e3,
          // 1 day
          formulas: formulas.map(({ metric, aggregator, tagFilters, by }) => ({
            formula: `${aggregator}:${metric}{${isLocalRun ? "*" : Object.entries(tagFilters).map(([k, v]) => `${k}:"${v}"`).join(" AND ")}} ${by ? `by {${by.join(",")}}` : ""}`
          })),
          queries: []
        }
      }
    }
  };
  const res = await (await datadogMetricsClient).queryTimeseriesData(request);
  if (!res.data) {
    throw new Error(`Datadog API request failed: ${JSON.stringify(res)}`);
  }
  return res.data;
};

// src/controllers/analytics.controller.ts
var ONE_DAY_IN_MS = 60 * 60 * 24 * 1e3;
var METRICS = {
  EXECUTION_COUNT: "agentbridge.tool.execution.count",
  EXECUTION_DURATION: "agentbridge.tool.execution.duration"
};
var TAGS = {
  TOOL_ID: "toolid",
  SERVER_ID: "serverid",
  FAILED: "failed"
};
var seriesValue = (timeseriesResponse, seriesIndex, pointIndex) => seriesIndex !== null ? timeseriesResponse.attributes?.values?.[seriesIndex][pointIndex] || 0 : 0;
var aggregateResults = (seriesResponse) => {
  const analytics2 = {
    total: {
      requests: 0,
      successCount: 0,
      failureCount: 0,
      avgResponseTime: 0
    },
    timeSeriesData: []
  };
  let successCountIndex = null, failureCountIndex = null, durationIndex = null;
  seriesResponse.attributes?.series?.forEach((series, index) => {
    const isCounter = series.queryIndex === 0;
    if (isCounter) {
      const isSuccess = series.groupTags?.includes(`${TAGS.FAILED}:false`);
      if (isSuccess) {
        successCountIndex = index;
      } else {
        failureCountIndex = index;
      }
    } else {
      durationIndex = index;
    }
  });
  seriesResponse.attributes?.times?.forEach((ts, index) => {
    const successValue = seriesValue(seriesResponse, successCountIndex, index);
    const failureValue = seriesValue(seriesResponse, failureCountIndex, index);
    const durationValue = seriesValue(seriesResponse, durationIndex, index);
    analytics2.timeSeriesData.push({
      avgResponseTime: durationValue,
      failureCount: failureValue,
      requests: failureValue + successValue,
      successCount: successValue,
      date: new Date(ts).toISOString()
    });
    analytics2.total.requests += successValue + failureValue;
    analytics2.total.successCount += successValue;
    analytics2.total.failureCount += failureValue;
    analytics2.total.avgResponseTime += durationValue * (successValue + failureValue);
  });
  analytics2.total.avgResponseTime = analytics2.total.requests > 0 ? analytics2.total.avgResponseTime / analytics2.total.requests : 0;
  return analytics2;
};
async function fetchMetrics(logger2, serverId, toolId, fromTime, toTime) {
  try {
    const tagFilters = {
      [TAGS.SERVER_ID]: serverId,
      ...toolId ? { [TAGS.TOOL_ID]: toolId } : {}
    };
    const timeSeriesResponse = await queryTimeseriesData(
      [
        {
          metric: METRICS.EXECUTION_COUNT,
          aggregator: "sum",
          tagFilters,
          by: [TAGS.FAILED]
        },
        {
          metric: METRICS.EXECUTION_DURATION,
          aggregator: "avg",
          tagFilters,
          by: null
        }
      ],
      fromTime,
      toTime
    );
    return aggregateResults(timeSeriesResponse);
  } catch (error) {
    logger2.error("Error fetching metrics from Datadog", error);
  }
  return {
    total: {
      requests: 0,
      successCount: 0,
      failureCount: 0,
      avgResponseTime: 0
    },
    timeSeriesData: []
  };
}
var getTimeFrame = (req) => {
  const fromTime = req.query.from ? new Date(req.query.from).getTime() : Date.now() - 30 * ONE_DAY_IN_MS;
  const toTime = req.query.to ? new Date(req.query.to).getTime() : Date.now();
  return { fromTime, toTime };
};
var getServerAnalytics = async (req, res) => {
  if (!isAppRequest(req)) {
    throw new TypeGuardError();
  }
  req.logger.debug("Getting server analytics", {
    serverId: req.params.serverId,
    timeRange: `${req.query.from}-${req.query.to}`
  });
  const { fromTime, toTime } = getTimeFrame(req);
  const analytics2 = await fetchMetrics(req.logger, req.params.serverId, null, fromTime, toTime);
  res.json(analytics2);
};
var getToolAnalytics = async (req, res) => {
  if (!isAppRequest(req)) {
    throw new TypeGuardError();
  }
  req.logger.debug("Getting tool analytics", {
    serverId: req.params.serverId,
    toolId: req.params.toolId,
    timeRange: `${req.query.from}-${req.query.to}`
  });
  const { fromTime, toTime } = getTimeFrame(req);
  const analytics2 = await fetchMetrics(req.logger, req.params.serverId, req.params.toolId, fromTime, toTime);
  res.json(analytics2);
};

// src/routes/analytics.routes.ts
var router3 = (0, import_express3.Router)();
router3.get("/:serverId/analytics", getServerAnalytics);
router3.get("/:serverId/tools/:toolId/analytics", getToolAnalytics);
var analytics_routes_default = router3;

// src/routes/folders.routes.ts
var import_express4 = require("express");

// src/controllers/folders.controller.ts
var import_http_status_codes5 = require("http-status-codes");

// src/services/folders.service.ts
var mapFolder = (folder) => ({
  ...folder,
  parentFolderId: folder.parentFolderId || void 0,
  createdAt: folder.createdAt.toISOString(),
  updatedAt: folder.updatedAt.toISOString()
});
async function listFolders(db, serverId, tenantId) {
  const folders = await db.folder.findMany({
    where: {
      serverId,
      tenantId
    },
    orderBy: [
      {
        name: "asc"
      },
      {
        id: "asc"
      }
    ]
  });
  return folders.map(mapFolder);
}
async function createFolder(db, serverId, tenantId, name, parentFolderId) {
  const folder = await db.folder.create({
    data: {
      name,
      parentFolderId,
      tenantId,
      serverId
    }
  });
  return mapFolder(folder);
}
async function updateFolder(db, folderId, serverId, tenantId, name) {
  const folder = await db.folder.update({
    where: {
      id: folderId,
      serverId,
      tenantId
    },
    data: {
      name
    }
  });
  return mapFolder(folder);
}
async function deleteFolder(db, folderId, serverId, tenantId) {
  await db.folder.delete({
    where: {
      id: folderId,
      serverId,
      tenantId
    }
  });
}

// src/controllers/folders.controller.ts
var listFolders2 = async (req, res) => {
  if (!isAdminRequest(req)) {
    throw new TypeGuardError();
  }
  req.logger.debug("Listing folders", { serverId: req.params.serverId, tenantId: req.admin.tenantId });
  try {
    const folders = await listFolders(req.db, req.params.serverId, req.admin.tenantId);
    res.json(folders);
  } catch (error) {
    req.logger.error("Failed to list folders", error);
    res.status(import_http_status_codes5.StatusCodes.INTERNAL_SERVER_ERROR).json({
      error: "internal_server_error",
      errorDescription: "Failed to list folders"
    });
  }
};
var createFolder2 = async (req, res) => {
  if (!isAdminRequest(req)) {
    throw new TypeGuardError();
  }
  req.logger.info("Creating folder", { serverId: req.params.serverId, body: req.body });
  try {
    if (!req.admin.tenantId) {
      return res.status(import_http_status_codes5.StatusCodes.UNAUTHORIZED).json({
        error: "unauthorized",
        errorDescription: "Tenant ID is required"
      });
    }
    const folder = await createFolder(
      req.db,
      req.params.serverId,
      req.admin.tenantId,
      req.body.name,
      req.body.parentFolderId
    );
    res.status(import_http_status_codes5.StatusCodes.CREATED).json(folder);
  } catch (error) {
    req.logger.error("Failed to create folder", error);
    res.status(import_http_status_codes5.StatusCodes.INTERNAL_SERVER_ERROR).json({
      error: "internal_server_error",
      errorDescription: "Failed to create folder"
    });
  }
};
var updateFolder2 = async (req, res) => {
  if (!isAdminRequest(req)) {
    throw new TypeGuardError();
  }
  req.logger.info("Updating folder", {
    serverId: req.params.serverId,
    folderId: req.params.folderId,
    body: req.body,
    tenantId: req.admin.tenantId
  });
  try {
    const folder = await updateFolder(
      req.db,
      req.params.folderId,
      req.params.serverId,
      req.admin.tenantId,
      req.body.name
    );
    res.json(folder);
  } catch (error) {
    req.logger.error("Failed to update folder", error);
    res.status(import_http_status_codes5.StatusCodes.INTERNAL_SERVER_ERROR).json({
      error: "internal_server_error",
      errorDescription: "Failed to update folder"
    });
  }
};
var deleteFolder2 = async (req, res) => {
  if (!isAdminRequest(req)) {
    throw new TypeGuardError();
  }
  req.logger.info("Deleting folder", { serverId: req.params.serverId, folderId: req.params.folderId });
  try {
    await deleteFolder(req.db, req.params.folderId, req.params.serverId, req.admin.tenantId);
    res.status(import_http_status_codes5.StatusCodes.NO_CONTENT).send();
  } catch (error) {
    req.logger.error("Failed to delete folder", error);
    res.status(import_http_status_codes5.StatusCodes.INTERNAL_SERVER_ERROR).json({
      error: "internal_server_error",
      errorDescription: "Failed to delete folder"
    });
  }
};

// src/routes/folders.routes.ts
var router4 = (0, import_express4.Router)();
router4.get("/:serverId/folders", listFolders2);
router4.post("/:serverId/folders", createFolder2);
router4.put("/:serverId/folders/:folderId", updateFolder2);
router4.delete("/:serverId/folders/:folderId", deleteFolder2);
var folders_routes_default = router4;

// src/routes/health.routes.ts
var import_express5 = __toESM(require("express"), 1);

// src/controllers/health.controller.ts
var import_http_status_codes6 = require("http-status-codes");
var getHealth = (_req, res) => {
  res.status(import_http_status_codes6.StatusCodes.OK).json({ status: "success" });
};

// src/routes/health.routes.ts
var router5 = import_express5.default.Router();
router5.get("/", getHealth);
router5.get("/ready", getHealth);
var health_routes_default = router5;

// src/routes/mcp.routes.ts
var import_express6 = require("express");

// src/controllers/mcp.controller.ts
var import_sse = require("@modelcontextprotocol/sdk/server/sse.js");
var import_streamableHttp = require("@modelcontextprotocol/sdk/server/streamableHttp.js");
var import_http_status_codes7 = require("http-status-codes");

// src/services/mcp.service.ts
var import_mcp = require("@modelcontextprotocol/sdk/server/mcp.js");
var import_isEmpty = __toESM(require("lodash/isEmpty.js"), 1);

// src/constants/tool-parameters.ts
var CONTEXT_PARAMETERS = {
  JWT: {
    key: "jwt",
    description: "JWT token from request Authorization header",
    source: "request",
    condition: (context) => !context.hasUserAuth && !!context.serverAuth?.userContext?.originalToken
  }
};
function injectContextParameters(req, callParameters, hasUserAuth) {
  const context = {
    hasUserAuth,
    serverAuth: "serverAuth" in req ? req.serverAuth : void 0
  };
  Object.values(CONTEXT_PARAMETERS).forEach((param) => {
    if (!param.condition || param.condition(context)) {
      const value = extractParameterValue(req, param, hasUserAuth);
      if (value !== void 0) {
        callParameters[param.key] = value;
      }
    }
  });
}
function extractParameterValue(req, param, hasUserAuth) {
  switch (param.key) {
    case "jwt":
      return !hasUserAuth && "serverAuth" in req && req.serverAuth?.userContext?.originalToken;
    default:
      return void 0;
  }
}

// src/services/api-exec/api-tool-executor.ts
var import_axios2 = __toESM(require("axios"), 1);
var import_handlebars = __toESM(require("handlebars"), 1);

// src/utils/json.ts
var jsonValueToRecord = (value) => {
  if (typeof value === "object" && value !== null && !Array.isArray(value)) {
    return value;
  }
  return {};
};

// src/services/api-exec/parameter-schema.ts
var import_zod3 = require("zod");
function createZodSchemaFromParameters(logger2, parameters) {
  logger2.debug(`Converting parameters to Zod schema`);
  const paramSchema = {};
  for (const [key, param] of Object.entries(parameters)) {
    logger2.debug(`Processing parameter: ${key}`);
    if (!param || typeof param !== "object") {
      logger2.debug(`Invalid parameter ${key}, defaulting to any`);
      paramSchema[key] = import_zod3.z.any();
      continue;
    }
    const isRequired = !!param.required;
    if (param.in === "body") {
      logger2.debug(`Found body parameter: ${key}`);
      if (!param.schema) {
        paramSchema[key] = isRequired ? import_zod3.z.any() : import_zod3.z.any().optional();
        continue;
      }
      if ("$ref" in param.schema) {
        paramSchema[key] = isRequired ? import_zod3.z.any() : import_zod3.z.any().optional();
        continue;
      }
      const schema2 = param.schema;
      if (schema2.type === "object" && schema2.properties) {
        const bodySchema = import_zod3.z.object(
          Object.entries(schema2.properties).reduce(
            (acc, [propName, propSchema]) => {
              const propType = propSchema.type;
              let zodType = import_zod3.z.any();
              if (propType === "string") {
                zodType = import_zod3.z.string();
              } else if (propType === "number" || propType === "integer") {
                zodType = import_zod3.z.number();
              } else if (propType === "boolean") {
                zodType = import_zod3.z.boolean();
              } else if (propType === "array") {
                zodType = import_zod3.z.array(import_zod3.z.any());
              } else if (propType === "object") {
                zodType = import_zod3.z.record(import_zod3.z.any());
              }
              if ("description" in propSchema && propSchema.description) {
                zodType = zodType.describe(propSchema.description);
              }
              const isPropRequired = schema2.required?.includes(propName) === true;
              acc[propName] = isPropRequired ? zodType : zodType.optional();
              return acc;
            },
            {}
          )
        );
        paramSchema[key] = isRequired ? bodySchema : bodySchema.optional();
      } else {
        paramSchema[key] = isRequired ? import_zod3.z.any() : import_zod3.z.any().optional();
      }
      continue;
    }
    if (!param.schema) {
      logger2.debug(`No schema found for parameter ${key}, defaulting to any`);
      paramSchema[key] = isRequired ? import_zod3.z.any() : import_zod3.z.any().optional();
      continue;
    }
    if ("$ref" in param.schema) {
      logger2.debug(`Reference schema found for parameter ${key}, defaulting to any`);
      paramSchema[key] = isRequired ? import_zod3.z.any() : import_zod3.z.any().optional();
      continue;
    }
    const schema = param.schema;
    const schemaType = schema.type;
    switch (schemaType) {
      case "string":
        const stringSchema = import_zod3.z.string();
        if (schema.format === "date-time") {
          paramSchema[key] = isRequired ? import_zod3.z.string().datetime() : import_zod3.z.string().datetime().optional();
        } else if (schema.format === "email") {
          paramSchema[key] = isRequired ? import_zod3.z.string().email() : import_zod3.z.string().email().optional();
        } else if (schema.format === "uri") {
          paramSchema[key] = isRequired ? import_zod3.z.string().url() : import_zod3.z.string().url().optional();
        } else if (schema.enum) {
          if (Array.isArray(schema.enum) && schema.enum.length > 0) {
            paramSchema[key] = isRequired ? import_zod3.z.enum(schema.enum) : import_zod3.z.enum(schema.enum).optional();
          } else {
            paramSchema[key] = isRequired ? stringSchema : stringSchema.optional();
          }
        } else {
          paramSchema[key] = isRequired ? stringSchema : stringSchema.optional();
        }
        break;
      case "number":
      case "integer":
        let numberSchema = import_zod3.z.number();
        if (typeof schema.minimum === "number") {
          numberSchema = numberSchema.min(schema.minimum);
        }
        if (typeof schema.maximum === "number") {
          numberSchema = numberSchema.max(schema.maximum);
        }
        paramSchema[key] = isRequired ? numberSchema : numberSchema.optional();
        break;
      case "boolean":
        paramSchema[key] = isRequired ? import_zod3.z.boolean() : import_zod3.z.boolean().optional();
        break;
      case "array":
        if (schema.items) {
          if ("$ref" in schema.items) {
            paramSchema[key] = isRequired ? import_zod3.z.array(import_zod3.z.any()) : import_zod3.z.array(import_zod3.z.any()).optional();
          } else {
            const itemSchema = schema.items;
            const itemType = itemSchema.type;
            if (itemType === "string") {
              paramSchema[key] = isRequired ? import_zod3.z.array(import_zod3.z.string()) : import_zod3.z.array(import_zod3.z.string()).optional();
            } else if (itemType === "number" || itemType === "integer") {
              paramSchema[key] = isRequired ? import_zod3.z.array(import_zod3.z.number()) : import_zod3.z.array(import_zod3.z.number()).optional();
            } else if (itemType === "boolean") {
              paramSchema[key] = isRequired ? import_zod3.z.array(import_zod3.z.boolean()) : import_zod3.z.array(import_zod3.z.boolean()).optional();
            } else {
              paramSchema[key] = isRequired ? import_zod3.z.array(import_zod3.z.any()) : import_zod3.z.array(import_zod3.z.any()).optional();
            }
          }
        } else {
          paramSchema[key] = isRequired ? import_zod3.z.array(import_zod3.z.any()) : import_zod3.z.array(import_zod3.z.any()).optional();
        }
        break;
      case "object":
        paramSchema[key] = isRequired ? import_zod3.z.record(import_zod3.z.any()) : import_zod3.z.record(import_zod3.z.any()).optional();
        break;
      default:
        logger2.debug(`Unknown parameter type ${schemaType} for ${key}, defaulting to any`);
        paramSchema[key] = isRequired ? import_zod3.z.any() : import_zod3.z.any().optional();
    }
    if (schema.description && paramSchema[key]) {
      paramSchema[key] = paramSchema[key].describe(schema.description);
    }
  }
  return paramSchema;
}
function buildRequestConfig(logger2, apiCallMethod, apiCallUrl, baseUrl3, specParameters, callParameters, toolName) {
  const config2 = {
    method: apiCallMethod.toLowerCase(),
    url: apiCallUrl.startsWith("http") ? apiCallUrl : baseUrl3 ? `${baseUrl3}${apiCallUrl}` : apiCallUrl,
    headers: {},
    params: {},
    data: null
  };
  for (const [key, param] of Object.entries(specParameters)) {
    if (!param || typeof param !== "object") {
      continue;
    }
    let value = callParameters[key];
    if (value === void 0) {
      if (param.schema && "default" in param.schema) {
        value = param.schema.default;
        logger2.debug(`Using default value for parameter ${key}: ${value}`);
      } else if (param.required) {
        logger2.debug(`Required parameter ${key} missing for tool ${toolName}`);
        return { config: config2, missingRequiredParam: key };
      } else {
        logger2.debug(`Optional parameter ${key} not provided`);
        continue;
      }
    }
    if (!param.in) {
      continue;
    }
    switch (param.in) {
      case "query":
        logger2.debug(`Adding query parameter ${key}=${value}`);
        config2.params = config2.params || {};
        if (Array.isArray(value)) {
          config2.params[key] = param.explode ? value.map(String).map((v) => encodeURIComponent(v)).join("&") : value.map(String).map(encodeURIComponent).join(",");
        } else {
          config2.params[key] = value;
        }
        break;
      case "path":
        logger2.debug(`Replacing path parameter ${key}=${value}`);
        const pathValue = typeof value === "number" ? Math.floor(value).toString() : String(value);
        config2.url = config2.url?.replace(`{${key}}`, encodeURIComponent(pathValue));
        break;
      case "header":
        logger2.debug(`Adding header ${key}=${value}`);
        config2.headers = config2.headers || {};
        config2.headers[key] = String(value);
        break;
      case "cookie":
        logger2.debug(`Adding cookie ${key}=${value}`);
        const cookieValue = `${key}=${encodeURIComponent(String(value))}`;
        if (config2.headers?.Cookie) {
          config2.headers.Cookie += `; ${cookieValue}`;
        } else {
          config2.headers = config2.headers || {};
          config2.headers.Cookie = cookieValue;
        }
        break;
      default:
        if (["POST", "PUT", "PATCH"].includes(apiCallMethod)) {
          logger2.debug(`Adding ${key} to request body`);
          config2.data = config2.data || {};
          config2.data[key] = value;
        }
    }
  }
  config2.headers = config2.headers || {};
  if (["POST", "PUT", "PATCH"].includes(apiCallMethod)) {
    const bodyParams = {};
    let hasBodyParameter = false;
    for (const [key, param] of Object.entries(specParameters)) {
      if (param.in === "body" && callParameters[key] !== void 0) {
        logger2.debug(`Found body parameter: ${key}`);
        config2.data = callParameters[key];
        config2.headers["Content-Type"] = "application/json";
        hasBodyParameter = true;
        break;
      }
    }
    if (!hasBodyParameter) {
      for (const [key, value] of Object.entries(callParameters)) {
        const param = specParameters[key];
        if (!param || param.in !== "query" && param.in !== "path" && param.in !== "header" && param.in !== "cookie") {
          bodyParams[key] = value;
        }
      }
      if (Object.keys(bodyParams).length > 0) {
        logger2.debug(`Building request body from non-path/query/header parameters`);
        config2.data = bodyParams;
        config2.headers["Content-Type"] = "application/json";
      }
    }
  }
  if (callParameters["Authorization"]) {
    config2.headers["Authorization"] = callParameters["Authorization"];
  }
  return { config: config2 };
}

// src/services/api-exec/api-tool-executor.ts
import_handlebars.default.registerHelper("json", function(context) {
  return JSON.stringify(context);
});
var logApiCall = (logger2, tool2, baseUrl3, startTime, isPlayground, response) => {
  logger2.info("Analytics: API call completed", {
    toolId: tool2.id,
    baseUrl: baseUrl3,
    url: tool2.url,
    method: tool2.method,
    statusCode: response?.status || 0,
    bodyLen: response?.data ? String(response.data).length : 0,
    durationMS: Date.now() - startTime,
    failed: !response || response?.status >= 300 || response?.status < 200,
    isPlayground
  });
};
async function executeApiRequest(tool2, baseUrl3, specParameters, callParameters, logger2, isPlayground = false, authContext) {
  const responseFormatting = tool2.responseFormatting ? JSON.parse(JSON.stringify(tool2.responseFormatting)) : {};
  const startTime = Date.now();
  let requestData = null;
  try {
    let finalParameters = callParameters;
    let finalSpecParameters = specParameters;
    if (tool2.requestParameterOverrides) {
      const overrides = tool2.requestParameterOverrides;
      const isNewFormat = "query" in overrides || "headers" in overrides || "path" in overrides || "body" in overrides;
      if (isNewFormat) {
        logger2.debug(`Using new HTTP request override format`);
        finalParameters = {};
        const newSpecParameters = {};
        if (overrides.query) {
          for (const [key, value] of Object.entries(overrides.query)) {
            const processedValue = processHandlebarsTemplate(logger2, value, { toolParams: callParameters });
            if (processedValue !== "" && processedValue !== null && processedValue !== void 0) {
              finalParameters[key] = processedValue;
              newSpecParameters[key] = {
                name: key,
                in: "query",
                required: specParameters[key]?.required || false,
                schema: specParameters[key]?.schema || { type: "string" }
              };
            } else {
              logger2.debug(`Skipping empty query parameter: ${key}`);
            }
          }
        }
        if (overrides.headers) {
          for (const [key, value] of Object.entries(overrides.headers)) {
            const processedValue = processHandlebarsTemplate(logger2, value, { toolParams: callParameters });
            if (processedValue !== "" && processedValue !== null && processedValue !== void 0) {
              finalParameters[key] = processedValue;
              newSpecParameters[key] = {
                name: key,
                in: "header",
                required: specParameters[key]?.required || false,
                schema: specParameters[key]?.schema || { type: "string" }
              };
            } else {
              logger2.debug(`Skipping empty header parameter: ${key}`);
            }
          }
        }
        if (overrides.path) {
          for (const [key, value] of Object.entries(overrides.path)) {
            const processedValue = processHandlebarsTemplate(logger2, value, { toolParams: callParameters });
            if (processedValue !== "" && processedValue !== null && processedValue !== void 0) {
              finalParameters[key] = processedValue;
              newSpecParameters[key] = {
                name: key,
                in: "path",
                required: specParameters[key]?.required || true,
                // Path params are usually required
                schema: specParameters[key]?.schema || { type: "string" }
              };
            } else {
              logger2.warn(`Empty path parameter: ${key} - this may cause request to fail`);
            }
          }
        }
        if (overrides.body !== void 0) {
          let bodyValue = overrides.body;
          if (typeof bodyValue === "object" && bodyValue !== null) {
            bodyValue = JSON.parse(
              processHandlebarsTemplate(logger2, JSON.stringify(bodyValue), { toolParams: callParameters })
            );
          } else if (typeof bodyValue === "string") {
            bodyValue = processHandlebarsTemplate(logger2, bodyValue, { toolParams: callParameters });
          }
          finalParameters.body = bodyValue;
          newSpecParameters.body = {
            name: "body",
            in: "body",
            required: specParameters.body?.required || false,
            schema: specParameters.body?.schema || { type: "object" }
          };
        }
        finalSpecParameters = newSpecParameters;
      } else {
        logger2.debug(`Using old request parameter override format`);
        finalParameters = {};
        const newSpecParameters = {};
        for (const [paramName, override] of Object.entries(overrides)) {
          const processedValue = processHandlebarsTemplate(logger2, override.value, {
            toolParams: callParameters,
            auth: authContext || {}
          });
          finalParameters[paramName] = processedValue;
          newSpecParameters[paramName] = {
            name: paramName,
            in: override.location,
            required: specParameters[paramName]?.required || false,
            schema: specParameters[paramName]?.schema || { type: "string" }
          };
        }
        finalSpecParameters = newSpecParameters;
      }
      logger2.debug(`Applied request parameter overrides`, {
        original: callParameters,
        overrides,
        final: finalParameters,
        specs: finalSpecParameters,
        format: isNewFormat ? "new" : "old"
      });
    }
    const { config: config2, missingRequiredParam } = buildRequestConfig(
      logger2,
      tool2.method,
      tool2.url,
      baseUrl3,
      finalSpecParameters,
      finalParameters,
      tool2.name
    );
    if (missingRequiredParam) {
      return {
        content: [
          {
            type: "text",
            text: `Required parameter ${missingRequiredParam} is missing`
          }
        ],
        isError: true
      };
    }
    logger2.debug(
      `Executing API call with config: ${JSON.stringify({
        method: config2.method,
        url: config2.url,
        headers: config2.headers,
        params: config2.params,
        data: config2.data ? "[DATA]" : null
      })}`
    );
    requestData = responseFormatting.includeRequestData ? {
      schema: specParameters,
      data: {
        parameters: {
          headers: config2.headers || {},
          query: config2.params || {},
          path: extractPathParams(tool2.url, finalParameters, finalSpecParameters)
        },
        payload: config2.data || {}
      }
    } : null;
    const response = await (0, import_axios2.default)(config2);
    logger2.debug(`API call completed, status: ${response.status}`);
    const result = {
      schema: getResponseSchema(jsonValueToRecord(tool2.responses), response.status, response.headers["content-type"]),
      data: {
        headers: response.headers,
        body: response.data
      }
    };
    logger2.debug(`API call result:`, { result });
    let formattedResponse;
    if (responseFormatting.template) {
      logger2.debug(`Formatting response with template`);
      const templateData = {
        request: requestData,
        response: result,
        toolParams: callParameters,
        auth: authContext || {}
      };
      formattedResponse = processHandlebarsTemplate(logger2, responseFormatting.template, templateData);
    } else if (responseFormatting.itemTemplate && Array.isArray(result.data.body)) {
      logger2.debug(`Formatting response as array with itemTemplate`);
      const header = responseFormatting.header ? processHandlebarsTemplate(logger2, responseFormatting.header, { count: result.data.body.length }) : "";
      if (result.data.body.length === 0 && responseFormatting.emptyResult) {
        formattedResponse = `${header}${responseFormatting.emptyResult}`;
      } else {
        const separator = responseFormatting.separator || "\n\n";
        const items = result.data.body.map(
          (item) => processHandlebarsTemplate(logger2, responseFormatting.itemTemplate, {
            item,
            request: requestData,
            response: result,
            toolParams: callParameters,
            auth: authContext || {}
          })
        );
        formattedResponse = `${header}${items.join(separator)}`;
      }
    } else {
      logger2.debug(`No formatting configuration, returning JSON string`);
      formattedResponse = typeof result === "string" ? result : JSON.stringify(result, null, 2);
    }
    logger2.debug(`Returning tool response (${formattedResponse.length} chars)`);
    logApiCall(logger2, tool2, baseUrl3, startTime, isPlayground, response);
    return {
      content: [
        {
          type: "text",
          text: formattedResponse
        }
      ]
    };
  } catch (error) {
    if ((0, import_axios2.isAxiosError)(error)) {
      const axiosError = error;
      logApiCall(logger2, tool2, baseUrl3, startTime, isPlayground, axiosError.response || null);
      logger2.debug(
        `API call failed: ${axiosError.config?.method} ${axiosError.config?.url} - ${axiosError.response?.status}`,
        {
          status: axiosError.response?.status,
          method: axiosError.config?.method,
          url: axiosError.config?.url
        }
      );
    } else {
      logApiCall(logger2, tool2, baseUrl3, startTime, isPlayground, null);
      logger2.debug(`API call failed: ${error instanceof Error ? error.message : String(error)}`);
    }
    if (responseFormatting.errorTemplate) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      const templateData = {
        error: errorMessage,
        message: errorMessage,
        request: requestData,
        response: {
          schema: getResponseSchema(jsonValueToRecord(tool2.responses), 0, "application/json"),
          data: {
            headers: {},
            body: { error: errorMessage }
          }
        },
        toolParams: callParameters,
        auth: authContext || {}
      };
      const formattedError = processHandlebarsTemplate(
        logger2,
        responseFormatting.errorTemplate,
        templateData
      );
      logger2.debug(`Returning formatted error: ${formattedError}`);
      return {
        content: [
          {
            type: "text",
            text: formattedError
          }
        ],
        isError: true
      };
    }
    let formattedResponse;
    if ((0, import_axios2.isAxiosError)(error) && error.response) {
      const errorResponse = {
        data: {
          content: {
            status: error.response.status,
            statusText: error.response.statusText,
            data: error.response.data
          },
          headers: error.response.headers
        },
        schema: getResponseSchema(
          jsonValueToRecord(tool2.responses),
          error.response.status,
          error.response.headers["content-type"]
        ) || "no schema found for response"
      };
      formattedResponse = typeof errorResponse === "string" ? errorResponse : JSON.stringify(errorResponse, null, 2);
    } else {
      formattedResponse = `API call failed: ${error instanceof Error ? error.message : String(error)}`;
    }
    return {
      content: [
        {
          type: "text",
          text: formattedResponse
        }
      ],
      isError: true
    };
  }
}
function getResponseSchema(responses, status, contentType = "application/json") {
  const statusKey = String(status);
  const response = responses[statusKey] || responses["default"];
  if (!response)
    return void 0;
  if (typeof response === "object" && response !== null && "content" in response && typeof response.content === "object" && response.content !== null) {
    const content = response.content;
    if (content[contentType]?.schema) {
      return {
        ...response,
        content: content[contentType].schema
      };
    }
    const firstContent = Object.values(content)[0];
    if (firstContent && typeof firstContent === "object" && "schema" in firstContent) {
      return firstContent.schema;
    }
  }
  return void 0;
}
function extractPathParams(url, callParameters, specParameters) {
  const pathParams = {};
  for (const [key, param] of Object.entries(specParameters)) {
    if (param.in === "path" && callParameters[key] !== void 0) {
      pathParams[key] = callParameters[key];
    }
  }
  return pathParams;
}
function processHandlebarsTemplate(logger2, template, data) {
  logger2.debug(`Processing Handlebars template with data keys: ${Object.keys(data).join(", ")}`);
  if (!template) {
    return "";
  }
  try {
    const compiledTemplate = import_handlebars.default.compile(template);
    return compiledTemplate(data);
  } catch (error) {
    logger2.warn(`Error processing Handlebars template`, error);
    return `Template processing error: ${error instanceof Error ? error.message : String(error)}`;
  }
}

// src/services/mcp.service.ts
var authenticateMessage = (url) => `Please authenticate before proceeding.

The following URL should be automatically opened in your browser, but if it doesn't, please open it manually:

${url}

Once authentication is complete, re-run your original query.`;
var CONSTANTS = {
  SYNTHETIC_EMAIL_DOMAIN: "@jwt.agentpass.ai",
  MCP_SERVER_VERSION: "1.0.0"
};
var ERROR_MESSAGES = {
  AUTH_PROVIDER_MISCONFIGURED: "Oops! We couldn't complete the request due to an authorization issue. Please get in touch with your MCP server administrator.",
  TOOL_EXECUTION_ERROR: (error) => `Error executing tool: ${error instanceof Error ? error.message : String(error)}`
};
var createErrorResponse = (message, isError = true) => ({
  content: [{ type: "text", text: message }],
  isError
});
var createAuthResponse = (authUrl) => ({
  content: [{ type: "text", text: authenticateMessage(authUrl) }]
});
function parseJwtClaims(jwt3) {
  try {
    const parts = jwt3.split(".");
    if (parts.length !== 3) {
      return {};
    }
    const header = parts[0];
    const paddedHeader = header + "=".repeat((4 - header.length % 4) % 4);
    const decodedHeader = Buffer.from(paddedHeader, "base64url").toString("utf8");
    const headerClaims = JSON.parse(decodedHeader);
    const payload = parts[1];
    const paddedPayload = payload + "=".repeat((4 - payload.length % 4) % 4);
    const decodedPayload = Buffer.from(paddedPayload, "base64url").toString("utf8");
    const payloadClaims = JSON.parse(decodedPayload);
    return { ...headerClaims, ...payloadClaims };
  } catch {
    return {};
  }
}
async function getMcpServerUnified(req) {
  const hasUserAuth = Boolean("user" in req && req.user);
  const hasServerAuth = Boolean("serverAuth" in req && req.serverAuth?.success);
  if (!hasUserAuth && !hasServerAuth) {
    throw new Error("No valid authentication found");
  }
  const serverId = req.serverId;
  const server = new import_mcp.McpServer(
    {
      name: serverId,
      version: CONSTANTS.MCP_SERVER_VERSION
    },
    { capabilities: { logging: {} } }
  );
  try {
    const tools = await req.db.tool.findMany({
      where: {
        serverId,
        enabled: true
      },
      include: {
        oAuthProvider: true,
        apiKeyProvider: true,
        server: {
          select: {
            baseUrl: true
          }
        }
      }
    });
    req.logger.debug(`Found ${tools.length} tools for server ${serverId}`);
    for (const tool2 of tools) {
      await registerToolUnified(req, server, tool2, hasUserAuth, hasServerAuth);
    }
  } catch (error) {
    req.logger.error(`Error loading tools for server ${serverId}:`, error);
    throw error;
  }
  return server;
}
async function registerToolUnified(req, server, tool2, hasUserAuth, hasServerAuth) {
  try {
    const specParameters = tool2.parameters ? JSON.parse(JSON.stringify(tool2.parameters)) : {};
    req.logger.debug(`Tool ${tool2.method} ${tool2.url} parameters: ${JSON.stringify(specParameters)}`);
    const paramSchema = createZodSchemaFromParameters(req.logger, specParameters);
    server.registerTool(
      tool2.name,
      {
        description: tool2.description,
        inputSchema: paramSchema
      },
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      (callParameters) => executeToolWithAuth(req, tool2, specParameters, callParameters, hasUserAuth, hasServerAuth)
    );
  } catch (error) {
    req.logger.error(`Failed to register tool ${tool2.name}:`, error);
    throw error;
  }
}
async function executeToolWithAuth(req, tool2, specParameters, callParameters, hasUserAuth, hasServerAuth) {
  req.logger.debug(
    `Tool ${tool2.name} (${tool2.method} @ ${tool2.url}) called with params: ${JSON.stringify(callParameters)}`
  );
  try {
    injectContextParameters(req, callParameters, hasUserAuth);
    const jwtToken = !hasUserAuth && "serverAuth" in req && req.serverAuth?.userContext?.originalToken || void 0;
    const jwtClaims = parseJwtClaims(jwtToken || "");
    const authContext = {
      jwt: {
        // Raw JWT string accessible as {{auth.jwt}}
        toString: () => jwtToken || "",
        valueOf: () => jwtToken || "",
        // JWT claims accessible as {{auth.jwt.propertyName}}
        ...jwtClaims
      }
    };
    if (jwtToken) {
      callParameters.jwt = jwtToken;
    }
    const toolAuthResult = await handleToolAuthentication(req, tool2, hasUserAuth, hasServerAuth);
    if (toolAuthResult.authProviderMisconfigured) {
      return createErrorResponse(ERROR_MESSAGES.AUTH_PROVIDER_MISCONFIGURED);
    }
    if (toolAuthResult.authMissing) {
      return createAuthResponse(toolAuthResult.authMissing.authUrl);
    }
    if (toolAuthResult.accessToken) {
      callParameters["Authorization"] = `Bearer ${toolAuthResult.accessToken.tokenValue}`;
      const tokenId = toolAuthResult.accessToken.tokenId;
      setImmediate(() => markTokenAsUsed(req.db, tokenId));
    }
    const startTime = Date.now();
    const result = await executeApiRequest(
      tool2,
      tool2.server.baseUrl,
      specParameters,
      callParameters,
      req.logger,
      false,
      authContext
    );
    await logToolExecution(req, tool2, result, startTime, hasUserAuth, hasServerAuth);
    return result;
  } catch (error) {
    req.logger.warn(`Error executing tool ${tool2.name}:`, error);
    return createErrorResponse(ERROR_MESSAGES.TOOL_EXECUTION_ERROR(error));
  }
}
async function logUserToolExecution(req, tool2, result, startTime) {
  analytics.track(req.user.id, "tool.execute.api_call", {
    tool_id: tool2.id,
    server_id: tool2.serverId,
    tenant_id: req.user.tenantId,
    end_user_id: req.user.id,
    tool_name: tool2.name,
    http_method: tool2.method,
    has_auth: !!tool2.oAuthProviderId || !!tool2.apiKeyProviderId,
    auth_type: tool2.oAuthProviderId ? "oauth" : tool2.apiKeyProviderId ? "api_key" : "none",
    execution_time_ms: Date.now() - startTime,
    success: !result.isError,
    is_playground: false
  });
  req.logger.info(`Tool ${tool2.name} executed for user ${req.user.email}`, {
    tool_id: tool2.id,
    server_id: tool2.serverId,
    tool_name: tool2.name,
    success: !result.isError,
    duration: Date.now() - startTime,
    user_id: req.user.id
  });
}
async function logToolExecution(req, tool2, result, startTime, hasUserAuth, hasServerAuth) {
  if (hasUserAuth) {
    const userReq = req;
    await logUserToolExecution(userReq, tool2, result, startTime);
    return;
  }
  if (hasServerAuth) {
    const serverAuthReq = req;
    if (serverAuthReq.serverAuth?.userContext?.userId && tool2.oAuthProvider) {
      const syntheticUserReq = req;
      if (syntheticUserReq.user) {
        await logUserToolExecution(syntheticUserReq, tool2, result, startTime);
        return;
      }
    }
  }
  req.logger.info(`Tool ${tool2.name} executed successfully`, {
    tool_id: tool2.id,
    server_id: tool2.serverId,
    tool_name: tool2.name,
    success: !result.isError,
    duration: Date.now() - startTime
  });
}
async function ensureSyntheticEndUser(db, userId, tenantId, logger2) {
  try {
    const existingUser = await db.endUser.findUnique({
      where: { id: userId }
    });
    if (existingUser) {
      logger2?.debug(`Synthetic EndUser already exists for JWT sub: ${userId}`);
      return;
    }
    await db.endUser.create({
      data: {
        id: userId,
        // Use JWT sub as the user ID
        tenantId,
        email: `${userId}${CONSTANTS.SYNTHETIC_EMAIL_DOMAIN}`,
        // Synthetic email to satisfy constraint
        emailVerified: false,
        name: `JWT Subject ${userId.substring(0, 8)}...`,
        // Truncated for readability
        enabled: true
      }
    });
    logger2?.info(`Created synthetic EndUser for JWT subject: ${userId}`, { tenantId });
  } catch (error) {
    if (error && typeof error === "object" && "code" in error && error.code === "P2002") {
      logger2?.debug(`Synthetic EndUser creation race condition for JWT sub: ${userId}`);
      return;
    }
    logger2?.error(`Failed to create synthetic EndUser for JWT subject: ${userId}`, error);
    throw error;
  }
}
async function handleToolAuthentication(req, tool2, hasUserAuth, hasServerAuth) {
  if (tool2.apiKeyProvider) {
    return {
      accessToken: {
        tokenId: tool2.apiKeyProvider.id,
        tokenValue: tool2.apiKeyProvider.value
      }
    };
  }
  if (tool2.oAuthProvider) {
    if ((0, import_isEmpty.default)(tool2.oAuthProvider.clientId) || (0, import_isEmpty.default)(tool2.oAuthProvider.clientSecret)) {
      return { authProviderMisconfigured: true };
    }
    const userId = await getUserIdForOAuth(req, hasUserAuth, hasServerAuth, tool2.name);
    if (typeof userId === "object") {
      return userId;
    }
    return await handleOAuthAuthentication(req, tool2.oAuthProvider, userId);
  }
  return {};
}
async function getUserIdForOAuth(req, hasUserAuth, hasServerAuth, toolName) {
  if (hasUserAuth) {
    const userReq = req;
    return userReq.user.id;
  }
  if (hasServerAuth) {
    const serverAuthReq = req;
    const jwtUserId = serverAuthReq.serverAuth?.userContext?.userId;
    if (!jwtUserId) {
      req.logger.warn(`OAuth tool ${toolName} requires user context in JWT token`);
      return { authProviderMisconfigured: true };
    }
    const server = await req.db.mcpServer.findUnique({
      where: { id: req.serverId },
      select: { tenantId: true }
    });
    if (!server) {
      req.logger.error(`MCP server not found: ${req.serverId}`);
      return { authProviderMisconfigured: true };
    }
    await ensureSyntheticEndUser(req.db, jwtUserId, server.tenantId, req.logger);
    return jwtUserId;
  }
  req.logger.error(`No authentication context available for OAuth tool ${toolName}`);
  return { authProviderMisconfigured: true };
}
async function handleOAuthAuthentication(req, oAuthProvider, userId) {
  const originAddress = req.ip || null;
  const tokens = await getUserUseableTokens(req.db, userId, oAuthProvider.id);
  if (tokens.length > 0) {
    const validTokens = tokens.filter((t) => !t.expiresAt || t.expiresAt > /* @__PURE__ */ new Date());
    if (validTokens.length > 0) {
      req.logger.debug(`Found valid token for provider ${oAuthProvider.name} (has ${tokens.length} tokens)`);
      return {
        accessToken: {
          tokenId: validTokens[0].id,
          tokenValue: validTokens[0].accessToken
        }
      };
    }
    const tokensWithRefresh = tokens.filter((t) => !!t.refreshToken);
    if (tokensWithRefresh.length > 0) {
      try {
        const tokenData = await refreshAndPersistAccessToken(
          req.db,
          req.logger,
          userId,
          oAuthProvider,
          tokensWithRefresh[0].refreshToken,
          originAddress
        );
        return {
          accessToken: {
            tokenId: tokenData.id,
            tokenValue: tokenData.accessToken
          }
        };
      } catch (error) {
        req.logger.warn(`Failed to refresh token for provider ${oAuthProvider.name}`, error);
        return {
          authMissing: {
            authUrl: getAuthorizeUrl(req, oAuthProvider, "", req.serverId, userId, TOOL_SCOPE, originAddress)
          }
        };
      }
    }
    const authUrl2 = getAuthorizeUrl(req, oAuthProvider, "", req.serverId, userId, TOOL_SCOPE, originAddress);
    req.logger.warn(
      `Found ${tokens.length} expired/invalid tokens for provider ${oAuthProvider.name}, prompting user to re-authenticate at '${authUrl2}'`
    );
    return { authMissing: { authUrl: authUrl2 } };
  }
  const authUrl = getAuthorizeUrl(req, oAuthProvider, "", req.serverId, userId, TOOL_SCOPE, originAddress);
  req.logger.warn(
    `No valid token found for provider ${oAuthProvider.name}, prompting user to authenticate at '${authUrl}'`
  );
  return { authMissing: { authUrl } };
}

// src/controllers/mcp.controller.ts
function sendMcpError(res, status, errorCode, message, isJsonRpc = true) {
  const error = isJsonRpc ? { jsonrpc: "2.0", error: { code: errorCode, message } } : { error: { code: errorCode, message } };
  res.status(status).json(error);
}
async function validateRequest(req, res) {
  if (!isAppRequest(req)) {
    throw new TypeGuardError();
  }
  if (!isWithServerIdRequest(req)) {
    const message = "Missing server ID";
    req.logger.warn(`${message}. serverId=${req["serverId"]}`);
    sendMcpError(res, import_http_status_codes7.StatusCodes.BAD_REQUEST, APP_BAD_REQUEST, `Bad Request: ${message}`);
    return false;
  }
  if (!req.serverAuth?.success) {
    sendMcpError(
      res,
      import_http_status_codes7.StatusCodes.UNAUTHORIZED,
      APP_BAD_REQUEST,
      req.serverAuth?.error || "Server authentication failed"
    );
    return false;
  }
  req.logger.debug("Request validation successful", {
    serverId: req.serverId,
    authType: req.serverAuth.userContext?.authType,
    userId: req.serverAuth.userContext?.userId
  });
  return true;
}
async function handleStreamablePost(req, res) {
  if (!isWithServerIdRequest(req)) {
    throw new TypeGuardError();
  }
  try {
    if (!await validateRequest(req, res)) {
      return;
    }
    const mcpServer = await getMcpServerUnified(req);
    const transport = new import_streamableHttp.StreamableHTTPServerTransport({
      sessionIdGenerator: void 0
    });
    res.on("close", () => {
      transport.close();
      mcpServer.close();
    });
    await mcpServer.connect(transport);
    await transport.handleRequest(req, res, req.body);
  } catch (error) {
    req.logger.error("Error handling MCP streamable HTTP POST request", error);
    if (!res.headersSent) {
      sendMcpError(res, import_http_status_codes7.StatusCodes.INTERNAL_SERVER_ERROR, JSONRPC_INTERNAL_ERROR, "Internal server error");
    }
  }
}
var sseTransports = {};
async function handleSSE(req, res) {
  if (!isWithServerIdRequest(req)) {
    throw new TypeGuardError();
  }
  if (!await validateRequest(req, res)) {
    return;
  }
  const transport = new import_sse.SSEServerTransport("/api/mcp/messages", res);
  sseTransports[transport.sessionId] = transport;
  res.on("close", () => {
    delete sseTransports[transport.sessionId];
  });
  const server = await getMcpServerUnified(req);
  await server.connect(transport);
}
async function handleSSEMessage(req, res) {
  if (!isWithServerIdRequest(req)) {
    throw new TypeGuardError();
  }
  const sessionId = req.query.sessionId;
  if (!await validateRequest(req, res)) {
    return;
  }
  const transport = sessionId ? sseTransports[sessionId] : null;
  if (!transport) {
    if (sessionId) {
      req.logger.error("Session specified but not found", { sessionId });
    }
    return sendMcpError(res, import_http_status_codes7.StatusCodes.NOT_FOUND, APP_BAD_REQUEST, "Session not found");
  }
  await transport.handlePostMessage(req, res, req.body);
}
async function handleNotAllowed(req, res) {
  if (!isAppRequest(req)) {
    throw new TypeGuardError();
  }
  return sendMcpError(res, import_http_status_codes7.StatusCodes.METHOD_NOT_ALLOWED, JSONRPC_METHOD_NOT_ALLOWED, "Method not allowed");
}

// src/middleware/server-auth.middleware.ts
function createServerAuthMiddleware(serverAuthService, logger2) {
  return async (req, res, next) => {
    try {
      const serverId = req.serverId || req.params.serverId || req.headers["x-server-id"];
      if (!serverId) {
        logger2?.warn("Server authentication failed: missing server ID", {
          path: req.path,
          method: req.method,
          headers: req.headers
        });
        return res.status(400).json({
          error: "Server ID is required for authentication"
        });
      }
      const authResult = await serverAuthService.authenticateServerRequest(req, serverId);
      if (!authResult.success) {
        logger2?.warn("Server authentication failed", {
          serverId,
          error: authResult.error,
          path: req.path,
          method: req.method,
          authType: authResult.userContext?.authType
        });
        return res.status(401).json({
          error: "Authentication failed",
          details: authResult.error
        });
      }
      logger2?.info("Server authentication successful", {
        serverId,
        authType: authResult.userContext?.authType,
        userId: authResult.userContext?.userId,
        tenantId: authResult.userContext?.tenantId,
        path: req.path,
        method: req.method
      });
      req.serverAuth = authResult;
      req.serverId = serverId;
      next();
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      logger2?.error("Internal authentication error", {
        serverId: req.params.serverId || req.headers["x-server-id"],
        error: errorMessage,
        path: req.path,
        method: req.method
      });
      res.status(500).json({
        error: "Internal authentication error",
        details: errorMessage
      });
    }
  };
}

// src/middlewares/serverId.middleware.ts
var serverIdMiddleware = (req, _res, next) => {
  if (!isAppRequest(req)) {
    throw new Error("Request does not have logger or db");
  }
  const serverIdOverride = process.env.LOCAL_SERVER_ID;
  if (serverIdOverride) {
    req.logger.debug(`Using local server ID: ${serverIdOverride}`);
    req.serverId = serverIdOverride;
  } else {
    const queryServerId = req.query.serverId;
    if (queryServerId) {
      req.logger.debug(`Using server ID from query parameter: ${queryServerId}`);
      req.serverId = queryServerId;
      req.logger = req.logger.child({
        serverId: queryServerId
      });
    } else {
      const serverId = req.hostname.split(".")[0];
      if (serverId === "app") {
        throw new Error(`Wrong hostname was used for the mcp server request: ${req.hostname}`);
      }
      req.logger.debug(`Using server ID from hostname: ${serverId}`);
      req.serverId = serverId;
      req.logger = req.logger.child({
        serverId
      });
    }
  }
  next();
};

// src/services/jwt-auth.service.ts
var import_crypto = require("crypto");
var import_jsonwebtoken2 = __toESM(require("jsonwebtoken"), 1);
var JwtAuthService = class {
  // 15 seconds
  constructor(logger2) {
    this.logger = logger2;
    this.keyCache = /* @__PURE__ */ new Map();
    this.circuitBreakers = /* @__PURE__ */ new Map();
    this.rateLimits = /* @__PURE__ */ new Map();
    // Configuration constants
    this.CACHE_TTL = 36e5;
    // 1 hour
    this.CACHE_REFRESH_THRESHOLD = 3e5;
    // 5 minutes before expiry
    this.CIRCUIT_BREAKER_FAILURE_THRESHOLD = 5;
    this.CIRCUIT_BREAKER_TIMEOUT = 6e4;
    // 1 minute
    this.RATE_LIMIT_WINDOW = 6e4;
    // 1 minute
    this.RATE_LIMIT_MAX_REQUESTS = 10;
    // per window
    this.REQUEST_TIMEOUT = 15e3;
  }
  /**
   * Validate JWT signature using JWKS endpoint
   * Implements comprehensive error handling and caching
   */
  async validateJwtSignature(token, jwksUrl) {
    try {
      if (!this.checkRateLimit(jwksUrl)) {
        this.logger?.warn("Rate limit exceeded for JWKS endpoint", { jwksUrl });
        return { valid: false, error: "Rate limit exceeded for JWKS endpoint" };
      }
      const decoded = import_jsonwebtoken2.default.decode(token, { complete: true });
      if (!decoded || typeof decoded === "string") {
        return { valid: false, error: "Invalid JWT format" };
      }
      const kid = decoded.header.kid;
      if (!kid) {
        return { valid: false, error: "Missing key ID in JWT header" };
      }
      const algorithm = decoded.header.alg;
      if (!algorithm || !["RS256", "RS384", "RS512"].includes(algorithm)) {
        return {
          valid: false,
          error: `Unsupported or missing algorithm: ${algorithm}. Only RS256, RS384, RS512 are supported.`
        };
      }
      const keys = await this.fetchJwksKeysWithCircuitBreaker(jwksUrl);
      const jwksKey = keys.find((key) => key.kid === kid);
      if (!jwksKey) {
        await this.refreshJwksKeys(jwksUrl);
        const refreshedKeys = await this.fetchJwksKeysWithCircuitBreaker(jwksUrl);
        const refreshedKey = refreshedKeys.find((key) => key.kid === kid);
        if (!refreshedKey) {
          return { valid: false, error: `Key ID ${kid} not found in JWKS after refresh` };
        }
        const publicKey2 = this.jwksKeyToPem(refreshedKey);
        return this.verifySignature(token, publicKey2, algorithm);
      }
      const publicKey = this.jwksKeyToPem(jwksKey);
      return this.verifySignature(token, publicKey, algorithm);
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      this.logger?.error("JWT signature validation failed", {
        jwksUrl,
        error: errorMessage
      });
      return { valid: false, error: `JWT validation error: ${errorMessage}` };
    }
  }
  /**
   * Verify JWT signature with specific algorithm
   */
  verifySignature(token, publicKey, algorithm) {
    try {
      const payload = import_jsonwebtoken2.default.verify(token, publicKey, {
        algorithms: [algorithm],
        ignoreExpiration: true
        // We only verify signature, not expiration
      });
      return { valid: true, payload };
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      this.logger?.warn("JWT signature verification failed", { error: errorMessage });
      return { valid: false, error: `Signature verification failed: ${errorMessage}` };
    }
  }
  /**
   * Fetch JWKS keys with circuit breaker pattern
   */
  async fetchJwksKeysWithCircuitBreaker(jwksUrl) {
    const circuitState = this.getCircuitBreakerState(jwksUrl);
    if (circuitState.state === "OPEN") {
      if (Date.now() < circuitState.nextAttemptTime) {
        throw new Error(
          `Circuit breaker OPEN for ${jwksUrl}. Next attempt at ${new Date(circuitState.nextAttemptTime).toISOString()}`
        );
      } else {
        circuitState.state = "HALF_OPEN";
      }
    }
    try {
      const keys = await this.fetchJwksKeys(jwksUrl);
      if (circuitState.state !== "CLOSED") {
        circuitState.state = "CLOSED";
        circuitState.failureCount = 0;
      }
      return keys;
    } catch (error) {
      circuitState.failureCount++;
      circuitState.lastFailureTime = Date.now();
      if (circuitState.failureCount >= this.CIRCUIT_BREAKER_FAILURE_THRESHOLD) {
        circuitState.state = "OPEN";
        circuitState.nextAttemptTime = Date.now() + this.CIRCUIT_BREAKER_TIMEOUT;
        this.logger?.error("Circuit breaker OPEN due to failures", {
          jwksUrl,
          failureCount: circuitState.failureCount
        });
      }
      throw error;
    }
  }
  /**
   * Fetch JWKS keys with intelligent caching
   */
  async fetchJwksKeys(jwksUrl) {
    try {
      const cached = this.keyCache.get(jwksUrl);
      if (cached) {
        const now = Date.now();
        if (now < cached.expiry) {
          if (now > cached.expiry - this.CACHE_REFRESH_THRESHOLD) {
            this.refreshJwksKeysInBackground(jwksUrl);
          }
          return cached.keys;
        }
      }
      return await this.fetchFreshJwksKeys(jwksUrl);
    } catch (error) {
      const cached = this.keyCache.get(jwksUrl);
      if (cached && cached.keys.length > 0) {
        this.logger?.warn("Using stale cached JWKS keys due to fetch failure", {
          jwksUrl,
          cacheAge: Date.now() - cached.lastFetch
        });
        return cached.keys;
      }
      throw error;
    }
  }
  /**
   * Fetch fresh JWKS keys from endpoint
   */
  async fetchFreshJwksKeys(jwksUrl) {
    const response = await fetch(jwksUrl, {
      method: "GET",
      headers: {
        Accept: "application/json",
        "User-Agent": "AgentBridge/1.0",
        "Cache-Control": "no-cache"
      },
      signal: AbortSignal.timeout(this.REQUEST_TIMEOUT)
    });
    if (!response.ok) {
      throw new Error(`JWKS endpoint error: HTTP ${response.status} ${response.statusText}`);
    }
    const jwks = await response.json();
    if (!jwks.keys || !Array.isArray(jwks.keys)) {
      throw new Error("Invalid JWKS format: missing or invalid keys array");
    }
    const rsaKeys = jwks.keys.filter((key) => {
      if (typeof key === "object" && key !== null) {
        const jwksKey = key;
        return jwksKey.kty === "RSA" && (jwksKey.use === "sig" || !jwksKey.use) && // use is optional, default to sig
        jwksKey.n && jwksKey.e && jwksKey.kid;
      }
      return false;
    }).map((key) => key);
    if (rsaKeys.length === 0) {
      throw new Error("No valid RSA signature keys found in JWKS");
    }
    const now = Date.now();
    this.keyCache.set(jwksUrl, {
      keys: rsaKeys,
      expiry: now + this.CACHE_TTL,
      lastFetch: now,
      failureCount: 0
    });
    return rsaKeys;
  }
  /**
   * Refresh JWKS keys in background
   */
  async refreshJwksKeysInBackground(jwksUrl) {
    try {
      await this.fetchFreshJwksKeys(jwksUrl);
    } catch (error) {
      this.logger?.warn("Background JWKS refresh failed", {
        jwksUrl,
        error: error instanceof Error ? error.message : String(error)
      });
    }
  }
  /**
   * Force refresh JWKS keys (for key rotation)
   */
  async refreshJwksKeys(jwksUrl) {
    await this.fetchFreshJwksKeys(jwksUrl);
  }
  /**
   * Check rate limiting for JWKS endpoint
   */
  checkRateLimit(jwksUrl) {
    const now = Date.now();
    const rateLimit = this.rateLimits.get(jwksUrl) || { count: 0, windowStart: now };
    if (now - rateLimit.windowStart > this.RATE_LIMIT_WINDOW) {
      rateLimit.count = 0;
      rateLimit.windowStart = now;
    }
    if (rateLimit.count >= this.RATE_LIMIT_MAX_REQUESTS) {
      return false;
    }
    rateLimit.count++;
    this.rateLimits.set(jwksUrl, rateLimit);
    return true;
  }
  /**
   * Get circuit breaker state for endpoint
   */
  getCircuitBreakerState(jwksUrl) {
    if (!this.circuitBreakers.has(jwksUrl)) {
      this.circuitBreakers.set(jwksUrl, {
        state: "CLOSED",
        failureCount: 0,
        lastFailureTime: 0,
        nextAttemptTime: 0
      });
    }
    return this.circuitBreakers.get(jwksUrl);
  }
  /**
   * Convert JWKS key to proper format for verification using Node.js crypto
   */
  jwksKeyToPem(jwksKey) {
    try {
      const publicKey = (0, import_crypto.createPublicKey)({
        key: {
          kty: jwksKey.kty,
          n: jwksKey.n,
          e: jwksKey.e
        },
        format: "jwk"
      });
      return publicKey.export({ type: "spki", format: "pem" });
    } catch (error) {
      throw new Error(`Failed to convert JWKS key to PEM: ${error instanceof Error ? error.message : String(error)}`);
    }
  }
  /**
   * Get cache statistics for monitoring
   */
  getCacheStats() {
    const stats = {};
    for (const [url, cached] of this.keyCache.entries()) {
      const circuitState = this.circuitBreakers.get(url);
      const rateLimit = this.rateLimits.get(url);
      stats[url] = {
        keyCount: cached.keys.length,
        lastFetch: new Date(cached.lastFetch).toISOString(),
        expiry: new Date(cached.expiry).toISOString(),
        expired: Date.now() > cached.expiry,
        failureCount: cached.failureCount,
        circuitBreakerState: circuitState?.state || "UNKNOWN",
        rateLimitCount: rateLimit?.count || 0
      };
    }
    return stats;
  }
};

// src/services/mcp-access.service.ts
init_cache_service();
async function validateServerAccess(db, logger2, serverId, userEmail) {
  logger2.debug(`Validating server access for user ${userEmail} and server ${serverId}`);
  return await cacheGetOrAdd(
    { type: "server_access" /* SERVER_ACCESS */, ids: [serverId, userEmail] },
    async () => {
      const server = await cacheGetOrAdd(
        { type: "server" /* SERVER */, ids: [serverId] },
        async () => {
          return await db.mcpServer.findFirst({
            where: {
              id: serverId
            }
          });
        }
      );
      if (!server) {
        return {
          error: {
            code: APP_INVALID_SERVER,
            message: `Server not found: ${serverId}`
          }
        };
      }
      if (!server.enabled) {
        return {
          error: {
            code: APP_INVALID_SERVER,
            message: `Server is not enabled: ${serverId}`
          }
        };
      }
      logger2.debug(`Looking for user with email: ${userEmail} and tenantId: ${server.tenantId}`);
      const user = await db.endUser.findFirst({
        where: {
          email: userEmail,
          tenantId: server.tenantId
        },
        select: {
          id: true,
          enabled: true
        }
      });
      if (!user) {
        return { userNotFound: true };
      }
      if (!user.enabled) {
        return {
          error: {
            code: APP_INSUFFICIENT_PERMISSIONS,
            message: `User ${userEmail} does not have access to server: ${serverId}`
          }
        };
      }
      return {};
    }
  );
}

// src/services/strategies/base-auth.strategy.ts
var BaseAuthStrategy = class {
  async authenticate(req, config2) {
    try {
      if (!isAppRequest(req)) {
        return {
          success: false,
          error: "Invalid request context for authentication"
        };
      }
      const authHeader = req.headers.authorization;
      if (!authHeader || !authHeader.startsWith("Bearer ")) {
        return {
          success: false,
          error: "No authorization header provided for BASE authentication"
        };
      }
      const token = authHeader.split(" ")[1];
      const { verifyEndUserToken: verifyEndUserToken2 } = await Promise.resolve().then(() => (init_jwt_service(), jwt_service_exports));
      const decoded = await verifyEndUserToken2(token);
      if (!decoded) {
        return {
          success: false,
          error: "Invalid or expired user token"
        };
      }
      const userEmail = decoded.email;
      if (!userEmail) {
        return {
          success: false,
          error: "No user email found in token"
        };
      }
      const accessResult = await validateServerAccess(req.db, req.logger, config2.serverId, userEmail);
      if (accessResult.error) {
        return {
          success: false,
          error: accessResult.error.message
        };
      }
      if (accessResult.userNotFound) {
        return {
          success: false,
          error: `User ${userEmail} not found or does not have access to server`
        };
      }
      const user = await req.db.endUser.findFirst({
        where: {
          email: userEmail
        },
        select: {
          id: true,
          tenantId: true
        }
      });
      return {
        success: true,
        userContext: {
          userId: user?.id,
          tenantId: user?.tenantId,
          authType: "BASE" /* BASE */
        },
        metadata: {
          validatedAt: /* @__PURE__ */ new Date()
        }
      };
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      return {
        success: false,
        error: `Base authentication failed: ${errorMessage}`
      };
    }
  }
  async validateConfiguration(config2) {
    return {
      valid: true
    };
  }
  /**
   * Get providers for BASE auth (returns empty array as BASE auth doesn't use providers)
   */
  async getProviders(serverId) {
    return [];
  }
  /**
   * Create provider for BASE auth (not applicable)
   */
  async createProvider(serverId, providerData) {
    throw new Error("BASE authentication does not support providers");
  }
  /**
   * Update provider for BASE auth (not applicable)
   */
  async updateProvider(serverId, providerId, providerData) {
    throw new Error("BASE authentication does not support providers");
  }
  /**
   * Delete provider for BASE auth (not applicable)
   */
  async deleteProvider(serverId, providerId) {
    throw new Error("BASE authentication does not support providers");
  }
  /**
   * Handle BASE configuration update (no special config needed)
   */
  async handleConfigUpdate(serverId, config2) {
    return null;
  }
};

// src/services/strategies/jwt-auth.strategy.ts
var JwtAuthStrategy = class {
  constructor(jwtService, db, logger2) {
    this.jwtService = jwtService;
    this.db = db;
    this.logger = logger2;
  }
  async authenticate(req, config2) {
    try {
      if (!config2.jwtProvider) {
        return {
          success: false,
          error: "JWT provider not configured for this server"
        };
      }
      if (!config2.jwtProvider.enabled) {
        return {
          success: false,
          error: "JWT provider is disabled"
        };
      }
      const token = this.extractJwtToken(req);
      if (!token) {
        return {
          success: false,
          error: "No JWT token found in request. Expected Authorization header with Bearer token."
        };
      }
      const validationResult = await this.jwtService.validateJwtSignature(token, config2.jwtProvider.jwksUrl);
      if (!validationResult.valid) {
        return {
          success: false,
          error: validationResult.error || "JWT signature validation failed"
        };
      }
      let userId;
      let tenantId;
      if (validationResult.payload && typeof validationResult.payload === "object") {
        const payload = validationResult.payload;
        userId = payload.id || payload.sub;
        tenantId = payload.tenantId;
        this.logger?.debug("JWT authentication extracted user context", {
          userId,
          tenantId,
          providerId: config2.jwtProvider.id
        });
      }
      return {
        success: true,
        userContext: {
          userId,
          tenantId,
          authType: "JWT" /* JWT */,
          originalToken: token
        },
        metadata: {
          providerId: config2.jwtProvider.id,
          validatedAt: /* @__PURE__ */ new Date()
        }
      };
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      this.logger?.error("JWT authentication failed", { error: errorMessage });
      return {
        success: false,
        error: `JWT authentication failed: ${errorMessage}`
      };
    }
  }
  async validateConfiguration(config2) {
    const errors = [];
    if (!config2.jwtProvider) {
      errors.push("JWT provider is required for JWT authentication");
    } else {
      if (!config2.jwtProvider.jwksUrl) {
        errors.push("JWKS URL is required");
      } else {
        try {
          new URL(config2.jwtProvider.jwksUrl);
        } catch {
          errors.push("Invalid JWKS URL format");
        }
      }
      if (!config2.jwtProvider.enabled) {
        errors.push("JWT provider is disabled");
      }
      if (config2.jwtProvider.jwksUrl && config2.jwtProvider.enabled) {
        try {
          await this.jwtService.fetchJwksKeys(config2.jwtProvider.jwksUrl);
        } catch (error) {
          const errorMessage = error instanceof Error ? error.message : String(error);
          errors.push(`JWKS endpoint test failed: ${errorMessage}`);
        }
      }
    }
    return {
      valid: errors.length === 0,
      errors: errors.length > 0 ? errors : void 0
    };
  }
  /**
   * Get JWT providers for a server
   */
  async getProviders(serverId) {
    try {
      const providers = await this.db.serverJwtProvider.findMany({
        where: { serverId },
        orderBy: { createdAt: "desc" }
      });
      return providers;
    } catch (error) {
      this.logger?.error("Failed to get JWT providers", { serverId, error });
      throw error;
    }
  }
  /**
   * Create JWT provider for a server
   */
  async createProvider(serverId, providerData) {
    const { name, jwksUrl, enabled = true } = providerData;
    try {
      const server = await this.db.mcpServer.findUnique({
        where: { id: serverId },
        select: { tenantId: true }
      });
      if (!server) {
        throw new Error(`Server ${serverId} not found`);
      }
      const provider = await this.db.serverJwtProvider.create({
        data: {
          serverId,
          tenantId: server.tenantId,
          name,
          jwksUrl,
          enabled
        }
      });
      return provider;
    } catch (error) {
      this.logger?.error("Failed to create JWT provider", { serverId, error });
      throw error;
    }
  }
  /**
   * Update JWT provider for a server
   */
  async updateProvider(serverId, providerId, providerData) {
    const { name, jwksUrl, enabled } = providerData;
    try {
      const provider = await this.db.serverJwtProvider.update({
        where: {
          id: providerId,
          serverId
          // Ensure provider belongs to the server
        },
        data: {
          ...name !== void 0 && { name },
          ...jwksUrl !== void 0 && { jwksUrl },
          ...enabled !== void 0 && { enabled }
        }
      });
      return provider;
    } catch (error) {
      this.logger?.error("Failed to update JWT provider", { serverId, providerId, error });
      throw error;
    }
  }
  /**
   * Delete JWT provider for a server
   */
  async deleteProvider(serverId, providerId) {
    try {
      await this.db.serverJwtProvider.delete({
        where: {
          id: providerId,
          serverId
          // Ensure provider belongs to the server
        }
      });
    } catch (error) {
      this.logger?.error("Failed to delete JWT provider", { serverId, providerId, error });
      throw error;
    }
  }
  /**
   * Handle JWT configuration update
   */
  async handleConfigUpdate(serverId, config2) {
    if (!config2.jwtProviderId) {
      return null;
    }
    try {
      const existingAuthConfig = await this.db.serverAuthConfig.findUnique({
        where: { serverId }
      });
      if (existingAuthConfig) {
        await this.db.serverAuthConfig.update({
          where: { id: existingAuthConfig.id },
          data: {
            authType: config2.authType,
            jwtProviderId: config2.jwtProviderId
          }
        });
        return existingAuthConfig.id;
      } else {
        const newAuthConfig = await this.db.serverAuthConfig.create({
          data: {
            serverId,
            authType: config2.authType,
            jwtProviderId: config2.jwtProviderId
          }
        });
        return newAuthConfig.id;
      }
    } catch (error) {
      this.logger?.error("Failed to handle JWT config update", { serverId, error });
      throw error;
    }
  }
  /**
   * Extract JWT token from various request locations
   * Supports: Authorization header (Bearer), query parameter, custom headers
   */
  extractJwtToken(req) {
    const authHeader = req.headers.authorization;
    if (authHeader && authHeader.startsWith("Bearer ")) {
      return authHeader.substring(7);
    }
    const queryToken = req.query.token;
    if (typeof queryToken === "string") {
      return queryToken;
    }
    const customHeader = req.headers["x-auth-token"];
    if (typeof customHeader === "string") {
      return customHeader;
    }
    const bodyToken = req.body?.token;
    if (typeof bodyToken === "string") {
      return bodyToken;
    }
    return null;
  }
};

// src/services/factories/auth-strategy.factory.ts
var AuthStrategyFactory = class {
  constructor(db, logger2) {
    this.strategies = /* @__PURE__ */ new Map();
    this.strategies.set("BASE" /* BASE */, new BaseAuthStrategy());
    this.strategies.set("JWT" /* JWT */, new JwtAuthStrategy(new JwtAuthService(logger2), db, logger2));
  }
  /**
   * Get authentication strategy for the given auth type
   * @throws Error if auth type is not supported
   */
  getStrategy(authType) {
    const strategy = this.strategies.get(authType);
    if (!strategy) {
      throw new Error(`Unsupported authentication strategy: ${authType}`);
    }
    return strategy;
  }
  /**
   * Check if an auth type is supported
   */
  isSupported(authType) {
    return this.strategies.has(authType);
  }
  /**
   * Get all supported auth types
   */
  getSupportedAuthTypes() {
    return Array.from(this.strategies.keys());
  }
};

// src/services/server-auth.service.ts
var ServerAuthService = class {
  constructor(db, logger2) {
    this.db = db;
    this.logger = logger2;
    this.strategyFactory = new AuthStrategyFactory(db, logger2);
  }
  /**
   * Authenticate a server request using the configured authentication strategy
   * This method uses the Strategy Pattern to avoid hardcoded authentication logic
   */
  async authenticateServerRequest(req, serverId) {
    try {
      this.logger?.debug("Authenticating server request", { serverId });
      const config2 = await this.getServerAuthConfig(serverId);
      if (!config2) {
        return {
          success: false,
          error: `No authentication configuration found for server: ${serverId}`
        };
      }
      const strategy = this.strategyFactory.getStrategy(config2.authType);
      const result = await strategy.authenticate(req, config2);
      this.logger?.debug("Authentication result", {
        serverId,
        authType: config2.authType,
        success: result.success
      });
      return result;
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      this.logger?.error("Failed to authenticate server request", {
        serverId,
        error: errorMessage
      });
      return {
        success: false,
        error: `Authentication failed: ${errorMessage}`
      };
    }
  }
  /**
   * Get server authentication configuration
   */
  async getServerAuthConfig(serverId) {
    try {
      this.logger?.debug("Getting server auth config", { serverId });
      const server = await this.db.mcpServer.findFirst({
        where: { id: serverId },
        include: {
          authConfig: {
            include: {
              jwtProvider: true
            }
          }
        }
      });
      if (!server) {
        throw new Error(`Server not found: ${serverId}`);
      }
      if (!server.authConfig) {
        return {
          id: `default-${serverId}`,
          serverId: server.id,
          authType: server.authType || "BASE" /* BASE */
        };
      }
      return {
        id: server.authConfig.id,
        serverId: server.id,
        authType: server.authConfig.authType,
        jwtProviderId: server.authConfig.jwtProviderId || void 0,
        jwtProvider: server.authConfig.jwtProvider || void 0
      };
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      this.logger?.error("Failed to get server auth config", {
        serverId,
        error: errorMessage
      });
      throw error;
    }
  }
  /**
   * Update server authentication configuration
   */
  async updateServerAuthConfig(serverId, config2) {
    try {
      this.logger?.debug("Updating server auth config", { serverId, config: config2 });
      if (!this.strategyFactory.isSupported(config2.authType)) {
        throw new Error(`Unsupported authentication type: ${config2.authType}`);
      }
      const strategy = this.strategyFactory.getStrategy(config2.authType);
      const authConfigId = await strategy.handleConfigUpdate(serverId, {
        authType: config2.authType,
        jwtProviderId: config2.jwtProviderId || void 0
      });
      const server = await this.db.mcpServer.update({
        where: { id: serverId },
        data: {
          authType: config2.authType,
          authConfigId
        },
        include: {
          authConfig: {
            include: {
              jwtProvider: true
            }
          }
        }
      });
      if (config2.authType === "JWT" /* JWT */) {
        try {
          await this.addJwtHeadersToAllTools(serverId);
          this.logger?.info("Automatically added JWT headers to all tools after setting JWT auth type", { serverId });
        } catch (error) {
          this.logger?.warn("Failed to automatically add JWT headers to tools", { serverId, error });
        }
      }
      return {
        serverId: server.id,
        authType: server.authType,
        authConfig: server.authConfig ? {
          id: server.authConfig.id,
          authType: server.authConfig.authType,
          jwtProvider: server.authConfig.jwtProvider ? {
            id: server.authConfig.jwtProvider.id,
            name: server.authConfig.jwtProvider.name,
            jwksUrl: server.authConfig.jwtProvider.jwksUrl,
            enabled: server.authConfig.jwtProvider.enabled
          } : void 0
        } : void 0
      };
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      this.logger?.error("Failed to update server auth config", {
        serverId,
        config: config2,
        error: errorMessage
      });
      throw error;
    }
  }
  /**
   * Get supported authentication types
   * Returns all authentication types supported by the current strategy factory
   */
  getSupportedAuthTypes() {
    return this.strategyFactory.getSupportedAuthTypes();
  }
  /**
   * Get auth providers for a server (strategy-based)
   */
  async getAuthProviders(serverId) {
    try {
      const config2 = await this.getServerAuthConfig(serverId);
      if (!config2) {
        return [];
      }
      const strategy = this.strategyFactory.getStrategy(config2.authType);
      return await strategy.getProviders(serverId);
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      this.logger?.error("Failed to get auth providers", {
        serverId,
        error: errorMessage
      });
      throw error;
    }
  }
  /**
   * Create auth provider for a server (strategy-based)
   */
  async createAuthProvider(serverId, providerData) {
    try {
      const config2 = await this.getServerAuthConfig(serverId);
      if (!config2) {
        throw new Error("No authentication configuration found");
      }
      const strategy = this.strategyFactory.getStrategy(config2.authType);
      return await strategy.createProvider(serverId, providerData);
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      this.logger?.error("Failed to create auth provider", {
        serverId,
        error: errorMessage
      });
      throw error;
    }
  }
  /**
   * Update auth provider for a server (strategy-based)
   */
  async updateAuthProvider(serverId, providerId, providerData) {
    try {
      const config2 = await this.getServerAuthConfig(serverId);
      if (!config2) {
        throw new Error("No authentication configuration found");
      }
      const strategy = this.strategyFactory.getStrategy(config2.authType);
      return await strategy.updateProvider(serverId, providerId, providerData);
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      this.logger?.error("Failed to update auth provider", {
        serverId,
        providerId,
        error: errorMessage
      });
      throw error;
    }
  }
  /**
   * Delete auth provider for a server (strategy-based)
   */
  async deleteAuthProvider(serverId, providerId) {
    try {
      const config2 = await this.getServerAuthConfig(serverId);
      if (!config2) {
        throw new Error("No authentication configuration found");
      }
      const strategy = this.strategyFactory.getStrategy(config2.authType);
      await strategy.deleteProvider(serverId, providerId);
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      this.logger?.error("Failed to delete auth provider", {
        serverId,
        providerId,
        error: errorMessage
      });
      throw error;
    }
  }
  /**
   * Get JWT providers for a server
   */
  async getJwtProviders(serverId) {
    try {
      this.logger?.debug("Getting JWT providers", { serverId });
      return await this.db.serverJwtProvider.findMany({
        where: { serverId },
        orderBy: { createdAt: "desc" }
      });
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      this.logger?.error("Failed to get JWT providers", {
        serverId,
        error: errorMessage
      });
      throw error;
    }
  }
  /**
   * Create a new JWT provider for a server
   */
  async createJwtProvider(serverId, data) {
    try {
      this.logger?.debug("Creating JWT provider", { serverId, data });
      const server = await this.db.mcpServer.findUnique({
        where: { id: serverId },
        select: { tenantId: true }
      });
      if (!server) {
        throw new Error(`Server not found: ${serverId}`);
      }
      return await this.db.serverJwtProvider.create({
        data: {
          serverId,
          tenantId: server.tenantId,
          name: data.name,
          jwksUrl: data.jwksUrl,
          enabled: data.enabled ?? true
        }
      });
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      this.logger?.error("Failed to create JWT provider", {
        serverId,
        data,
        error: errorMessage
      });
      throw error;
    }
  }
  /**
   * Update a JWT provider
   */
  async updateJwtProvider(serverId, providerId, data) {
    try {
      this.logger?.debug("Updating JWT provider", { serverId, providerId, data });
      return await this.db.serverJwtProvider.update({
        where: {
          id: providerId,
          serverId
          // Ensure the provider belongs to the specified server
        },
        data: {
          ...data.name && { name: data.name },
          ...data.jwksUrl && { jwksUrl: data.jwksUrl },
          ...data.enabled !== void 0 && { enabled: data.enabled }
        }
      });
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      this.logger?.error("Failed to update JWT provider", {
        serverId,
        providerId,
        data,
        error: errorMessage
      });
      throw error;
    }
  }
  /**
   * Delete a JWT provider
   */
  async deleteJwtProvider(serverId, providerId) {
    try {
      this.logger?.debug("Deleting JWT provider", { serverId, providerId });
      await this.db.serverJwtProvider.delete({
        where: {
          id: providerId,
          serverId
          // Ensure the provider belongs to the specified server
        }
      });
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      this.logger?.error("Failed to delete JWT provider", {
        serverId,
        providerId,
        error: errorMessage
      });
      throw error;
    }
  }
  /**
   * Add JWT headers to all tools for a server
   * This updates the requestParameterOverrides of all tools to include Authorization header with JWT token
   */
  async addJwtHeadersToAllTools(serverId) {
    try {
      this.logger?.debug("Adding JWT headers to all tools for server", { serverId });
      const server = await this.db.mcpServer.findUnique({
        where: { id: serverId },
        include: {
          authConfig: {
            include: {
              jwtProvider: true
            }
          }
        }
      });
      if (!server) {
        throw new Error(`Server not found: ${serverId}`);
      }
      if (server.authType !== "JWT" /* JWT */) {
        throw new Error(`Server ${serverId} does not use JWT authentication. Current auth type: ${server.authType}`);
      }
      const tools = await this.db.tool.findMany({
        where: { serverId },
        select: { id: true, requestParameterOverrides: true }
      });
      if (tools.length === 0) {
        this.logger?.info("No tools found for server", { serverId });
        return { updatedToolsCount: 0 };
      }
      const updatePromises = tools.map(async (tool2) => {
        const existingOverrides = tool2.requestParameterOverrides ? JSON.parse(JSON.stringify(tool2.requestParameterOverrides)) : {};
        const updatedOverrides = {
          ...existingOverrides,
          Authorization: {
            value: "Bearer {{auth.jwt}}",
            location: "header" /* HEADER */
          }
        };
        return this.db.tool.update({
          where: { id: tool2.id },
          data: {
            requestParameterOverrides: updatedOverrides
          }
        });
      });
      await Promise.all(updatePromises);
      this.logger?.info("Successfully added JWT headers to all tools", {
        serverId,
        updatedToolsCount: tools.length
      });
      return { updatedToolsCount: tools.length };
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      this.logger?.error("Failed to add JWT headers to all tools", {
        serverId,
        error: errorMessage
      });
      throw error;
    }
  }
  /**
   * Validate a JWKS URL by fetching and parsing it
   */
  async validateJwksUrl(jwksUrl) {
    try {
      this.logger?.debug("Validating JWKS URL", { jwksUrl });
      try {
        new URL(jwksUrl);
      } catch {
        return {
          valid: false,
          error: "Invalid URL format"
        };
      }
      this.logger?.debug("Fetching JWKS from URL", { jwksUrl });
      const response = await fetch(jwksUrl, {
        method: "GET",
        headers: {
          Accept: "application/json"
        },
        // Add timeout to prevent hanging requests
        signal: AbortSignal.timeout(1e4)
        // 10 second timeout
      });
      this.logger?.debug("JWKS fetch response", {
        jwksUrl,
        status: response.status,
        statusText: response.statusText,
        headers: Object.fromEntries(response.headers.entries())
      });
      if (!response.ok) {
        this.logger?.warn("JWKS URL fetch failed", {
          jwksUrl,
          status: response.status,
          statusText: response.statusText
        });
        return {
          valid: false,
          error: `Failed to fetch JWKS: ${response.status} ${response.statusText}`
        };
      }
      let jwks;
      try {
        jwks = await response.json();
      } catch {
        return {
          valid: false,
          error: "Response is not valid JSON"
        };
      }
      if (!jwks || typeof jwks !== "object") {
        return {
          valid: false,
          error: "JWKS response is not a valid object"
        };
      }
      if (!Array.isArray(jwks.keys)) {
        return {
          valid: false,
          error: "JWKS does not contain a 'keys' array"
        };
      }
      if (jwks.keys.length === 0) {
        return {
          valid: false,
          error: "JWKS contains no keys"
        };
      }
      for (let i = 0; i < jwks.keys.length; i++) {
        const key = jwks.keys[i];
        if (!key.kty) {
          return {
            valid: false,
            error: `Key at index ${i} is missing required 'kty' property`
          };
        }
      }
      return {
        valid: true,
        keyCount: jwks.keys.length
      };
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      this.logger?.error("Failed to validate JWKS URL", {
        jwksUrl,
        error: errorMessage
      });
      if (error instanceof TypeError && error.message.includes("fetch")) {
        return {
          valid: false,
          error: "Network error: Unable to fetch JWKS URL"
        };
      }
      if (error instanceof Error && error.name === "TimeoutError") {
        return {
          valid: false,
          error: "Timeout: JWKS URL did not respond within 10 seconds"
        };
      }
      return {
        valid: false,
        error: `Validation failed: ${errorMessage}`
      };
    }
  }
};

// src/routes/mcp.routes.ts
var router6 = (0, import_express6.Router)();
var serverAuthMiddleware;
var enhancedServerAuth = async (req, res, next) => {
  const appReq = req;
  if (!serverAuthMiddleware) {
    try {
      const serverAuthService = new ServerAuthService(appReq.db, appReq.logger);
      serverAuthMiddleware = createServerAuthMiddleware(serverAuthService, appReq.logger);
      appReq.logger?.info("Server authentication middleware lazy-initialized");
    } catch (error) {
      appReq.logger?.error("Failed to initialize server auth middleware:", error);
      return res.status(503).json({
        error: "Server authentication not configured",
        details: "Failed to initialize server authentication middleware"
      });
    }
  }
  return serverAuthMiddleware(appReq, res, next);
};
router6.post("/api/mcp", serverIdMiddleware, enhancedServerAuth, handleStreamablePost);
router6.get("/api/mcp", serverIdMiddleware, enhancedServerAuth, handleSSE);
router6.post("/api/mcp/messages", serverIdMiddleware, enhancedServerAuth, handleSSEMessage);
router6.delete("/api/mcp", handleNotAllowed);
var mcp_routes_default = router6;

// src/routes/mirror.routes.ts
var import_express7 = __toESM(require("express"), 1);

// src/controllers/mirror.controller.ts
var import_axios3 = __toESM(require("axios"), 1);
var import_http_status_codes8 = require("http-status-codes");
var import_url = require("url");
async function mirrorRequest(req, res, next) {
  if (!isAppRequest(req)) {
    throw new TypeGuardError();
  }
  try {
    const url = req.query.url;
    if (!url) {
      res.status(import_http_status_codes8.StatusCodes.BAD_REQUEST).json({ error: "Invalid URL provided", url });
      return;
    }
    try {
      new import_url.URL(url);
    } catch {
      res.status(import_http_status_codes8.StatusCodes.BAD_REQUEST).json({ error: "Invalid URL provided", url });
      return;
    }
    const response = await import_axios3.default.get(url, {
      headers: {
        Accept: "application/yaml,application/json"
      }
    });
    res.set("Content-Type", response.headers["content-type"] || "application/yaml");
    res.status(200).send(response.data);
  } catch (error) {
    req.logger.debug(error);
    next(error);
  }
}

// src/routes/mirror.routes.ts
var router7 = import_express7.default.Router();
router7.get("/", adminSessionMiddleware, mirrorRequest);
var mirror_routes_default = router7;

// src/routes/oauth.routes.ts
var import_express8 = require("express");

// src/controllers/oauth.controller.ts
var import_axios4 = __toESM(require("axios"), 1);
var crypto5 = __toESM(require("crypto"), 1);
var import_http_status_codes9 = require("http-status-codes");
init_cache_service();

// src/services/enduser.service.ts
var getServerById2 = async (db, serverId) => await db.mcpServer.findUnique({
  where: {
    id: serverId
  }
});
async function createEndUserIfNotExists(db, tenantId, email) {
  return db.endUser.upsert({
    where: {
      email_tenantId: {
        email: email.toLowerCase(),
        tenantId
      }
    },
    update: {},
    create: {
      email: email.toLowerCase(),
      tenantId,
      enabled: true
    }
  });
}
async function setEndUserOwnIdData(db, serverId, email, ownIdData) {
  const server = await getServerById2(db, serverId);
  if (!server) {
    return { status: "NOT_FOUND", error: "Server not found" };
  }
  await db.endUser.upsert({
    where: {
      email_tenantId: {
        email: email.toLowerCase(),
        tenantId: server.tenantId
      }
    },
    update: {
      ownidData: ownIdData
    },
    create: {
      email: email.toLowerCase(),
      tenantId: server.tenantId,
      ownidData: ownIdData,
      enabled: true
    }
  });
  return { status: "NO_CONTENT" };
}
async function getEndUserOwnIdData(db, serverId, email) {
  const server = await getServerById2(db, serverId);
  if (!server) {
    return { status: "NOT_FOUND", error: "Server not found" };
  }
  const user = await db.endUser.findUnique({
    where: {
      email_tenantId: {
        email: email.toLowerCase(),
        tenantId: server.tenantId
      }
    }
  });
  if (!user) {
    return { status: "NO_CONTENT" };
  }
  if (!user.enabled) {
    return { status: "LOCKED", error: "User not enabled" };
  }
  if (user.ownidData) {
    return { status: "OK", data: { ownIdData: user.ownidData } };
  }
  return { status: "NO_CONTENT" };
}
async function createEndUserSession(db, serverId, email, createToken) {
  const server = await getServerById2(db, serverId);
  if (!server) {
    return { status: "NOT_FOUND", error: "Server not found" };
  }
  await db.endUser.upsert({
    where: {
      email_tenantId: {
        email: email.toLowerCase(),
        tenantId: server.tenantId
      }
    },
    update: {},
    create: {
      email: email.toLowerCase(),
      emailVerified: true,
      tenantId: server.tenantId,
      enabled: true
    }
  });
  return { status: "OK", data: { token: await createToken() } };
}
var getEndUserByEmailAndServerId = async (db, email, serverId) => {
  const server = await getServerById2(db, serverId);
  if (!server) {
    return null;
  }
  return await db.endUser.findUnique({
    where: {
      email_tenantId: {
        email: email.toLowerCase(),
        tenantId: server.tenantId
      }
    }
  });
};

// src/controllers/oauth.controller.ts
init_jwt_service();

// src/services/ownid.secret.service.ts
var crypto4 = __toESM(require("crypto"), 1);
init_secrets_service();
var SIGNATURE_EXPIRATION_MSEC = 60 * 1e3;
var adminSharedSecret = async () => process.env.OWNID_ADMIN_SHARED_SECRET || (await getAppSecrets()).ownidAdminSharedSecret;
var enduserSharedSecret = async () => process.env.OWNID_ENDUSER_SHARED_SECRET || (await getAppSecrets()).ownidEnduserSharedSecret;
var signData = (sharedSecret, data) => {
  const hmac = crypto4.createHmac("sha256", Buffer.from(sharedSecret, "base64"));
  hmac.update(data);
  return hmac.digest("base64");
};

// src/controllers/oauth.controller.ts
var CONSOLE_URL = process.env.CONSOLE_URL || "http://localhost:4200";
var CONSOLE_AUTH_PATH = "/login";
var CONSOLE_SUCCESS_PATH = "/oauth/success";
var CONSOLE_FAILURE_PATH = "/oauth/callback";
var STUDIO_REDIRECT_ORIGINS = ["agentpass.ai", "agentpass.studio"];
var ALLOWED_REDIRECT_ORIGINS = ["https://claude.ai", "http://localhost", "http://127.0.0.1", "cursor://"];
var isRedirectUriAllowed = (req, uris) => uris.every(
  (uri) => [...ALLOWED_REDIRECT_ORIGINS, getHostUrl(req, true), getHostUrl(req, false)].some(
    (allowed) => uri.toLowerCase().startsWith(allowed.toLowerCase())
  ) || STUDIO_REDIRECT_ORIGINS.some((url) => new URL(uri).hostname.endsWith(url))
);
var getOAuthServerInfo = async (req, res) => {
  const baseUrl3 = getHostUrl(req, true);
  const issuer = new URL(baseUrl3).origin;
  res.json({
    issuer,
    authorization_endpoint: `${issuer}/api/oauth/authorize`,
    token_endpoint: `${issuer}/api/oauth/token`,
    registration_endpoint: `${issuer}/api/oauth/register`,
    scopes_supported: ["profile", "email", "openid"],
    response_types_supported: ["code"],
    grant_types_supported: ["authorization_code", "refresh_token"],
    token_endpoint_auth_methods_supported: ["client_secret_post"],
    code_challenge_methods_supported: ["S256"]
  });
};
var authorize = async (req, res) => {
  if (!isWithServerIdRequest(req)) {
    throw new TypeGuardError();
  }
  try {
    const { serverId } = req;
    const { redirect_uri, state: clientState, response_type, client_id, provider_id, admin_auth } = req.query;
    req.logger.debug("OAuth authorization request received", {
      serverId,
      redirect_uri,
      clientState,
      response_type,
      client_id,
      provider_id,
      scope: req.query.scope
    });
    const scope = req.query.scope === TOOL_SCOPE ? TOOL_SCOPE : ENDUSER_SCOPE;
    if (!serverId) {
      req.logger.warn("Server ID not provided in the request");
      return res.status(import_http_status_codes9.StatusCodes.BAD_REQUEST).json({ error: "Server ID is required" });
    }
    const server = await req.db.mcpServer.findUnique({
      where: {
        id: serverId
      }
    });
    if (!server) {
      return res.status(import_http_status_codes9.StatusCodes.NOT_FOUND).json({ error: `Server '${serverId}' not found` });
    }
    if (!redirect_uri) {
      req.logger.warn("Missing redirect_uri in authorization request");
      return res.status(import_http_status_codes9.StatusCodes.BAD_REQUEST).json({ error: "redirect_uri is required" });
    }
    if (!isRedirectUriAllowed(req, [redirect_uri])) {
      return res.status(import_http_status_codes9.StatusCodes.BAD_REQUEST).json({
        error: "invalid_redirect_uri",
        error_description: "Redirect URI must be one of the allowed origins"
      });
    }
    let userId = null;
    if (admin_auth) {
      const adminClaims = await verifyAdminToken(admin_auth);
      if (!adminClaims) {
        req.logger.warn("Invalid admin token provided");
        return res.status(import_http_status_codes9.StatusCodes.UNAUTHORIZED).json({ error: "Invalid admin token" });
      }
      userId = (await createEndUserIfNotExists(req.db, server.tenantId, adminClaims.email)).id;
    }
    if (provider_id) {
      const provider = await req.db.oAuthProvider.findFirstOrThrow({
        where: {
          id: provider_id
        }
      });
      const authUrl = getAuthorizeUrl(
        req,
        provider,
        clientState || "",
        serverId,
        userId,
        scope,
        req.ip || null,
        redirect_uri,
        client_id,
        response_type
      );
      req.logger.debug("Redirecting to OAuth provider", {
        provider: provider.name,
        redirectUri: authUrl.toString(),
        originalRedirectUri: redirect_uri,
        clientId: client_id
      });
      return res.redirect(authUrl.toString());
    }
    const stateData = {
      redirectUri: redirect_uri,
      clientState: clientState || "",
      clientId: client_id,
      serverId,
      scope,
      providerId: null,
      originAddress: req.ip || null,
      userId
    };
    const stateParam = encodeData(stateData);
    const consoleUrl = new URL(`${CONSOLE_URL}${CONSOLE_AUTH_PATH}`);
    consoleUrl.searchParams.append("scope", ENDUSER_SCOPE);
    consoleUrl.searchParams.append("state", stateParam);
    consoleUrl.searchParams.append("redirect_uri", callbackUrl(req));
    consoleUrl.searchParams.append("server_id", serverId || "");
    consoleUrl.searchParams.append("server_name", server.name);
    req.logger.debug("Redirecting to console to choose provider", {
      redirectUri: consoleUrl.toString(),
      originalRedirectUri: redirect_uri,
      clientId: client_id
    });
    return res.redirect(consoleUrl.toString());
  } catch (error) {
    req.logger.error("Error in OAuth authorize endpoint", error);
    const message = error instanceof OAuthError ? error.message : "Failed to process authorization request";
    return res.redirect(`${CONSOLE_URL}${CONSOLE_FAILURE_PATH}?error=${encodeURIComponent(message)}`);
  }
};
var handleCallback = async (req, res) => {
  if (!isAppRequest(req)) {
    throw new TypeGuardError();
  }
  try {
    const { code, state, error } = req.query;
    if (error) {
      req.logger.error("OAuth callback received with error", error);
      return res.status(import_http_status_codes9.StatusCodes.BAD_REQUEST).json({ error });
    }
    if (!code) {
      req.logger.error("OAuth callback received without code");
      return res.status(import_http_status_codes9.StatusCodes.BAD_REQUEST).json({ error: "No code received from OAuth provider" });
    }
    if (!state) {
      req.logger.error("OAuth callback received without state");
      return res.status(import_http_status_codes9.StatusCodes.BAD_REQUEST).json({ error: "No state received from OAuth provider" });
    }
    let stateData;
    try {
      stateData = decodeData(state);
    } catch (e) {
      req.logger.error("Failed to parse state parameter", e);
      return res.status(import_http_status_codes9.StatusCodes.BAD_REQUEST).json({ error: "Invalid state parameter" });
    }
    const { redirectUri, clientState, clientId, serverId, scope, providerId } = stateData;
    if (stateData.scope === TOOL_SCOPE && providerId) {
      req.logger.debug("Exchanging code for token with provider for tool scope");
      const provider = await req.db.oAuthProvider.findFirstOrThrow({
        where: {
          id: providerId
        }
      });
      const tokenData = await exchangeCodeForToken(req.logger, provider, code, callbackUrl(req));
      const userId = stateData.userId;
      await persistToken(req.db, req.logger, userId, providerId, tokenData, stateData.originAddress);
      if (stateData.redirectUri) {
        const redirectUrl2 = new URL(stateData.redirectUri);
        redirectUrl2.searchParams.append("state", stateData.clientState);
        return res.redirect(redirectUrl2.toString());
      }
      return res.redirect(`${CONSOLE_URL}${CONSOLE_SUCCESS_PATH}`);
    }
    if (!redirectUri) {
      req.logger.error("State parameter missing redirectUri");
      return res.status(import_http_status_codes9.StatusCodes.BAD_REQUEST).json({ error: "Invalid state parameter structure" });
    }
    const redirectUrl = new URL(redirectUri);
    redirectUrl.searchParams.append("postAuthRedirectUri", `${CONSOLE_URL}${CONSOLE_SUCCESS_PATH}`);
    if (scope === ENDUSER_SCOPE) {
      const shortSession = decodeData(code);
      const sharedSecret = await enduserSharedSecret();
      if (Math.abs(Date.now() - shortSession.timestamp) > SIGNATURE_EXPIRATION_MSEC || signData(sharedSecret, `${shortSession.email}.${shortSession.timestamp}`) !== shortSession.signature) {
        return res.status(import_http_status_codes9.StatusCodes.UNAUTHORIZED).json({ error: "Invalid or expired short session signature" });
      }
      const jti = crypto5.randomUUID();
      const user = await getEndUserByEmailAndServerId(req.db, shortSession.email, stateData.serverId);
      if (!user) {
        return res.status(import_http_status_codes9.StatusCodes.NOT_FOUND).json({ error: "User not found" });
      }
      const token = await generateEndUserToken(user, jti);
      await persistToken(
        req.db,
        req.logger,
        user.id,
        null,
        {
          accessToken: token,
          scope: ENDUSER_SCOPE,
          expiresIn: null
        },
        stateData.originAddress,
        jti
      );
      clearCacheByPartialKey("enduser_token" /* ENDUSER_TOKEN */, user.email);
      const responseData = {
        access_token: token,
        original_redirect_uri: stateData.redirectUri,
        token_type: "Bearer"
      };
      const tokenAsCode = encodeData(responseData);
      redirectUrl.searchParams.append("code", tokenAsCode);
    } else {
      if (!serverId) {
        req.logger.error("State parameter missing serverId");
        return res.status(import_http_status_codes9.StatusCodes.BAD_REQUEST).json({ error: "Invalid state parameter structure" });
      }
      req.logger.debug("OAuth callback received", {
        redirectUri,
        clientState,
        clientId,
        serverId,
        codeReceived: !!code
      });
      redirectUrl.searchParams.append("code", code);
    }
    if (clientState) {
      redirectUrl.searchParams.append("state", clientState);
    }
    if (clientId) {
      redirectUrl.searchParams.append("client_id", clientId);
    }
    return res.redirect(redirectUrl.toString());
  } catch (error) {
    req.logger.error("Error in OAuth callback handling", error);
    const message = error instanceof OAuthError ? error.message : "Failed to process OAuth callback";
    return res.redirect(`${CONSOLE_URL}${CONSOLE_FAILURE_PATH}?error=${encodeURIComponent(message)}`);
  }
};
var exchangeToken = async (req, res) => {
  if (!isAppRequest(req)) {
    throw new TypeGuardError();
  }
  try {
    const { code } = req.body;
    if (!code) {
      throw new OAuthError("Missing code", import_http_status_codes9.StatusCodes.BAD_REQUEST, "invalid_request");
    }
    const decodedResponse = decodeData(code);
    return res.json(decodedResponse);
  } catch (error) {
    req.logger.error("Error in token exchange", error);
    if (import_axios4.default.isAxiosError(error) && error.response) {
      return res.status(error.response.status).json(error.response.data);
    }
    return res.status(import_http_status_codes9.StatusCodes.INTERNAL_SERVER_ERROR).json({ error: "Failed to exchange token" });
  }
};
var dynamicClientRegister = async (req, res) => {
  if (!isAppRequest(req)) {
    throw new TypeGuardError();
  }
  try {
    req.logger.debug("OAuth client registration request received", {
      body: req.body
    });
    const {
      client_id,
      client_name = "Dynamically Registered Client",
      redirect_uris = [],
      grant_types = ["authorization_code"],
      response_types = ["code"],
      token_endpoint_auth_method = "none",
      software_id
    } = req.body;
    if (!redirect_uris.length) {
      return res.status(import_http_status_codes9.StatusCodes.BAD_REQUEST).json({
        error: "invalid_redirect_uri",
        error_description: "At least one redirect_uri must be provided"
      });
    }
    if (!isRedirectUriAllowed(req, redirect_uris)) {
      return res.status(import_http_status_codes9.StatusCodes.BAD_REQUEST).json({
        error: "invalid_redirect_uri",
        error_description: "Redirect URI must be one of the allowed origins"
      });
    }
    const registrationTime = Date.now();
    const clientId = client_id || crypto5.randomBytes(16).toString("hex");
    const client3 = {
      client_id: clientId,
      client_secret: "",
      // No client secret for public clients
      client_name,
      redirect_uris: Array.isArray(redirect_uris) ? redirect_uris : [redirect_uris],
      grant_types: Array.isArray(grant_types) ? grant_types : [grant_types],
      response_types: Array.isArray(response_types) ? response_types : [response_types],
      token_endpoint_auth_method,
      registration_time: registrationTime
    };
    const response = {
      ...client3,
      client_id_issued_at: Math.floor(registrationTime / 1e3)
    };
    req.logger.debug("New OAuth client registered", {
      clientId,
      clientName: client_name,
      softwareId: software_id
    });
    return res.status(import_http_status_codes9.StatusCodes.CREATED).json(response);
  } catch (error) {
    req.logger.error("Error in registration endpoint", error);
    return res.status(import_http_status_codes9.StatusCodes.INTERNAL_SERVER_ERROR).json({ error: "Failed to process registration request" });
  }
};

// src/routes/oauth.routes.ts
var router8 = (0, import_express8.Router)();
router8.get("/.well-known/oauth-authorization-server", getOAuthServerInfo);
router8.get("/api/oauth/authorize", serverIdMiddleware, authorize);
router8.post("/api/oauth/token", exchangeToken);
router8.get("/api/oauth/callback", handleCallback);
router8.post("/api/oauth/register", dynamicClientRegister);
var oauth_routes_default = router8;

// src/routes/ownid.routes.ts
var import_express9 = __toESM(require("express"), 1);

// src/controllers/ownid.controller.ts
var import_http_status_codes10 = require("http-status-codes");
var config = (req, res) => {
  const serverId = req.query.server_id;
  const config2 = serverId ? {
    appId: process.env.OWNID_ENDUSER_APP_ID,
    env: process.env.OWNID_ENDUSER_ENV
  } : {
    appId: process.env.OWNID_ADMIN_APP_ID,
    env: process.env.OWNID_ADMIN_ENV
  };
  res.status(import_http_status_codes10.StatusCodes.OK).json(config2);
};
var getServerId = (req) => {
  return req.headers["x-ownid-scope"];
};
var setData = async (req, res) => {
  if (!isAppRequest(req)) {
    throw new TypeGuardError();
  }
  const email = req.body.loginId.toLowerCase();
  const ownIdData = req.body.ownIdData;
  const serverId = getServerId(req);
  req.logger.debug("Setting ownid data", {
    email,
    ownIdData,
    serverId
  });
  const result = serverId ? await setEndUserOwnIdData(req.db, serverId, email, ownIdData) : await setAdminOwnIdData(req.db, email, ownIdData);
  if (result.status === "NOT_FOUND") {
    return res.status(import_http_status_codes10.StatusCodes.NOT_FOUND).json({ error: result.error });
  }
  return res.sendStatus(import_http_status_codes10.StatusCodes.NO_CONTENT);
};
var getData = async (req, res) => {
  if (!isAppRequest(req)) {
    throw new TypeGuardError();
  }
  const email = req.body.loginId.toLowerCase();
  const serverId = getServerId(req);
  req.logger.debug("Getting ownid data", {
    email,
    serverId
  });
  const result = serverId ? await getEndUserOwnIdData(req.db, serverId, email) : await getAdminOwnIdData(req.db, req.logger, email);
  switch (result.status) {
    case "NOT_FOUND":
      return res.status(import_http_status_codes10.StatusCodes.NOT_FOUND).json({ error: result.error });
    case "LOCKED":
      return res.status(import_http_status_codes10.StatusCodes.LOCKED).json({ error: result.error });
    case "OK":
      return res.status(import_http_status_codes10.StatusCodes.OK).json(result.data);
    case "NO_CONTENT":
      return res.status(import_http_status_codes10.StatusCodes.NO_CONTENT).send();
    default:
      throw new Error(`Unexpected status: ${result.status}`);
  }
};
var createEndUserSessionSignature = async (email) => {
  const sharedSecret = await enduserSharedSecret();
  const timestamp = Date.now();
  const data = {
    timestamp,
    email,
    signature: signData(sharedSecret, `${email}.${timestamp}`)
  };
  return encodeData(data);
};
var createSession = async (req, res) => {
  if (!isAppRequest(req)) {
    throw new TypeGuardError();
  }
  const email = req.body.loginId.toLowerCase();
  const serverId = getServerId(req);
  req.logger.debug("Creating session", {
    email,
    serverId
  });
  const result = serverId ? await createEndUserSession(req.db, serverId, email, () => createEndUserSessionSignature(email)) : await createAdminSession(req.db, req.logger, email);
  if (result.status === "NOT_FOUND") {
    return res.status(import_http_status_codes10.StatusCodes.NOT_FOUND).json({ error: result.error });
  }
  return res.json(result.data);
};

// src/middlewares/ownid.middleware.ts
var import_http_status_codes11 = require("http-status-codes");
var ownidMiddleware = (req, res, next, sharedSecret) => {
  const body = JSON.stringify(req.body);
  const ownIdSignature = req.headers["ownid-signature"];
  const ownIdTimestamp = req.headers["ownid-timestamp"];
  if (!ownIdSignature || !ownIdTimestamp) {
    res.status(import_http_status_codes11.StatusCodes.BAD_REQUEST).json({ error: "Missing OwnID signature or timestamp" });
    return;
  }
  const dataToSign = `${body}.${ownIdTimestamp}`;
  const currentTime = Date.now();
  const ownIdTimestampMs = parseInt(ownIdTimestamp);
  if (Math.abs(currentTime - ownIdTimestampMs) > SIGNATURE_EXPIRATION_MSEC) {
    res.status(import_http_status_codes11.StatusCodes.BAD_REQUEST).json({ error: "Signature has expired" });
    return;
  }
  const actualSignature = signData(sharedSecret, dataToSign);
  if (actualSignature !== ownIdSignature) {
    res.status(import_http_status_codes11.StatusCodes.BAD_REQUEST).json({ error: "Invalid signature" });
    return;
  }
  next();
};
var ownidAdminMiddleware = async (req, res, next) => {
  const sharedSecret = await adminSharedSecret();
  return ownidMiddleware(req, res, next, sharedSecret);
};
var ownidEndUserMiddleware = async (req, res, next) => {
  const sharedSecret = await enduserSharedSecret();
  return ownidMiddleware(req, res, next, sharedSecret);
};

// src/routes/ownid.routes.ts
var router9 = import_express9.default.Router();
router9.get("/config", config);
router9.post("/admin/setOwnIDDataByLoginId", ownidAdminMiddleware, setData);
router9.post("/admin/getOwnIDDataByLoginId", ownidAdminMiddleware, getData);
router9.post("/admin/getSessionByLoginId", ownidAdminMiddleware, createSession);
router9.post("/enduser/setOwnIDDataByLoginId", ownidEndUserMiddleware, setData);
router9.post("/enduser/getOwnIDDataByLoginId", ownidEndUserMiddleware, getData);
router9.post("/enduser/getSessionByLoginId", ownidEndUserMiddleware, createSession);
var ownid_routes_default = router9;

// src/routes/providers.routes.ts
var import_express10 = require("express");

// src/controllers/oauth-providers.controller.ts
var import_http_status_codes12 = require("http-status-codes");
var import_omit3 = __toESM(require("lodash/omit.js"), 1);
init_config();
var mapProvider = (provider) => ({
  ...(0, import_omit3.default)(provider, ["clientSecret"]),
  contentType: provider.contentType || void 0,
  refreshUrl: provider.refreshUrl || void 0,
  createdAt: provider.createdAt.toISOString(),
  updatedAt: provider.updatedAt.toISOString()
});
var getProviders = async (req, res) => {
  if (!isAdminRequest(req)) {
    throw new TypeGuardError();
  }
  const page = req.query.page ? parseInt(req.query.page) : 1;
  const limit = req.query.limit ? parseInt(req.query.limit) : DEFAULT_PAGE_SIZE;
  req.logger.debug("Getting all providers", { query: req.query, tenantId: req.admin.tenantId });
  try {
    const providers = (await req.db.oAuthProvider.findMany({
      skip: (page - 1) * limit,
      take: limit,
      where: {
        tenantId: req.admin.tenantId
      }
    })).map(mapProvider);
    res.json({ data: providers });
  } catch (error) {
    req.logger.error("Failed to get providers", error);
    res.status(import_http_status_codes12.StatusCodes.INTERNAL_SERVER_ERROR).json({ error: "Failed to get providers" });
  }
};
var createProvider = async (req, res) => {
  if (!isAdminRequest(req)) {
    throw new TypeGuardError();
  }
  req.logger.info("Creating new provider", { body: req.body });
  try {
    if (!req.admin.tenantId) {
      return res.status(import_http_status_codes12.StatusCodes.UNAUTHORIZED).json({
        error: "unauthorized",
        errorDescription: "Tenant ID is required"
      });
    }
    const provider = mapProvider(
      await req.db.oAuthProvider.create({
        data: {
          ...req.body,
          clientSecret: req.body.clientSecret || "",
          tenant: { connect: { id: req.admin.tenantId } }
        }
      })
    );
    res.status(import_http_status_codes12.StatusCodes.CREATED).json(provider);
  } catch (error) {
    req.logger.error("Failed to create provider", error);
    res.status(import_http_status_codes12.StatusCodes.INTERNAL_SERVER_ERROR).json({ error: "Failed to create provider" });
  }
};
var getProvider = async (req, res) => {
  if (!isAdminRequest(req)) {
    throw new TypeGuardError();
  }
  req.logger.debug("Getting provider", { providerId: req.params.providerId, tenantId: req.admin.tenantId });
  try {
    const dbProvider = await req.db.oAuthProvider.findUnique({
      where: { id: req.params.providerId, tenantId: req.admin.tenantId }
    });
    const provider = dbProvider ? mapProvider(dbProvider) : null;
    res.json(provider);
  } catch (error) {
    req.logger.error("Failed to get provider", error);
    res.status(import_http_status_codes12.StatusCodes.INTERNAL_SERVER_ERROR).json({ error: "Failed to get provider" });
  }
};
var updateProvider = async (req, res) => {
  if (!isAdminRequest(req)) {
    throw new TypeGuardError();
  }
  req.logger.info("Updating provider", {
    providerId: req.params.providerId,
    body: req.body,
    tenantId: req.admin.tenantId
  });
  try {
    const provider = mapProvider(
      await req.db.oAuthProvider.update({
        where: { id: req.params.providerId, tenantId: req.admin.tenantId },
        data: req.body
      })
    );
    res.json(provider);
  } catch (error) {
    req.logger.error("Failed to update provider", error);
    res.status(import_http_status_codes12.StatusCodes.INTERNAL_SERVER_ERROR).json({ error: "Failed to update provider" });
  }
};
var deleteProvider = async (req, res) => {
  if (!isAdminRequest(req)) {
    throw new TypeGuardError();
  }
  req.logger.info("Deleting provider", { providerId: req.params.providerId, tenantId: req.admin.tenantId });
  try {
    const connectedToolsCount = await req.db.tool.count({
      where: { oAuthProviderId: req.params.providerId }
    });
    if (connectedToolsCount > 0) {
      return res.status(import_http_status_codes12.StatusCodes.BAD_REQUEST).json({
        error: "Cannot delete provider that is connected to tools"
      });
    }
    await req.db.oAuthProvider.delete({
      where: { id: req.params.providerId, tenantId: req.admin.tenantId }
    });
    res.status(import_http_status_codes12.StatusCodes.NO_CONTENT).send();
  } catch (error) {
    req.logger.error("Failed to delete provider", error);
    res.status(import_http_status_codes12.StatusCodes.INTERNAL_SERVER_ERROR).json({ error: "Failed to delete provider" });
  }
};

// src/routes/providers.routes.ts
var router10 = (0, import_express10.Router)();
router10.get("/", getProviders);
router10.post("/", createProvider);
router10.get("/:providerId", getProvider);
router10.put("/:providerId", updateProvider);
router10.delete("/:providerId", deleteProvider);
var providers_routes_default = router10;

// src/routes/server-auth.routes.ts
var import_express11 = require("express");

// src/controllers/server-auth.controller.ts
var import_http_status_codes13 = require("http-status-codes");
var getServerAuthConfig = async (req, res) => {
  if (!isAdminRequest(req)) {
    throw new TypeGuardError();
  }
  try {
    const { serverId } = req.params;
    const serverAuthService = new ServerAuthService(req.db, req.logger);
    const config2 = await serverAuthService.getServerAuthConfig(serverId);
    res.json(config2);
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error);
    req.logger.error("Failed to get server auth config", { error: errorMessage });
    res.status(import_http_status_codes13.StatusCodes.INTERNAL_SERVER_ERROR).json({ error: "Internal server error" });
  }
};
var updateServerAuthConfig = async (req, res) => {
  if (!isAdminRequest(req)) {
    throw new TypeGuardError();
  }
  try {
    const { serverId } = req.params;
    const updateRequest = req.body;
    const serverAuthService = new ServerAuthService(req.db, req.logger);
    const config2 = await serverAuthService.updateServerAuthConfig(serverId, updateRequest);
    res.json(config2);
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error);
    req.logger.error("Failed to update server auth config", { error: errorMessage });
    res.status(import_http_status_codes13.StatusCodes.INTERNAL_SERVER_ERROR).json({ error: "Internal server error" });
  }
};
var getAuthProviders = async (req, res) => {
  if (!isAdminRequest(req)) {
    throw new TypeGuardError();
  }
  try {
    const { serverId } = req.params;
    const serverAuthService = new ServerAuthService(req.db, req.logger);
    const providers = await serverAuthService.getAuthProviders(serverId);
    res.json(providers);
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error);
    req.logger.error("Failed to get auth providers", { error: errorMessage });
    res.status(import_http_status_codes13.StatusCodes.INTERNAL_SERVER_ERROR).json({ error: "Internal server error" });
  }
};
var createAuthProvider = async (req, res) => {
  if (!isAdminRequest(req)) {
    throw new TypeGuardError();
  }
  try {
    const { serverId } = req.params;
    const providerData = req.body;
    const serverAuthService = new ServerAuthService(req.db, req.logger);
    const provider = await serverAuthService.createAuthProvider(serverId, providerData);
    res.status(import_http_status_codes13.StatusCodes.CREATED).json(provider);
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error);
    req.logger.error("Failed to create auth provider", { error: errorMessage });
    res.status(import_http_status_codes13.StatusCodes.INTERNAL_SERVER_ERROR).json({ error: "Internal server error" });
  }
};
var updateAuthProvider = async (req, res) => {
  if (!isAdminRequest(req)) {
    throw new TypeGuardError();
  }
  try {
    const { serverId, providerId } = req.params;
    const providerData = req.body;
    const serverAuthService = new ServerAuthService(req.db, req.logger);
    const provider = await serverAuthService.updateAuthProvider(serverId, providerId, providerData);
    res.json(provider);
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error);
    req.logger.error("Failed to update auth provider", { error: errorMessage });
    res.status(import_http_status_codes13.StatusCodes.INTERNAL_SERVER_ERROR).json({ error: "Internal server error" });
  }
};
var deleteAuthProvider = async (req, res) => {
  if (!isAdminRequest(req)) {
    throw new TypeGuardError();
  }
  try {
    const { serverId, providerId } = req.params;
    const serverAuthService = new ServerAuthService(req.db, req.logger);
    await serverAuthService.deleteAuthProvider(serverId, providerId);
    res.status(import_http_status_codes13.StatusCodes.NO_CONTENT).send();
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error);
    req.logger.error("Failed to delete auth provider", { error: errorMessage });
    res.status(import_http_status_codes13.StatusCodes.INTERNAL_SERVER_ERROR).json({ error: "Internal server error" });
  }
};
var validateJwksUrl = async (req, res) => {
  if (!isAdminRequest(req)) {
    throw new TypeGuardError();
  }
  try {
    const { jwksUrl } = req.body;
    if (!jwksUrl || typeof jwksUrl !== "string") {
      res.status(import_http_status_codes13.StatusCodes.BAD_REQUEST).json({
        valid: false,
        error: "JWKS URL is required"
      });
      return;
    }
    const serverAuthService = new ServerAuthService(req.db, req.logger);
    const result = await serverAuthService.validateJwksUrl(jwksUrl);
    res.json(result);
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error);
    req.logger.error("Failed to validate JWKS URL", { error: errorMessage });
    res.status(import_http_status_codes13.StatusCodes.INTERNAL_SERVER_ERROR).json({
      valid: false,
      error: "Internal server error"
    });
  }
};

// src/routes/server-auth.routes.ts
var router11 = (0, import_express11.Router)();
router11.get("/:serverId/auth", getServerAuthConfig);
router11.put("/:serverId/auth", updateServerAuthConfig);
router11.get("/:serverId/auth-providers", getAuthProviders);
router11.post("/:serverId/auth-providers", createAuthProvider);
router11.put("/:serverId/auth-providers/:providerId", updateAuthProvider);
router11.delete("/:serverId/auth-providers/:providerId", deleteAuthProvider);
router11.post("/validate-jwks", validateJwksUrl);
var server_auth_routes_default = router11;

// src/routes/servers.routes.ts
var import_express12 = require("express");

// src/controllers/servers.controller.ts
var import_http_status_codes14 = require("http-status-codes");
var import_js_yaml = __toESM(require("js-yaml"), 1);
init_servers_service();
init_openapi();
var getServers = async (req, res) => {
  if (!isAdminRequest(req)) {
    throw new TypeGuardError();
  }
  req.logger.debug("Getting all servers for tenant", { tenantId: req.admin.tenantId });
  try {
    const servers = await getServersForTenant(req.db, req.admin.tenantId);
    res.json(servers);
  } catch (error) {
    req.logger.error("Failed to get servers", error);
    res.status(import_http_status_codes14.StatusCodes.INTERNAL_SERVER_ERROR).json({
      error: "server_list_failed",
      errorDescription: "Failed to get servers"
    });
  }
};
var createServer2 = async (req, res) => {
  if (!isAdminRequest(req)) {
    throw new TypeGuardError();
  }
  try {
    req.logger.info("Creating new server", { body: req.body });
    const server = await createServer(req.db, req.admin.tenantId, {
      name: req.body.name,
      description: req.body.description,
      enabled: req.body.enabled ?? true,
      baseUrl: req.body.baseUrl
    });
    res.status(import_http_status_codes14.StatusCodes.CREATED).json(server);
  } catch (error) {
    req.logger.error("Failed to create server", error);
    res.status(import_http_status_codes14.StatusCodes.INTERNAL_SERVER_ERROR).json({
      error: "internal_server_error",
      errorDescription: "Failed to create server"
    });
  }
};
var getServer = async (req, res) => {
  if (!isAdminRequest(req)) {
    throw new TypeGuardError();
  }
  try {
    req.logger.debug("Getting server", { serverId: req.params.serverId });
    const server = await getServerById(req.db, req.admin.tenantId, req.params.serverId);
    if (!server) {
      return res.status(import_http_status_codes14.StatusCodes.NOT_FOUND).json({
        error: "server_not_found",
        errorDescription: `Server not found: ${req.params.serverId}`
      });
    }
    res.json(server);
  } catch (error) {
    req.logger.error("Failed to get server", error);
    res.status(import_http_status_codes14.StatusCodes.INTERNAL_SERVER_ERROR).json({
      error: "internal_server_error",
      errorDescription: "Failed to get server"
    });
  }
};
var updateServer = async (req, res) => {
  if (!isAdminRequest(req)) {
    throw new TypeGuardError();
  }
  req.logger.info("Updating server", { serverId: req.params.serverId, body: req.body });
  try {
    const server = await updateServerById(req.db, req.admin.tenantId, req.params.serverId, req.body);
    const { clearCache: clearCache2, clearCacheByPartialKey: clearCacheByPartialKey2 } = await Promise.resolve().then(() => (init_cache_service(), cache_service_exports));
    clearCache2({ type: "server" /* SERVER */, ids: [server.id] });
    clearCacheByPartialKey2("server_access" /* SERVER_ACCESS */, server.id);
    res.json(server);
  } catch (error) {
    req.logger.error("Failed to update server", error);
    res.status(import_http_status_codes14.StatusCodes.INTERNAL_SERVER_ERROR).json({
      error: "internal_server_error",
      errorDescription: "Failed to update server"
    });
  }
};
var deleteServer = async (req, res) => {
  if (!isAdminRequest(req)) {
    throw new TypeGuardError();
  }
  req.logger.info("Deleting server", { serverId: req.params.serverId });
  const server = await getServerSlim(req.db, req.admin.tenantId, req.params.serverId);
  if (server) {
    await deleteServerById(req.db, req.admin.tenantId, req.params.serverId);
    const { clearCache: clearCache2, clearCacheByPartialKey: clearCacheByPartialKey2 } = await Promise.resolve().then(() => (init_cache_service(), cache_service_exports));
    clearCache2({ type: "server" /* SERVER */, ids: [server.id] });
    clearCacheByPartialKey2("server_access" /* SERVER_ACCESS */, server.id);
    req.logger.debug("Server deleted and caches cleared", { serverId: req.params.serverId });
  }
  res.status(import_http_status_codes14.StatusCodes.NO_CONTENT).send();
};
var createServerFromOpenApi = async (req, res) => {
  if (!isAdminRequest(req)) {
    throw new TypeGuardError();
  }
  req.logger.info("Creating server from OpenAPI specification");
  try {
    const fileContent = req.body;
    if (!fileContent || !Buffer.isBuffer(fileContent)) {
      req.logger.warn("OpenAPI specification file is required and must be sent as octet-stream");
      return res.status(import_http_status_codes14.StatusCodes.BAD_REQUEST).json({
        error: "invalid_request",
        errorDescription: "OpenAPI specification file is required and must be sent as octet-stream"
      });
    }
    let openApiContent;
    try {
      const yamlContent = fileContent.toString("utf8");
      if (!yamlContent.trim()) {
        req.logger.warn("OpenAPI content is empty");
        return res.status(import_http_status_codes14.StatusCodes.BAD_REQUEST).json({
          error: "invalid_openapi",
          errorDescription: "OpenAPI content is empty"
        });
      }
      openApiContent = import_js_yaml.default.load(yamlContent);
      if (!("openapi" in openApiContent) || !openApiContent.openapi.startsWith("3")) {
        throw new Error("OpenAPI version is not supported");
      }
    } catch (error) {
      req.logger.error("Failed to parse OpenAPI content", error);
      return res.status(import_http_status_codes14.StatusCodes.BAD_REQUEST).json({
        error: "invalid_openapi",
        errorDescription: "Invalid OpenAPI format"
      });
    }
    const validationError = await validateOpenApiContent(openApiContent);
    if (validationError) {
      req.logger.warn(validationError.errorDescription);
      return res.status(import_http_status_codes14.StatusCodes.BAD_REQUEST).json(validationError);
    }
    req.logger.debug("Parsed OpenAPI content:", openApiContent);
    const tenantId = req.admin.tenantId;
    const selectedTools = req.query.selectedTools ? Array.isArray(req.query.selectedTools) ? req.query.selectedTools : [req.query.selectedTools] : void 0;
    const result = await createServerFromOpenApiSpec(
      req.db,
      tenantId,
      req.query.name,
      req.query.description,
      openApiContent,
      selectedTools
    );
    return res.status(import_http_status_codes14.StatusCodes.CREATED).json(result);
  } catch (error) {
    req.logger.error("Failed to create server from OpenAPI", error);
    return res.status(import_http_status_codes14.StatusCodes.INTERNAL_SERVER_ERROR).json({
      error: "server_creation_failed",
      errorDescription: error instanceof Error ? error.message : "Failed to create server from OpenAPI"
    });
  }
};
var createToolsFromOpenApi = async (req, res) => {
  if (!isAdminRequest(req)) {
    throw new TypeGuardError();
  }
  req.logger.info("Creating tools from OpenAPI specification", { serverId: req.params.serverId });
  try {
    const fileContent = req.body;
    if (!fileContent || !Buffer.isBuffer(fileContent)) {
      req.logger.warn("OpenAPI specification file is required and must be sent as octet-stream");
      return res.status(import_http_status_codes14.StatusCodes.BAD_REQUEST).json({
        error: "invalid_request",
        errorDescription: "OpenAPI specification file is required and must be sent as octet-stream"
      });
    }
    let openApiContent;
    try {
      const yamlContent = fileContent.toString("utf8");
      if (!yamlContent.trim()) {
        req.logger.warn("OpenAPI content is empty");
        return res.status(import_http_status_codes14.StatusCodes.BAD_REQUEST).json({
          error: "invalid_openapi",
          errorDescription: "OpenAPI content is empty"
        });
      }
      openApiContent = import_js_yaml.default.load(yamlContent);
      if (!("openapi" in openApiContent) || !openApiContent.openapi.startsWith("3")) {
        throw new Error("OpenAPI version is not supported");
      }
    } catch (error) {
      req.logger.error("Failed to parse OpenAPI content", error);
      return res.status(import_http_status_codes14.StatusCodes.BAD_REQUEST).json({
        error: "invalid_openapi",
        errorDescription: "Invalid OpenAPI format"
      });
    }
    const validationError = await validateOpenApiContent(openApiContent);
    if (validationError) {
      req.logger.warn(validationError.errorDescription);
      return res.status(import_http_status_codes14.StatusCodes.BAD_REQUEST).json(validationError);
    }
    req.logger.debug("Parsed OpenAPI content:", openApiContent);
    const tenantId = req.admin.tenantId;
    const serverId = req.params.serverId;
    const selectedTools = req.query.selectedTools ? Array.isArray(req.query.selectedTools) ? req.query.selectedTools : [req.query.selectedTools] : void 0;
    const result = await createToolsFromOpenApiSpec(
      req.db,
      tenantId,
      serverId,
      openApiContent,
      selectedTools
    );
    return res.status(import_http_status_codes14.StatusCodes.CREATED).json(result);
  } catch (error) {
    req.logger.error("Failed to create tools from OpenAPI", error);
    return res.status(import_http_status_codes14.StatusCodes.INTERNAL_SERVER_ERROR).json({
      error: "tools_creation_failed",
      errorDescription: error instanceof Error ? error.message : "Failed to create tools from OpenAPI"
    });
  }
};
var listTools = async (req, res) => {
  if (!isAdminRequest(req)) {
    throw new TypeGuardError();
  }
  req.logger.debug("Listing tools", { serverId: req.params.serverId });
  try {
    const tools = await getToolsForServer(
      req.db,
      req.admin.tenantId,
      req.params.serverId,
      req.admin.email
    );
    res.json({ data: tools });
  } catch (error) {
    req.logger.error("Failed to list tools", error);
    res.status(import_http_status_codes14.StatusCodes.INTERNAL_SERVER_ERROR).json({
      error: "internal_server_error",
      errorDescription: "Failed to list tools"
    });
  }
};
var createTool2 = async (req, res) => {
  if (!isAdminRequest(req)) {
    throw new TypeGuardError();
  }
  req.logger.info("Creating tool", { serverId: req.params.serverId, body: req.body });
  try {
    const tool2 = await createTool(req.db, req.params.serverId, req.admin.tenantId, req.body);
    res.status(import_http_status_codes14.StatusCodes.CREATED).json(tool2);
  } catch (error) {
    req.logger.error("Error creating tool", error);
    res.status(import_http_status_codes14.StatusCodes.INTERNAL_SERVER_ERROR).json({
      error: "internal_server_error",
      errorDescription: "Failed to create tool"
    });
  }
};
var getTool = async (req, res) => {
  if (!isAdminRequest(req)) {
    throw new TypeGuardError();
  }
  req.logger.debug("Getting tool", { serverId: req.params.serverId, toolId: req.params.toolId });
  try {
    const tool2 = await getToolById(req.db, req.admin.tenantId, req.params.toolId, req.admin.email);
    res.json(tool2);
  } catch (error) {
    req.logger.error("Failed to get tool", error);
    res.status(import_http_status_codes14.StatusCodes.INTERNAL_SERVER_ERROR).json({
      error: "internal_server_error",
      errorDescription: "Failed to get tool"
    });
  }
};
var updateTool = async (req, res) => {
  if (!isAdminRequest(req)) {
    throw new TypeGuardError();
  }
  req.logger.info("Updating tool", { serverId: req.params.serverId, toolId: req.params.toolId, body: req.body });
  try {
    const tool2 = await updateToolById(req.db, req.admin.tenantId, req.params.toolId, req.body);
    res.json(tool2);
  } catch (error) {
    req.logger.error("Failed to update tool", error);
    res.status(import_http_status_codes14.StatusCodes.INTERNAL_SERVER_ERROR).json({
      error: "internal_server_error",
      errorDescription: "Failed to update tool"
    });
  }
};
var deleteTool = async (req, res) => {
  if (!isAdminRequest(req)) {
    throw new TypeGuardError();
  }
  req.logger.info("Deleting tool", { serverId: req.params.serverId, toolId: req.params.toolId });
  try {
    await deleteToolById(req.db, req.admin.tenantId, req.params.toolId);
    res.status(import_http_status_codes14.StatusCodes.NO_CONTENT).send();
  } catch (error) {
    req.logger.error("Failed to delete tool", error);
    res.status(import_http_status_codes14.StatusCodes.INTERNAL_SERVER_ERROR).json({
      error: "internal_server_error",
      errorDescription: "Failed to delete tool"
    });
  }
};
var runTool = async (req, res) => {
  if (!isAdminRequest(req)) {
    throw new TypeGuardError();
  }
  const { serverId, toolId } = req.params;
  const { parameters, authorization } = req.body;
  req.logger.info("Running tool in playground", {
    serverId,
    toolId,
    hasParameters: !!parameters,
    hasAuth: !!authorization
  });
  try {
    const startTime = Date.now();
    const tool2 = await req.db.tool.findUnique({
      where: {
        id: toolId,
        tenantId: req.admin.tenantId,
        serverId
      },
      include: {
        oAuthProvider: true,
        server: {
          select: {
            baseUrl: true
          }
        }
      }
    });
    if (!tool2) {
      return res.status(import_http_status_codes14.StatusCodes.NOT_FOUND).json({
        error: "tool_not_found",
        errorDescription: `Tool not found: ${toolId}`
      });
    }
    const specParameters = tool2.parameters ? JSON.parse(JSON.stringify(tool2.parameters)) : {};
    const callParameters = { ...parameters };
    if (tool2.oAuthProvider) {
      const endUser = await req.db.endUser.findUnique({
        where: {
          email_tenantId: {
            email: req.admin.email,
            tenantId: req.admin.tenantId
          }
        }
      });
      if (!endUser) {
        return res.status(import_http_status_codes14.StatusCodes.UNAUTHORIZED).json({
          error: "unauthorized",
          errorDescription: `No sufficient authorization to run tool: ${toolId}`
        });
      }
      const tokens = await getUserUseableTokens(req.db, endUser.id, tool2.oAuthProvider.id);
      const validTokens = tokens.filter((t) => !t.expiresAt || t.expiresAt > /* @__PURE__ */ new Date());
      if (validTokens.length > 0) {
        callParameters["Authorization"] = `Bearer ${validTokens[0].accessToken}`;
      }
      if (validTokens.length === 0) {
        const tokensWithRefresh = tokens.filter((t) => !!t.refreshToken);
        if (tokensWithRefresh.length > 0) {
          try {
            const tokenData = await refreshAndPersistAccessToken(
              req.db,
              req.logger,
              endUser.id,
              tool2.oAuthProvider,
              tokensWithRefresh[0].refreshToken,
              req.ip || null
            );
            callParameters["Authorization"] = `Bearer ${tokenData.accessToken}`;
          } catch (error) {
            req.logger.warn(`Failed to refresh token for provider ${tool2.oAuthProvider.name}`, error);
            return res.status(import_http_status_codes14.StatusCodes.UNAUTHORIZED).json({
              error: "oauth_authentication_required",
              errorDescription: `OAuth authentication required for ${tool2.name}. Please authenticate via the MCP client.`
            });
          }
        } else {
          return res.status(import_http_status_codes14.StatusCodes.UNAUTHORIZED).json({
            error: "oauth_authentication_required",
            errorDescription: `OAuth authentication required for ${tool2.name}. Please authenticate via the MCP client.`
          });
        }
      }
    }
    const result = await executeApiRequest(
      tool2,
      tool2.server.baseUrl,
      specParameters,
      callParameters,
      req.logger,
      true,
      {}
    );
    const runtimeMs = Date.now() - startTime;
    return res.status(import_http_status_codes14.StatusCodes.OK).json({
      isError: result.isError,
      runtimeMs,
      content: result.content?.filter((res2) => res2.type === "text").map((res2) => res2.text).join("\n") || "<empty>"
    });
  } catch (error) {
    req.logger.error("Failed to run tool", error);
    return res.status(import_http_status_codes14.StatusCodes.INTERNAL_SERVER_ERROR).json({
      isError: true,
      runtimeMs: 0,
      content: "Failed to run tool: " + (error instanceof Error ? error.message : "Unknown error")
    });
  }
};
var createExampleServer = async (req, res) => {
  if (!isAdminRequest(req)) {
    throw new TypeGuardError();
  }
  req.logger.info("Creating example todos server", { tenantId: req.admin.tenantId });
  try {
    const result = await createExampleTodosServer(req.db, req.admin.tenantId);
    return res.status(import_http_status_codes14.StatusCodes.CREATED).json(result);
  } catch (error) {
    req.logger.error("Failed to create example server", error);
    return res.status(import_http_status_codes14.StatusCodes.INTERNAL_SERVER_ERROR).json({
      error: "server_creation_failed",
      errorDescription: error instanceof Error ? error.message : "Failed to create example server"
    });
  }
};
var enableTool = async (req, res) => {
  if (!isAdminRequest(req)) {
    throw new TypeGuardError();
  }
  req.logger.info("Enabling tool", { serverId: req.params.serverId, toolId: req.params.toolId });
  try {
    const tool2 = await updateToolById(req.db, req.admin.tenantId, req.params.toolId, { enabled: true });
    res.json(tool2);
  } catch (error) {
    req.logger.error("Failed to enable tool", error);
    res.status(import_http_status_codes14.StatusCodes.INTERNAL_SERVER_ERROR).json({
      error: "internal_server_error",
      errorDescription: "Failed to enable tool"
    });
  }
};
var disableTool = async (req, res) => {
  if (!isAdminRequest(req)) {
    throw new TypeGuardError();
  }
  req.logger.info("Disabling tool", { serverId: req.params.serverId, toolId: req.params.toolId });
  try {
    const tool2 = await updateToolById(req.db, req.admin.tenantId, req.params.toolId, { enabled: false });
    res.json(tool2);
  } catch (error) {
    req.logger.error("Failed to disable tool", error);
    res.status(import_http_status_codes14.StatusCodes.INTERNAL_SERVER_ERROR).json({
      error: "internal_server_error",
      errorDescription: "Failed to disable tool"
    });
  }
};

// src/routes/servers.routes.ts
var router12 = (0, import_express12.Router)();
router12.get("/", getServers);
router12.post("/", createServer2);
router12.get("/:serverId", getServer);
router12.put("/:serverId", updateServer);
router12.delete("/:serverId", deleteServer);
router12.get("/:serverId/tools", listTools);
router12.post("/:serverId/tools", createTool2);
router12.post("/:serverId/tools/import/openapi", createToolsFromOpenApi);
router12.get("/:serverId/tools/:toolId", getTool);
router12.put("/:serverId/tools/:toolId", updateTool);
router12.delete("/:serverId/tools/:toolId", deleteTool);
router12.post("/:serverId/tools/:toolId/run", runTool);
router12.put("/:serverId/tools/:toolId/enable", enableTool);
router12.put("/:serverId/tools/:toolId/disable", disableTool);
router12.post("/import/openapi", createServerFromOpenApi);
router12.post("/example", createExampleServer);
var servers_routes_default = router12;

// src/routes/tenant.routes.ts
var import_express13 = require("express");

// src/controllers/tenant.controller.ts
var import_http_status_codes15 = require("http-status-codes");

// src/services/tenant.service.ts
var import_client4 = require("@prisma/client");
var import_crypto2 = require("crypto");
var import_date_fns = require("date-fns");
var baseUrl2 = process.env.CONSOLE_URL || "http://localhost:4200";
async function getTenantUsers(db, tenantId, currentUserId) {
  const admins = await db.admin.findMany({
    where: { tenantId },
    select: {
      id: true,
      email: true,
      name: true,
      givenName: true,
      familyName: true,
      role: true,
      createdAt: true,
      updatedAt: true
    },
    orderBy: { createdAt: "asc" }
  });
  const users = admins.map((admin) => ({
    id: admin.id,
    email: admin.email,
    name: admin.name || `${admin.givenName || ""} ${admin.familyName || ""}`.trim() || void 0,
    role: admin.role,
    createdAt: admin.createdAt.toISOString(),
    updatedAt: admin.updatedAt.toISOString()
  }));
  if (currentUserId) {
    return users.filter((user) => user.id !== currentUserId);
  }
  return users;
}
async function getTenantInvitations(db, tenantId) {
  const invitations = await db.tenantInvitation.findMany({
    where: { tenantId },
    include: {
      invitedBy: {
        select: {
          id: true,
          email: true,
          name: true
        }
      },
      acceptedBy: {
        select: {
          id: true,
          email: true,
          name: true
        }
      }
    },
    orderBy: { createdAt: "desc" }
  });
  return invitations.map((inv) => ({
    id: inv.id,
    email: inv.email,
    role: inv.role,
    status: inv.status,
    invitedBy: {
      id: inv.invitedBy.id,
      email: inv.invitedBy.email,
      name: inv.invitedBy.name || void 0
    },
    acceptedBy: inv.acceptedBy ? {
      id: inv.acceptedBy.id,
      email: inv.acceptedBy.email,
      name: inv.acceptedBy.name || void 0
    } : void 0,
    expiresAt: inv.expiresAt.toISOString(),
    createdAt: inv.createdAt.toISOString()
  }));
}
async function createInvitation(db, tenantId, email, role, invitedById, logger2) {
  const existingUser = await db.admin.findFirst({
    where: { email, tenantId }
  });
  if (existingUser) {
    throw new Error("User is already a member of this tenant");
  }
  const existingPendingInvitation = await db.tenantInvitation.findFirst({
    where: { email, tenantId, status: import_client4.InvitationStatus.pending }
  });
  if (existingPendingInvitation) {
    throw new Error("User already has a pending invitation");
  }
  const existingCancelledInvitation = await db.tenantInvitation.findFirst({
    where: { email, tenantId, status: import_client4.InvitationStatus.cancelled }
  });
  const inviter = await db.admin.findUnique({
    where: { id: invitedById }
  });
  if (!inviter) {
    throw new Error("Invalid inviter ID");
  }
  const token = (0, import_crypto2.randomBytes)(32).toString("hex");
  const expiresAt = (0, import_date_fns.addDays)(/* @__PURE__ */ new Date(), 7);
  let invitation;
  if (existingCancelledInvitation) {
    invitation = await db.tenantInvitation.update({
      where: { id: existingCancelledInvitation.id },
      data: {
        role,
        invitedById,
        token,
        expiresAt,
        status: import_client4.InvitationStatus.pending,
        acceptedById: null
        // Clear any previous acceptance
      },
      include: {
        invitedBy: {
          select: {
            id: true,
            email: true,
            name: true
          }
        }
      }
    });
  } else {
    invitation = await db.tenantInvitation.create({
      data: {
        tenantId,
        email,
        role,
        invitedById,
        token,
        expiresAt
      },
      include: {
        invitedBy: {
          select: {
            id: true,
            email: true,
            name: true
          }
        }
      }
    });
  }
  const tenant = await db.tenant.findUnique({ where: { id: tenantId } });
  const invitationLink = `${baseUrl2}/invite/${invitation.token}`;
  try {
    await sendTenantInvitationEmail(
      logger2,
      invitation.email,
      inviter?.name || inviter?.email || "Someone",
      tenant?.name || "Tenant",
      invitationLink,
      invitation.role,
      invitation.expiresAt
    );
  } catch (err) {
    logger2.debug("Failed to send tenant invitation email", err);
  }
  return {
    id: invitation.id,
    email: invitation.email,
    role: invitation.role,
    status: invitation.status,
    invitedBy: {
      id: invitation.invitedBy.id,
      email: invitation.invitedBy.email,
      name: invitation.invitedBy.name || void 0
    },
    tenantName: tenant?.name || "Tenant",
    token: invitation.token,
    expiresAt: invitation.expiresAt.toISOString(),
    createdAt: invitation.createdAt.toISOString()
  };
}
async function acceptInvitation(db, token) {
  const invitation = await db.tenantInvitation.findUnique({
    where: { token },
    include: { tenant: true }
  });
  if (!invitation) {
    throw new Error("Invalid invitation token");
  }
  if (invitation.status !== import_client4.InvitationStatus.pending) {
    throw new Error("Invitation is no longer valid");
  }
  if (invitation.expiresAt < /* @__PURE__ */ new Date()) {
    throw new Error("Invitation has expired");
  }
  const existingUser = await db.admin.findFirst({
    where: { email: invitation.email, tenantId: invitation.tenantId }
  });
  if (existingUser) {
    throw new Error("User is already a member of this tenant");
  }
  const userId = crypto.randomUUID();
  const adminRole = invitation.role;
  await db.admin.create({
    data: {
      id: userId,
      tenantId: invitation.tenantId,
      email: invitation.email,
      role: adminRole,
      enabled: true,
      // Auto-enable the user
      emailVerified: true
      // Mark as verified since they came through invitation
    }
  });
  await db.tenantInvitation.update({
    where: { id: invitation.id },
    data: {
      status: import_client4.InvitationStatus.accepted,
      acceptedById: userId
    }
  });
  return {
    tenantId: invitation.tenantId,
    tenantName: invitation.tenant.name,
    role: invitation.role,
    userId
  };
}
async function updateUserRole(db, tenantId, userId, role) {
  const admin = await db.admin.findFirst({
    where: { id: userId, tenantId }
  });
  if (!admin) {
    throw new Error("User is not a member of this tenant");
  }
  const updatedAdmin = await db.admin.update({
    where: { id: userId },
    data: { role }
  });
  return {
    id: updatedAdmin.id,
    email: updatedAdmin.email,
    name: updatedAdmin.name || `${updatedAdmin.givenName || ""} ${updatedAdmin.familyName || ""}`.trim() || void 0,
    role: updatedAdmin.role,
    createdAt: updatedAdmin.createdAt.toISOString(),
    updatedAt: updatedAdmin.updatedAt.toISOString()
  };
}
async function removeUserFromTenant(db, tenantId, userId) {
  const admin = await db.admin.findFirst({
    where: { id: userId, tenantId }
  });
  if (!admin) {
    throw new Error("User is not a member of this tenant");
  }
  await db.admin.delete({ where: { id: userId } });
}
async function cancelInvitation(db, tenantId, invitationId) {
  const invitation = await db.tenantInvitation.findFirst({
    where: { id: invitationId, tenantId }
  });
  if (!invitation) {
    throw new Error("Invitation not found");
  }
  if (invitation.status !== import_client4.InvitationStatus.pending) {
    throw new Error("Cannot cancel non-pending invitation");
  }
  return db.tenantInvitation.update({
    where: { id: invitationId },
    data: { status: import_client4.InvitationStatus.cancelled }
  });
}
async function getUserTenants(db, userId) {
  const adminTenants = await db.admin.findMany({
    where: { id: userId },
    include: {
      tenant: {
        select: {
          id: true,
          name: true,
          description: true
        }
      }
    },
    orderBy: { createdAt: "asc" }
  });
  return adminTenants.map((admin) => ({
    id: admin.tenant.id,
    name: admin.tenant.name,
    description: admin.tenant.description || void 0,
    role: admin.role,
    joinedAt: admin.createdAt.toISOString()
  }));
}
async function getInvitationByToken(db, token) {
  const invitation = await db.tenantInvitation.findUnique({
    where: { token },
    include: {
      tenant: {
        select: {
          id: true,
          name: true
        }
      },
      invitedBy: {
        select: {
          id: true,
          email: true,
          name: true
        }
      }
    }
  });
  if (!invitation) {
    throw new Error("Invalid invitation token");
  }
  if (invitation.status !== import_client4.InvitationStatus.pending) {
    throw new Error("Invitation is no longer valid");
  }
  if (invitation.expiresAt < /* @__PURE__ */ new Date()) {
    throw new Error("Invitation has expired");
  }
  return {
    id: invitation.id,
    email: invitation.email,
    role: invitation.role,
    status: invitation.status,
    tenantName: invitation.tenant.name,
    invitedBy: {
      id: invitation.invitedBy.id,
      email: invitation.invitedBy.email,
      name: invitation.invitedBy.name || void 0
    },
    expiresAt: invitation.expiresAt.toISOString(),
    createdAt: invitation.createdAt.toISOString()
  };
}
async function canManageRoles(db, tenantId, userId) {
  const admin = await db.admin.findFirst({
    where: { id: userId, tenantId }
  });
  if (!admin) {
    return false;
  }
  return admin.role === import_client4.AdminRole.admin || admin.role === import_client4.AdminRole.superadmin;
}
async function canRemoveUsers(db, tenantId, userId) {
  const admin = await db.admin.findFirst({
    where: { id: userId, tenantId }
  });
  if (!admin) {
    return false;
  }
  return admin.role === import_client4.AdminRole.admin || admin.role === import_client4.AdminRole.superadmin;
}
async function canInviteUsers(db, tenantId, userId) {
  const admin = await db.admin.findFirst({
    where: { id: userId, tenantId }
  });
  if (!admin) {
    return false;
  }
  return admin.role === import_client4.AdminRole.admin || admin.role === import_client4.AdminRole.superadmin;
}

// src/controllers/tenant.controller.ts
var getTenantUsers2 = async (req, res) => {
  if (!isAdminRequest(req)) {
    throw new TypeGuardError();
  }
  req.logger.debug("Getting tenant users");
  try {
    const tenantId = req.admin.tenantId;
    const currentUserId = req.admin.id;
    const users = await getTenantUsers(req.db, tenantId, currentUserId);
    res.json(users);
  } catch (error) {
    req.logger.error("Failed to get tenant users", error);
    res.status(import_http_status_codes15.StatusCodes.INTERNAL_SERVER_ERROR).json({ error: "Failed to get tenant users" });
  }
};
var getTenantInvitations2 = async (req, res) => {
  if (!isAdminRequest(req)) {
    throw new TypeGuardError();
  }
  req.logger.debug("Getting tenant invitations");
  try {
    const tenantId = req.admin.tenantId;
    const currentUserId = req.admin.id;
    const canInvite = await canInviteUsers(req.db, tenantId, currentUserId);
    if (!canInvite) {
      return res.status(import_http_status_codes15.StatusCodes.FORBIDDEN).json({
        error: "insufficient_permissions",
        errorDescription: "You don't have permission to view invitations"
      });
    }
    const invitations = await getTenantInvitations(req.db, tenantId);
    res.json(invitations);
  } catch (error) {
    req.logger.error("Failed to get tenant invitations", error);
    res.status(import_http_status_codes15.StatusCodes.INTERNAL_SERVER_ERROR).json({ error: "Failed to get tenant invitations" });
  }
};
var createInvitation2 = async (req, res) => {
  if (!isAdminRequest(req)) {
    throw new TypeGuardError();
  }
  req.logger.info("Creating invitation", { email: req.body.email, role: req.body.role });
  try {
    const tenantId = req.admin.tenantId;
    const currentUserId = req.admin.id;
    const { email, role } = req.body;
    if (!email || !role) {
      res.status(import_http_status_codes15.StatusCodes.BAD_REQUEST).json({ error: "Email and role are required" });
      return;
    }
    if (!["admin", "member"].includes(role)) {
      res.status(import_http_status_codes15.StatusCodes.BAD_REQUEST).json({ error: "Invalid role" });
      return;
    }
    const canInvite = await canInviteUsers(req.db, tenantId, currentUserId);
    if (!canInvite) {
      return res.status(import_http_status_codes15.StatusCodes.FORBIDDEN).json({
        error: "insufficient_permissions",
        errorDescription: "You don't have permission to invite users"
      });
    }
    const invitation = await createInvitation(req.db, tenantId, email, role, req.admin.id, req.logger);
    res.status(import_http_status_codes15.StatusCodes.CREATED).json(invitation);
  } catch (error) {
    req.logger.error("Failed to create invitation", error);
    if (error instanceof Error) {
      res.status(import_http_status_codes15.StatusCodes.BAD_REQUEST).json({ error: error.message });
    } else {
      res.status(import_http_status_codes15.StatusCodes.INTERNAL_SERVER_ERROR).json({ error: "Failed to create invitation" });
    }
  }
};
var getInvitationByToken2 = async (req, res) => {
  if (!isAppRequest(req)) {
    throw new TypeGuardError();
  }
  req.logger.debug("Getting invitation by token");
  try {
    const { token } = req.params;
    if (!token) {
      res.status(import_http_status_codes15.StatusCodes.BAD_REQUEST).json({ error: "Token is required" });
      return;
    }
    const invitation = await getInvitationByToken(req.db, token);
    res.json(invitation);
  } catch (error) {
    req.logger.error("Failed to get invitation by token", error);
    if (error instanceof Error) {
      res.status(import_http_status_codes15.StatusCodes.BAD_REQUEST).json({ error: error.message });
    } else {
      res.status(import_http_status_codes15.StatusCodes.INTERNAL_SERVER_ERROR).json({ error: "Failed to get invitation" });
    }
  }
};
var acceptInvitation2 = async (req, res) => {
  if (!isAppRequest(req)) {
    throw new TypeGuardError();
  }
  req.logger.info("Accepting invitation");
  try {
    const { token } = req.body;
    if (!token) {
      res.status(import_http_status_codes15.StatusCodes.BAD_REQUEST).json({ error: "Token is required" });
      return;
    }
    const result = await acceptInvitation(req.db, token);
    res.json(result);
  } catch (error) {
    req.logger.error("Failed to accept invitation", error);
    if (error instanceof Error) {
      res.status(import_http_status_codes15.StatusCodes.BAD_REQUEST).json({ error: error.message });
    } else {
      res.status(import_http_status_codes15.StatusCodes.INTERNAL_SERVER_ERROR).json({ error: "Failed to accept invitation" });
    }
  }
};
var updateUserRole2 = async (req, res) => {
  if (!isAdminRequest(req)) {
    throw new TypeGuardError();
  }
  req.logger.info("Updating user role", { userId: req.params.userId, role: req.body.role });
  try {
    const tenantId = req.admin.tenantId;
    const currentUserId = req.admin.id;
    const { userId } = req.params;
    const { role } = req.body;
    if (!role || !["admin", "member", "superadmin"].includes(role)) {
      res.status(import_http_status_codes15.StatusCodes.BAD_REQUEST).json({ error: "Valid role is required" });
      return;
    }
    const canManageRoles2 = await canManageRoles(req.db, tenantId, currentUserId);
    if (!canManageRoles2) {
      return res.status(import_http_status_codes15.StatusCodes.FORBIDDEN).json({
        error: "insufficient_permissions",
        errorDescription: "You don't have permission to manage user roles"
      });
    }
    if (currentUserId === userId) {
      return res.status(import_http_status_codes15.StatusCodes.BAD_REQUEST).json({
        error: "invalid_operation",
        errorDescription: "You cannot change your own role"
      });
    }
    const updatedUser = await updateUserRole(req.db, tenantId, userId, role);
    res.json(updatedUser);
  } catch (error) {
    req.logger.error("Failed to update user role", error);
    if (error instanceof Error) {
      res.status(import_http_status_codes15.StatusCodes.BAD_REQUEST).json({ error: error.message });
    } else {
      res.status(import_http_status_codes15.StatusCodes.INTERNAL_SERVER_ERROR).json({ error: "Failed to update user role" });
    }
  }
};
var removeUserFromTenant2 = async (req, res) => {
  if (!isAdminRequest(req)) {
    throw new TypeGuardError();
  }
  req.logger.info("Removing user from tenant", { userId: req.params.userId });
  try {
    const tenantId = req.admin.tenantId;
    const currentUserId = req.admin.id;
    const { userId } = req.params;
    const canRemoveUsers2 = await canRemoveUsers(req.db, tenantId, currentUserId);
    if (!canRemoveUsers2) {
      return res.status(import_http_status_codes15.StatusCodes.FORBIDDEN).json({
        error: "insufficient_permissions",
        errorDescription: "You don't have permission to remove users"
      });
    }
    if (currentUserId === userId) {
      return res.status(import_http_status_codes15.StatusCodes.BAD_REQUEST).json({
        error: "invalid_operation",
        errorDescription: "You cannot remove yourself from the tenant"
      });
    }
    await removeUserFromTenant(req.db, tenantId, userId);
    res.status(import_http_status_codes15.StatusCodes.NO_CONTENT).send();
  } catch (error) {
    req.logger.error("Failed to remove user from tenant", error);
    if (error instanceof Error) {
      res.status(import_http_status_codes15.StatusCodes.BAD_REQUEST).json({ error: error.message });
    } else {
      res.status(import_http_status_codes15.StatusCodes.INTERNAL_SERVER_ERROR).json({ error: "Failed to remove user from tenant" });
    }
  }
};
var cancelInvitation2 = async (req, res) => {
  if (!isAdminRequest(req)) {
    throw new TypeGuardError();
  }
  req.logger.info("Cancelling invitation", { invitationId: req.params.invitationId });
  try {
    const tenantId = req.admin.tenantId;
    const currentUserId = req.admin.id;
    const { invitationId } = req.params;
    const canInvite = await canInviteUsers(req.db, tenantId, currentUserId);
    if (!canInvite) {
      return res.status(import_http_status_codes15.StatusCodes.FORBIDDEN).json({
        error: "insufficient_permissions",
        errorDescription: "You don't have permission to cancel invitations"
      });
    }
    await cancelInvitation(req.db, tenantId, invitationId);
    res.status(import_http_status_codes15.StatusCodes.NO_CONTENT).send();
  } catch (error) {
    req.logger.error("Failed to cancel invitation", error);
    if (error instanceof Error) {
      res.status(import_http_status_codes15.StatusCodes.BAD_REQUEST).json({ error: error.message });
    } else {
      res.status(import_http_status_codes15.StatusCodes.INTERNAL_SERVER_ERROR).json({ error: "Failed to cancel invitation" });
    }
  }
};
var getUserTenants2 = async (req, res) => {
  if (!isAdminRequest(req)) {
    throw new TypeGuardError();
  }
  req.logger.debug("Getting user tenants");
  try {
    const tenants = await getUserTenants(req.db, req.admin.id);
    res.json(tenants);
  } catch (error) {
    req.logger.error("Failed to get user tenants", error);
    res.status(import_http_status_codes15.StatusCodes.INTERNAL_SERVER_ERROR).json({ error: "Failed to get user tenants" });
  }
};

// src/middlewares/role.middleware.ts
var import_client5 = require("@prisma/client");
var import_http_status_codes16 = require("http-status-codes");
var requireRole = (requiredRoles) => {
  return (req, res, next) => {
    if (!isAdminRequest(req)) {
      throw new TypeGuardError();
    }
    const userRole = req.admin.role;
    if (!requiredRoles.includes(userRole)) {
      req.logger.warn("Insufficient permissions", {
        userRole,
        requiredRoles,
        userId: req.admin.id,
        path: req.path
      });
      return res.status(import_http_status_codes16.StatusCodes.FORBIDDEN).json({
        error: "insufficient_permissions",
        errorDescription: "You don't have permission to perform this action"
      });
    }
    next();
  };
};
var requireAdmin = requireRole([import_client5.AdminRole.admin, import_client5.AdminRole.superadmin]);
var requireSuperAdmin = requireRole([import_client5.AdminRole.superadmin]);
var requireMember = requireRole([import_client5.AdminRole.admin, import_client5.AdminRole.superadmin]);

// src/routes/tenant.routes.ts
var router13 = (0, import_express13.Router)();
router13.get("/users", adminSessionMiddleware, getTenantUsers2);
router13.get("/invitations", adminSessionMiddleware, requireAdmin, getTenantInvitations2);
router13.post("/invitations", adminSessionMiddleware, requireAdmin, createInvitation2);
router13.put("/users/:userId/role", adminSessionMiddleware, requireAdmin, updateUserRole2);
router13.delete("/users/:userId", adminSessionMiddleware, requireAdmin, removeUserFromTenant2);
router13.delete("/invitations/:invitationId", adminSessionMiddleware, requireAdmin, cancelInvitation2);
router13.get("/invitations/:token", getInvitationByToken2);
router13.post("/invitations/accept", acceptInvitation2);
router13.get("/user/tenants", getUserTenants2);
var tenant_routes_default = router13;

// src/routes/users.routes.ts
var import_express14 = require("express");

// src/controllers/tokens.controller.ts
var import_http_status_codes17 = require("http-status-codes");

// src/services/tokens.service.ts
init_cache_service();
var mapToken = (token) => ({
  id: token.id,
  providerId: token.provider.id,
  providerName: token.provider.name,
  scopes: token.scopes,
  issuedAt: token.issuedAt.toISOString(),
  expiresAt: token.expiresAt ? token.expiresAt.toISOString() : void 0
});
async function listUserTokens(db, userId, tenantId, options) {
  const now = /* @__PURE__ */ new Date();
  const tokens = await db.providerToken.findMany({
    where: {
      userId,
      user: {
        tenantId
      },
      ...options.includeExpired !== true ? { OR: [{ expiresAt: { gte: now } }, { expiresAt: null }] } : {},
      ...options.providerName ? { provider: { name: options.providerName } } : {},
      ...options.scope ? { scopes: { has: options.scope } } : {}
    },
    orderBy: [
      {
        provider: {
          name: "asc"
        }
      },
      {
        id: "asc"
      }
    ],
    include: {
      provider: {
        select: {
          id: true,
          name: true
        }
      }
    }
  });
  return tokens.filter(
    (token) => Boolean(token.provider)
  ).map(mapToken);
}
async function verifyUserExists(db, userId, tenantId) {
  const user = await db.endUser.findUnique({
    where: {
      id: userId,
      tenantId
    }
  });
  return !!user;
}
async function getUserByIdSlim(db, userId, tenantId) {
  return await db.endUser.findUnique({
    where: {
      id: userId,
      tenantId
    },
    select: {
      id: true,
      email: true
    }
  });
}
async function revokeToken(db, tokenId, userId) {
  await db.providerToken.delete({
    where: {
      id: tokenId,
      userId
    }
  });
}
async function deleteUserTokens(db, userId) {
  await db.providerToken.deleteMany({
    where: {
      userId
    }
  });
  return null;
}
async function clearUserTokenCache(email) {
  clearCacheByPartialKey("enduser_token" /* ENDUSER_TOKEN */, email);
}

// src/controllers/tokens.controller.ts
var listUserTokens2 = async (req, res) => {
  if (!isAdminRequest(req)) {
    throw new TypeGuardError();
  }
  if (!req.params.userId) {
    res.status(import_http_status_codes17.StatusCodes.BAD_REQUEST).json({ error: "User ID is required" });
    return;
  }
  req.logger.debug("Listing user tokens", {
    userId: req.params.userId,
    query: req.query
  });
  try {
    const tokens = await listUserTokens(req.db, req.params.userId, req.admin.tenantId, {
      includeExpired: req.query.includeExpired === "true",
      providerName: req.query.provider,
      scope: req.query.scope
    });
    res.json(tokens);
  } catch (error) {
    req.logger.error("Failed to list user tokens", error);
    res.status(import_http_status_codes17.StatusCodes.INTERNAL_SERVER_ERROR).json({ error: "Failed to list user tokens" });
  }
};
var revokeProviderToken = async (req, res) => {
  if (!isAdminRequest(req)) {
    throw new TypeGuardError();
  }
  req.logger.info("Revoking provider token", {
    userId: req.params.userId,
    tokenId: req.params.tokenId
  });
  try {
    const userExists = await verifyUserExists(req.db, req.params.userId, req.admin.tenantId);
    if (!userExists) {
      res.status(import_http_status_codes17.StatusCodes.NOT_FOUND).json({ error: "User not found" });
      return;
    }
    await revokeToken(req.db, req.params.tokenId, req.params.userId);
    res.status(import_http_status_codes17.StatusCodes.NO_CONTENT).send();
  } catch (error) {
    req.logger.error("Failed to revoke provider token", error);
    res.status(import_http_status_codes17.StatusCodes.INTERNAL_SERVER_ERROR).json({ error: "Failed to revoke provider token" });
  }
};
var deleteUserTokens2 = async (req, res) => {
  if (!isAdminRequest(req)) {
    throw new TypeGuardError();
  }
  req.logger.info("Deleting user tokens", { userId: req.params.userId });
  try {
    const user = await getUserByIdSlim(req.db, req.params.userId, req.admin.tenantId);
    if (!user) {
      res.status(import_http_status_codes17.StatusCodes.NOT_FOUND).json({ error: "User not found" });
      return;
    }
    await deleteUserTokens(req.db, req.params.userId);
    clearUserTokenCache(user.email);
    res.status(import_http_status_codes17.StatusCodes.NO_CONTENT).send();
  } catch (error) {
    req.logger.error("Failed to delete user tokens", error);
    res.status(import_http_status_codes17.StatusCodes.INTERNAL_SERVER_ERROR).json({ error: "Failed to delete user tokens" });
  }
};

// src/controllers/users.controller.ts
var import_http_status_codes18 = require("http-status-codes");
init_cache_service();

// src/services/users.service.ts
init_config();
var mapUser = (user) => ({
  ...user,
  picture: user.picture || void 0,
  createdAt: user.createdAt.toISOString()
});
async function listUsers(db, tenantId, search, page = 1, limit = DEFAULT_PAGE_SIZE) {
  const users = await db.endUser.findMany({
    where: {
      tenantId,
      ...search ? { email: { contains: search, mode: "insensitive" } } : {}
    },
    orderBy: [
      {
        name: "asc"
      },
      {
        id: "asc"
      }
    ],
    take: limit,
    skip: (page - 1) * limit
  });
  const totalUsers = await db.endUser.count({
    where: {
      tenantId,
      ...search ? { email: { contains: search, mode: "insensitive" } } : {}
    }
  });
  const totalPages = Math.ceil(totalUsers / limit);
  return {
    data: users.map(mapUser),
    pagination: {
      totalItems: totalUsers,
      totalPages,
      currentPage: page,
      itemsPerPage: limit
    }
  };
}
async function getUser(db, userId, tenantId) {
  const user = await db.endUser.findUnique({
    where: {
      id: userId,
      tenantId
    }
  });
  return user ? mapUser(user) : null;
}
async function blockUserServerAccess(db, userId, tenantId, blocked) {
  return db.endUser.updateMany({
    where: { id: userId, tenantId },
    data: { enabled: !blocked }
  });
}

// src/utils/qsParsers.ts
var queryToBoolean = (query) => {
  if (query === void 0) {
    return void 0;
  }
  if (typeof query === "boolean") {
    return query;
  }
  if (typeof query === "string") {
    return query.toLowerCase() === "true";
  }
  return void 0;
};

// src/controllers/users.controller.ts
var listUsers2 = async (req, res) => {
  if (!isAdminRequest(req)) {
    throw new TypeGuardError();
  }
  req.logger.debug("Listing users", { query: req.query });
  try {
    const tenantId = req.admin.tenantId;
    const page = req.query.page ? parseInt(req.query.page) : 1;
    const limit = req.query.limit ? parseInt(req.query.limit) : 20;
    const result = await listUsers(req.db, tenantId, req.query.search, page, limit);
    res.json(result);
  } catch (error) {
    req.logger.error("Failed to list users", error);
    res.status(import_http_status_codes18.StatusCodes.INTERNAL_SERVER_ERROR).json({ error: "Failed to list users" });
  }
};
var getUser2 = async (req, res) => {
  if (!isAdminRequest(req)) {
    throw new TypeGuardError();
  }
  req.logger.debug("Getting user", { userId: req.params.userId });
  try {
    const tenantId = req.admin.tenantId;
    const user = await getUser(req.db, req.params.userId, tenantId);
    if (!user) {
      res.status(import_http_status_codes18.StatusCodes.NOT_FOUND).json({ error: "User not found" });
      return;
    }
    res.json(user);
  } catch (error) {
    req.logger.error("Failed to get user", error);
    res.status(import_http_status_codes18.StatusCodes.INTERNAL_SERVER_ERROR).json({ error: "Failed to get user" });
  }
};
var blockUser = async (req, res) => {
  if (!isAdminRequest(req)) {
    throw new TypeGuardError();
  }
  req.logger.info("Blocking user server access", { userId: req.params.userId, block: req.query.block });
  try {
    const tenantId = req.admin.tenantId;
    const blocked = queryToBoolean(req.query.block);
    if (blocked === void 0) {
      res.status(import_http_status_codes18.StatusCodes.BAD_REQUEST).json({ error: "Invalid 'block' parameter. Expected 'true' or 'false'." });
      return;
    }
    await blockUserServerAccess(req.db, req.params.userId, tenantId, blocked);
    clearCacheByType("server_access" /* SERVER_ACCESS */);
    res.status(import_http_status_codes18.StatusCodes.OK).json({ blocked });
  } catch (error) {
    req.logger.error("Failed to block user server access", error);
    res.status(import_http_status_codes18.StatusCodes.INTERNAL_SERVER_ERROR).json({ error: "Failed to block user server access" });
  }
};

// src/routes/users.routes.ts
var router14 = (0, import_express14.Router)();
router14.get("/", listUsers2);
router14.get("/:userId", getUser2);
router14.post("/:userId", blockUser);
router14.get("/:userId/tokens", adminSessionMiddleware, listUserTokens2);
router14.delete("/:userId/tokens", adminSessionMiddleware, deleteUserTokens2);
router14.delete("/:userId/tokens/:tokenId", adminSessionMiddleware, revokeProviderToken);
var users_routes_default = router14;

// src/main.ts
init_logger();
var app = (0, import_express15.default)();
var port = process.env.PORT || 3333;
process.on("SIGINT", async () => {
  await disconnectDatabase();
  process.exit(0);
});
process.on("SIGTERM", async () => {
  await disconnectDatabase();
  process.exit(0);
});
process.on("uncaughtException", async (error) => {
  console.error("server uncaught exception", error);
  await disconnectDatabase();
  process.exit(1);
});
process.on("unhandledRejection", async (reason) => {
  console.error("server unhandled rejection:", reason);
  await disconnectDatabase();
  process.exit(1);
});
app.set("trust proxy", true);
app.use((0, import_cors.default)());
app.use(loggerMiddleware);
app.use(dbMiddleware);
app.use(import_express15.default.json());
app.use(import_express15.default.text());
app.use(import_express15.default.urlencoded({ extended: false }));
app.use(import_express15.default.raw({ type: "application/octet-stream", limit: "50mb" }));
app.use("/api/providers", adminSessionMiddleware, providers_routes_default);
app.use("/api/servers", adminSessionMiddleware, servers_routes_default);
app.use("/api/servers", adminSessionMiddleware, server_auth_routes_default);
app.use("/api/servers", adminSessionMiddleware, analytics_routes_default);
app.use("/api/servers", adminSessionMiddleware, folders_routes_default);
app.use("/api/users", adminSessionMiddleware, users_routes_default);
app.use("/api/tenant", adminSessionMiddleware, tenant_routes_default);
app.use("/api/admins", admins_routes_default);
app.use("/api/ai", ai_routes_default);
app.use(mcp_routes_default);
app.use(oauth_routes_default);
app.use("/api/health", health_routes_default);
app.use("/api/mirror", mirror_routes_default);
app.use("/api/ownid", ownid_routes_default);
app.use((req, res) => {
  if (isAppRequest(req)) {
    req.logger.debug(`404 Not Found: ${req.method} ${req.path}`);
  }
  res.status(import_http_status_codes19.StatusCodes.NOT_FOUND).json({
    error: "Not Found"
  });
});
app.use(errorHandler);
try {
  const server = app.listen(port, () => {
    logger_default.info(`Server is running on port ${port}`);
  });
  server.on("error", (err) => {
    if (err.code === "EADDRINUSE") {
      logger_default.error(`Port ${port} is already in use`);
    } else {
      logger_default.error("Failed to start server:", err);
    }
    process.exit(1);
  });
} catch (e) {
  logger_default.error("Unexpected error during server startup:", e);
  disconnectDatabase().finally(() => process.exit(1));
}
//# sourceMappingURL=data:application/json;base64,
